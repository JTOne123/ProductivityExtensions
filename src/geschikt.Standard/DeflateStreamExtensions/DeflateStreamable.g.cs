#if (NETSTANDARD2_0 || NET45 || NET40 || NET451 || NET452 || NET46 || NET461 || NET462)
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.IO.Compression;

namespace PRI.ProductivityExtensions.DeflateStreamExtensions
{

	/// <summary>
	/// Class that contains extension methods that extend <seealso cref="System.IO.Compression.DeflateStream">DeflateStream</seealso>
	/// </summary>
	public static partial class DeflateStreamable
	{
		/// <summary>
		/// Extends BeginRead so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// deflatestream.BeginRead(array, offset, count, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginRead(this DeflateStream deflatestream, Byte[] array, Int32 offset, Int32 count, AsyncCallback asyncCallback)
		{
			if(deflatestream == null) throw new ArgumentNullException("deflatestream");

			return deflatestream.BeginRead(array, offset, count, asyncCallback, null);
		}

		/// <summary>
		/// Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// deflatestream.BeginRead(array, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginRead(this DeflateStream deflatestream, Byte[] array, AsyncCallback asyncCallback)
		{
			if(deflatestream == null) throw new ArgumentNullException("deflatestream");

			if(array == null) throw new ArgumentNullException("array");

			return deflatestream.BeginRead(array, 0, array.Length, asyncCallback);
		}

		/// <summary>
		/// Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// deflatestream.BeginWrite(array, offset, count, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginWrite(this DeflateStream deflatestream, Byte[] array, Int32 offset, Int32 count, AsyncCallback asyncCallback)
		{
			if(deflatestream == null) throw new ArgumentNullException("deflatestream");

			return deflatestream.BeginWrite(array, offset, count, asyncCallback, null);
		}

		/// <summary>
		/// Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// deflatestream.BeginWrite(array, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginWrite(this DeflateStream deflatestream, Byte[] array, AsyncCallback asyncCallback)
		{
			if(deflatestream == null) throw new ArgumentNullException("deflatestream");

			if(array == null) throw new ArgumentNullException("array");

			return deflatestream.BeginWrite(array, 0, array.Length, asyncCallback);
		}
	}
}
#endif