//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.IO.Ports;

namespace PRI.ProductivityExtensions.SerialPortExtensions
{

	/// <summary>
	/// Class that contains extension methods that extend <seealso cref="System.IO.Ports.SerialPort">SerialPort</seealso>
	/// </summary>
	public static partial class SerialPortable
	{
		/// <summary>
		/// Extends Read so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// serialport.Read(buffer);
		/// </example>
		/// </summary>
		public static Int32 Read(this SerialPort serialport, Byte[] buffer)
		{
			if(serialport == null) throw new ArgumentNullException("serialport");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return serialport.Read(buffer, 0, buffer.Length);
		}

		/// <summary>
		/// Extends Read so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// serialport.Read(buffer);
		/// </example>
		/// </summary>
		public static Int32 Read(this SerialPort serialport, Char[] buffer)
		{
			if(serialport == null) throw new ArgumentNullException("serialport");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return serialport.Read(buffer, 0, buffer.Length);
		}

		/// <summary>
		/// Extends Write so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// serialport.Write(buffer);
		/// </example>
		/// </summary>
		public static void Write(this SerialPort serialport, Char[] buffer)
		{
			if(serialport == null) throw new ArgumentNullException("serialport");

			if(buffer == null) throw new ArgumentNullException("buffer");

			serialport.Write(buffer, 0, buffer.Length);
		}

		/// <summary>
		/// Extends Write so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// serialport.Write(buffer);
		/// </example>
		/// </summary>
		public static void Write(this SerialPort serialport, Byte[] buffer)
		{
			if(serialport == null) throw new ArgumentNullException("serialport");

			if(buffer == null) throw new ArgumentNullException("buffer");

			serialport.Write(buffer, 0, buffer.Length);
		}

	}
}
