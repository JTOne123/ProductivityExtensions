<?xml version="1.0"?>
<doc>
    <assembly>
        <name>geschikt</name>
    </assembly>
    <members>
        <member name="T:PRI.ProductivityExtensions.AppDomainInitializerExtensions.AppDomainInitializerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.AppDomainInitializer">AppDomainInitializer</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.AppDomainInitializerExtensions.AppDomainInitializerable.BeginInvoke(System.AppDomainInitializer,System.String[],System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            appdomaininitializer.BeginInvoke(args, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.AppSettingsReaderExtensions.AppSettingsReaderable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Configuration.AppSettingsReader">AppSettingsReader</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.AppSettingsReaderExtensions.AppSettingsReaderable.GetValue``1(System.Configuration.AppSettingsReader,System.String)">
            <summary>
            Extends GetValue so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            appsettingsreader.GetValue&lt;int&gt;(key);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ColumnClickEventHandlerExtensions.ColumnClickEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ColumnClickEventHandler">ColumnClickEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ColumnClickEventHandlerExtensions.ColumnClickEventHandlerable.BeginInvoke(System.Windows.Forms.ColumnClickEventHandler,System.Object,System.Windows.Forms.ColumnClickEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            columnclickeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ColumnHeaderConverterExtensions.ColumnHeaderConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ColumnHeaderConverter">ColumnHeaderConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ColumnHeaderConverterExtensions.ColumnHeaderConverterable.ConvertTo``1(System.Windows.Forms.ColumnHeaderConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ColumnHeaderConverterExtensions.ColumnHeaderConverterable.ConvertTo``1(System.Windows.Forms.ColumnHeaderConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            columnheaderconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ColumnReorderedEventHandlerExtensions.ColumnReorderedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ColumnReorderedEventHandler">ColumnReorderedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ColumnReorderedEventHandlerExtensions.ColumnReorderedEventHandlerable.BeginInvoke(System.Windows.Forms.ColumnReorderedEventHandler,System.Object,System.Windows.Forms.ColumnReorderedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            columnreorderedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ColumnWidthChangedEventHandlerExtensions.ColumnWidthChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ColumnWidthChangedEventHandler">ColumnWidthChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ColumnWidthChangedEventHandlerExtensions.ColumnWidthChangedEventHandlerable.BeginInvoke(System.Windows.Forms.ColumnWidthChangedEventHandler,System.Object,System.Windows.Forms.ColumnWidthChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            columnwidthchangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ColumnWidthChangingEventHandlerExtensions.ColumnWidthChangingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ColumnWidthChangingEventHandler">ColumnWidthChangingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ColumnWidthChangingEventHandlerExtensions.ColumnWidthChangingEventHandlerable.BeginInvoke(System.Windows.Forms.ColumnWidthChangingEventHandler,System.Object,System.Windows.Forms.ColumnWidthChangingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            columnwidthchangingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ContentsResizedEventHandlerExtensions.ContentsResizedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ContentsResizedEventHandler">ContentsResizedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ContentsResizedEventHandlerExtensions.ContentsResizedEventHandlerable.BeginInvoke(System.Windows.Forms.ContentsResizedEventHandler,System.Object,System.Windows.Forms.ContentsResizedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            contentsresizedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ControlEventHandlerExtensions.ControlEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ControlEventHandler">ControlEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ControlEventHandlerExtensions.ControlEventHandlerable.BeginInvoke(System.Windows.Forms.ControlEventHandler,System.Object,System.Windows.Forms.ControlEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            controleventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.CrossAppDomainDelegateExtensions.CrossAppDomainDelegateable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.CrossAppDomainDelegate">CrossAppDomainDelegate</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CrossAppDomainDelegateExtensions.CrossAppDomainDelegateable.BeginInvoke(System.CrossAppDomainDelegate,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            crossappdomaindelegate.BeginInvoke(callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.CrossContextDelegateExtensions.CrossContextDelegateable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Runtime.Remoting.Contexts.CrossContextDelegate">CrossContextDelegate</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CrossContextDelegateExtensions.CrossContextDelegateable.BeginInvoke(System.Runtime.Remoting.Contexts.CrossContextDelegate,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            crosscontextdelegate.BeginInvoke(callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.CryptoAPITransformExtensions.CryptoAPITransformable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Security.Cryptography.CryptoAPITransform">CryptoAPITransform</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CryptoAPITransformExtensions.CryptoAPITransformable.TransformBlock(System.Security.Cryptography.CryptoAPITransform,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Extends TransformBlock so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            cryptoapitransform.TransformBlock(inputBuffer, outputBuffer, outputOffset);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CryptoAPITransformExtensions.CryptoAPITransformable.TransformFinalBlock(System.Security.Cryptography.CryptoAPITransform,System.Byte[])">
            <summary>
            Extends TransformFinalBlock so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            cryptoapitransform.TransformFinalBlock(inputBuffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.CursorConverterExtensions.CursorConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.CursorConverter">CursorConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CursorConverterExtensions.CursorConverterable.ConvertTo``1(System.Windows.Forms.CursorConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CursorConverterExtensions.CursorConverterable.ConvertTo``1(System.Windows.Forms.CursorConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            cursorconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataColumnChangeEventHandlerExtensions.DataColumnChangeEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.DataColumnChangeEventHandler">DataColumnChangeEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataColumnChangeEventHandlerExtensions.DataColumnChangeEventHandlerable.BeginInvoke(System.Data.DataColumnChangeEventHandler,System.Object,System.Data.DataColumnChangeEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datacolumnchangeeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataColumnExcentions.DataColumable">
            <summary>
            class that contains extension methods that extend <seealso cref="T:System.Data.DataColumnCollection"/>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataColumnExcentions.DataColumable.Add``1(System.Data.DataColumnCollection,System.String)">
            <summary>
            Adds a generic Add&lt;T&gt; to DataColumnCollection to avoid Add(typeof(T), "columnName")
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataColumnCollection"></param>
            <param name="columnName"></param>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridPreferredColumnWidthTypeConverterExtensions.DataGridPreferredColumnWidthTypeConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridPreferredColumnWidthTypeConverter">DataGridPreferredColumnWidthTypeConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridPreferredColumnWidthTypeConverterExtensions.DataGridPreferredColumnWidthTypeConverterable.ConvertTo``1(System.Windows.Forms.DataGridPreferredColumnWidthTypeConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridPreferredColumnWidthTypeConverterExtensions.DataGridPreferredColumnWidthTypeConverterable.ConvertTo``1(System.Windows.Forms.DataGridPreferredColumnWidthTypeConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            datagridpreferredcolumnwidthtypeconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewAutoSizeColumnModeEventHandlerExtensions.DataGridViewAutoSizeColumnModeEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler">DataGridViewAutoSizeColumnModeEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewAutoSizeColumnModeEventHandlerExtensions.DataGridViewAutoSizeColumnModeEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler,System.Object,System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewautosizecolumnmodeeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewAutoSizeColumnsModeEventHandlerExtensions.DataGridViewAutoSizeColumnsModeEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler">DataGridViewAutoSizeColumnsModeEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewAutoSizeColumnsModeEventHandlerExtensions.DataGridViewAutoSizeColumnsModeEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler,System.Object,System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewautosizecolumnsmodeeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewAutoSizeModeEventHandlerExtensions.DataGridViewAutoSizeModeEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewAutoSizeModeEventHandler">DataGridViewAutoSizeModeEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewAutoSizeModeEventHandlerExtensions.DataGridViewAutoSizeModeEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewAutoSizeModeEventHandler,System.Object,System.Windows.Forms.DataGridViewAutoSizeModeEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewautosizemodeeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewBindingCompleteEventHandlerExtensions.DataGridViewBindingCompleteEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewBindingCompleteEventHandler">DataGridViewBindingCompleteEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewBindingCompleteEventHandlerExtensions.DataGridViewBindingCompleteEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewBindingCompleteEventHandler,System.Object,System.Windows.Forms.DataGridViewBindingCompleteEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewbindingcompleteeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellCancelEventHandlerExtensions.DataGridViewCellCancelEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellCancelEventHandler">DataGridViewCellCancelEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellCancelEventHandlerExtensions.DataGridViewCellCancelEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellCancelEventHandler,System.Object,System.Windows.Forms.DataGridViewCellCancelEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcellcanceleventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellContextMenuStripNeededEventHandlerExtensions.DataGridViewCellContextMenuStripNeededEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler">DataGridViewCellContextMenuStripNeededEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellContextMenuStripNeededEventHandlerExtensions.DataGridViewCellContextMenuStripNeededEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler,System.Object,System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcellcontextmenustripneededeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellErrorTextNeededEventHandlerExtensions.DataGridViewCellErrorTextNeededEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler">DataGridViewCellErrorTextNeededEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellErrorTextNeededEventHandlerExtensions.DataGridViewCellErrorTextNeededEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler,System.Object,System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcellerrortextneededeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellEventHandlerExtensions.DataGridViewCellEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellEventHandler">DataGridViewCellEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellEventHandlerExtensions.DataGridViewCellEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellEventHandler,System.Object,System.Windows.Forms.DataGridViewCellEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcelleventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellFormattingEventHandlerExtensions.DataGridViewCellFormattingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellFormattingEventHandler">DataGridViewCellFormattingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellFormattingEventHandlerExtensions.DataGridViewCellFormattingEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellFormattingEventHandler,System.Object,System.Windows.Forms.DataGridViewCellFormattingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcellformattingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellMouseEventHandlerExtensions.DataGridViewCellMouseEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellMouseEventHandler">DataGridViewCellMouseEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellMouseEventHandlerExtensions.DataGridViewCellMouseEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellMouseEventHandler,System.Object,System.Windows.Forms.DataGridViewCellMouseEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcellmouseeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellPaintingEventHandlerExtensions.DataGridViewCellPaintingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellPaintingEventHandler">DataGridViewCellPaintingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellPaintingEventHandlerExtensions.DataGridViewCellPaintingEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellPaintingEventHandler,System.Object,System.Windows.Forms.DataGridViewCellPaintingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcellpaintingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellParsingEventHandlerExtensions.DataGridViewCellParsingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellParsingEventHandler">DataGridViewCellParsingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellParsingEventHandlerExtensions.DataGridViewCellParsingEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellParsingEventHandler,System.Object,System.Windows.Forms.DataGridViewCellParsingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcellparsingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellStateChangedEventHandlerExtensions.DataGridViewCellStateChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellStateChangedEventHandler">DataGridViewCellStateChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellStateChangedEventHandlerExtensions.DataGridViewCellStateChangedEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellStateChangedEventHandler,System.Object,System.Windows.Forms.DataGridViewCellStateChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcellstatechangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellStyleContentChangedEventHandlerExtensions.DataGridViewCellStyleContentChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler">DataGridViewCellStyleContentChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellStyleContentChangedEventHandlerExtensions.DataGridViewCellStyleContentChangedEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler,System.Object,System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcellstylecontentchangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellStyleConverterExtensions.DataGridViewCellStyleConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellStyleConverter">DataGridViewCellStyleConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellStyleConverterExtensions.DataGridViewCellStyleConverterable.ConvertTo``1(System.Windows.Forms.DataGridViewCellStyleConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellStyleConverterExtensions.DataGridViewCellStyleConverterable.ConvertTo``1(System.Windows.Forms.DataGridViewCellStyleConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            datagridviewcellstyleconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellToolTipTextNeededEventHandlerExtensions.DataGridViewCellToolTipTextNeededEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler">DataGridViewCellToolTipTextNeededEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellToolTipTextNeededEventHandlerExtensions.DataGridViewCellToolTipTextNeededEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler,System.Object,System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcelltooltiptextneededeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellValidatingEventHandlerExtensions.DataGridViewCellValidatingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellValidatingEventHandler">DataGridViewCellValidatingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellValidatingEventHandlerExtensions.DataGridViewCellValidatingEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellValidatingEventHandler,System.Object,System.Windows.Forms.DataGridViewCellValidatingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcellvalidatingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellValueEventHandlerExtensions.DataGridViewCellValueEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellValueEventHandler">DataGridViewCellValueEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellValueEventHandlerExtensions.DataGridViewCellValueEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellValueEventHandler,System.Object,System.Windows.Forms.DataGridViewCellValueEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcellvalueeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewColumnDividerDoubleClickEventHandlerExtensions.DataGridViewColumnDividerDoubleClickEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventHandler">DataGridViewColumnDividerDoubleClickEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewColumnDividerDoubleClickEventHandlerExtensions.DataGridViewColumnDividerDoubleClickEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventHandler,System.Object,System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcolumndividerdoubleclickeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewColumnEventHandlerExtensions.DataGridViewColumnEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewColumnEventHandler">DataGridViewColumnEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewColumnEventHandlerExtensions.DataGridViewColumnEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewColumnEventHandler,System.Object,System.Windows.Forms.DataGridViewColumnEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcolumneventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewColumnStateChangedEventHandlerExtensions.DataGridViewColumnStateChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewColumnStateChangedEventHandler">DataGridViewColumnStateChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewColumnStateChangedEventHandlerExtensions.DataGridViewColumnStateChangedEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewColumnStateChangedEventHandler,System.Object,System.Windows.Forms.DataGridViewColumnStateChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcolumnstatechangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewDataErrorEventHandlerExtensions.DataGridViewDataErrorEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewDataErrorEventHandler">DataGridViewDataErrorEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewDataErrorEventHandlerExtensions.DataGridViewDataErrorEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewDataErrorEventHandler,System.Object,System.Windows.Forms.DataGridViewDataErrorEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewdataerroreventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewEditingControlShowingEventHandlerExtensions.DataGridViewEditingControlShowingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewEditingControlShowingEventHandler">DataGridViewEditingControlShowingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewEditingControlShowingEventHandlerExtensions.DataGridViewEditingControlShowingEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewEditingControlShowingEventHandler,System.Object,System.Windows.Forms.DataGridViewEditingControlShowingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridvieweditingcontrolshowingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowCancelEventHandlerExtensions.DataGridViewRowCancelEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowCancelEventHandler">DataGridViewRowCancelEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowCancelEventHandlerExtensions.DataGridViewRowCancelEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowCancelEventHandler,System.Object,System.Windows.Forms.DataGridViewRowCancelEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewrowcanceleventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowContextMenuStripNeededEventHandlerExtensions.DataGridViewRowContextMenuStripNeededEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler">DataGridViewRowContextMenuStripNeededEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowContextMenuStripNeededEventHandlerExtensions.DataGridViewRowContextMenuStripNeededEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler,System.Object,System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewrowcontextmenustripneededeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowDividerDoubleClickEventHandlerExtensions.DataGridViewRowDividerDoubleClickEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowDividerDoubleClickEventHandler">DataGridViewRowDividerDoubleClickEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowDividerDoubleClickEventHandlerExtensions.DataGridViewRowDividerDoubleClickEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowDividerDoubleClickEventHandler,System.Object,System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewrowdividerdoubleclickeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowErrorTextNeededEventHandlerExtensions.DataGridViewRowErrorTextNeededEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler">DataGridViewRowErrorTextNeededEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowErrorTextNeededEventHandlerExtensions.DataGridViewRowErrorTextNeededEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler,System.Object,System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewrowerrortextneededeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowEventHandlerExtensions.DataGridViewRowEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowEventHandler">DataGridViewRowEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowEventHandlerExtensions.DataGridViewRowEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowEventHandler,System.Object,System.Windows.Forms.DataGridViewRowEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewroweventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowHeightInfoNeededEventHandlerExtensions.DataGridViewRowHeightInfoNeededEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowHeightInfoNeededEventHandler">DataGridViewRowHeightInfoNeededEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowHeightInfoNeededEventHandlerExtensions.DataGridViewRowHeightInfoNeededEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowHeightInfoNeededEventHandler,System.Object,System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewrowheightinfoneededeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowHeightInfoPushedEventHandlerExtensions.DataGridViewRowHeightInfoPushedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowHeightInfoPushedEventHandler">DataGridViewRowHeightInfoPushedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowHeightInfoPushedEventHandlerExtensions.DataGridViewRowHeightInfoPushedEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowHeightInfoPushedEventHandler,System.Object,System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewrowheightinfopushedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowPostPaintEventHandlerExtensions.DataGridViewRowPostPaintEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowPostPaintEventHandler">DataGridViewRowPostPaintEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowPostPaintEventHandlerExtensions.DataGridViewRowPostPaintEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowPostPaintEventHandler,System.Object,System.Windows.Forms.DataGridViewRowPostPaintEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewrowpostpainteventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowPrePaintEventHandlerExtensions.DataGridViewRowPrePaintEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowPrePaintEventHandler">DataGridViewRowPrePaintEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowPrePaintEventHandlerExtensions.DataGridViewRowPrePaintEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowPrePaintEventHandler,System.Object,System.Windows.Forms.DataGridViewRowPrePaintEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewrowprepainteventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowsAddedEventHandlerExtensions.DataGridViewRowsAddedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowsAddedEventHandler">DataGridViewRowsAddedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowsAddedEventHandlerExtensions.DataGridViewRowsAddedEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowsAddedEventHandler,System.Object,System.Windows.Forms.DataGridViewRowsAddedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewrowsaddedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowsRemovedEventHandlerExtensions.DataGridViewRowsRemovedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowsRemovedEventHandler">DataGridViewRowsRemovedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowsRemovedEventHandlerExtensions.DataGridViewRowsRemovedEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowsRemovedEventHandler,System.Object,System.Windows.Forms.DataGridViewRowsRemovedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewrowsremovedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowStateChangedEventHandlerExtensions.DataGridViewRowStateChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowStateChangedEventHandler">DataGridViewRowStateChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowStateChangedEventHandlerExtensions.DataGridViewRowStateChangedEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowStateChangedEventHandler,System.Object,System.Windows.Forms.DataGridViewRowStateChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewrowstatechangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewSortCompareEventHandlerExtensions.DataGridViewSortCompareEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewSortCompareEventHandler">DataGridViewSortCompareEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewSortCompareEventHandlerExtensions.DataGridViewSortCompareEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewSortCompareEventHandler,System.Object,System.Windows.Forms.DataGridViewSortCompareEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewsortcompareeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DateBoldEventHandlerExtensions.DateBoldEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DateBoldEventHandler">DateBoldEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DateBoldEventHandlerExtensions.DateBoldEventHandlerable.BeginInvoke(System.Windows.Forms.DateBoldEventHandler,System.Object,System.Windows.Forms.DateBoldEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            dateboldeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DateRangeEventHandlerExtensions.DateRangeEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DateRangeEventHandler">DateRangeEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DateRangeEventHandlerExtensions.DateRangeEventHandlerable.BeginInvoke(System.Windows.Forms.DateRangeEventHandler,System.Object,System.Windows.Forms.DateRangeEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            daterangeeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DragEventHandlerExtensions.DragEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DragEventHandler">DragEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DragEventHandlerExtensions.DragEventHandlerable.BeginInvoke(System.Windows.Forms.DragEventHandler,System.Object,System.Windows.Forms.DragEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            drageventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DrawItemEventHandlerExtensions.DrawItemEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DrawItemEventHandler">DrawItemEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DrawItemEventHandlerExtensions.DrawItemEventHandlerable.BeginInvoke(System.Windows.Forms.DrawItemEventHandler,System.Object,System.Windows.Forms.DrawItemEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            drawitemeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DrawListViewColumnHeaderEventHandlerExtensions.DrawListViewColumnHeaderEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DrawListViewColumnHeaderEventHandler">DrawListViewColumnHeaderEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DrawListViewColumnHeaderEventHandlerExtensions.DrawListViewColumnHeaderEventHandlerable.BeginInvoke(System.Windows.Forms.DrawListViewColumnHeaderEventHandler,System.Object,System.Windows.Forms.DrawListViewColumnHeaderEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            drawlistviewcolumnheadereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DrawListViewItemEventHandlerExtensions.DrawListViewItemEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DrawListViewItemEventHandler">DrawListViewItemEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DrawListViewItemEventHandlerExtensions.DrawListViewItemEventHandlerable.BeginInvoke(System.Windows.Forms.DrawListViewItemEventHandler,System.Object,System.Windows.Forms.DrawListViewItemEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            drawlistviewitemeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DrawListViewSubItemEventHandlerExtensions.DrawListViewSubItemEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DrawListViewSubItemEventHandler">DrawListViewSubItemEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DrawListViewSubItemEventHandlerExtensions.DrawListViewSubItemEventHandlerable.BeginInvoke(System.Windows.Forms.DrawListViewSubItemEventHandler,System.Object,System.Windows.Forms.DrawListViewSubItemEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            drawlistviewsubitemeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DrawToolTipEventHandlerExtensions.DrawToolTipEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DrawToolTipEventHandler">DrawToolTipEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DrawToolTipEventHandlerExtensions.DrawToolTipEventHandlerable.BeginInvoke(System.Windows.Forms.DrawToolTipEventHandler,System.Object,System.Windows.Forms.DrawToolTipEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            drawtooltipeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DrawTreeNodeEventHandlerExtensions.DrawTreeNodeEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DrawTreeNodeEventHandler">DrawTreeNodeEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DrawTreeNodeEventHandlerExtensions.DrawTreeNodeEventHandlerable.BeginInvoke(System.Windows.Forms.DrawTreeNodeEventHandler,System.Object,System.Windows.Forms.DrawTreeNodeEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            drawtreenodeeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.EntryWrittenEventHandlerExtensions.EntryWrittenEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Diagnostics.EntryWrittenEventHandler">EntryWrittenEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.EntryWrittenEventHandlerExtensions.EntryWrittenEventHandlerable.BeginInvoke(System.Diagnostics.EntryWrittenEventHandler,System.Object,System.Diagnostics.EntryWrittenEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            entrywritteneventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.FormClosedEventHandlerExtensions.FormClosedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.FormClosedEventHandler">FormClosedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.FormClosedEventHandlerExtensions.FormClosedEventHandlerable.BeginInvoke(System.Windows.Forms.FormClosedEventHandler,System.Object,System.Windows.Forms.FormClosedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            formclosedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.FormClosingEventHandlerExtensions.FormClosingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.FormClosingEventHandler">FormClosingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.FormClosingEventHandlerExtensions.FormClosingEventHandlerable.BeginInvoke(System.Windows.Forms.FormClosingEventHandler,System.Object,System.Windows.Forms.FormClosingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            formclosingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.GiveFeedbackEventHandlerExtensions.GiveFeedbackEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.GiveFeedbackEventHandler">GiveFeedbackEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.GiveFeedbackEventHandlerExtensions.GiveFeedbackEventHandlerable.BeginInvoke(System.Windows.Forms.GiveFeedbackEventHandler,System.Object,System.Windows.Forms.GiveFeedbackEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            givefeedbackeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.HeaderHandlerExtensions.HeaderHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Runtime.Remoting.Messaging.HeaderHandler">HeaderHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.HeaderHandlerExtensions.HeaderHandlerable.BeginInvoke(System.Runtime.Remoting.Messaging.HeaderHandler,System.Runtime.Remoting.Messaging.Header[],System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            headerhandler.BeginInvoke(headers, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.HelpEventHandlerExtensions.HelpEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.HelpEventHandler">HelpEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.HelpEventHandlerExtensions.HelpEventHandlerable.BeginInvoke(System.Windows.Forms.HelpEventHandler,System.Object,System.Windows.Forms.HelpEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            helpeventhandler.BeginInvoke(sender, hlpevent, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.HtmlElementErrorEventHandlerExtensions.HtmlElementErrorEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.HtmlElementErrorEventHandler">HtmlElementErrorEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.HtmlElementErrorEventHandlerExtensions.HtmlElementErrorEventHandlerable.BeginInvoke(System.Windows.Forms.HtmlElementErrorEventHandler,System.Object,System.Windows.Forms.HtmlElementErrorEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            htmlelementerroreventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.HtmlElementEventHandlerExtensions.HtmlElementEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.HtmlElementEventHandler">HtmlElementEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.HtmlElementEventHandlerExtensions.HtmlElementEventHandlerable.BeginInvoke(System.Windows.Forms.HtmlElementEventHandler,System.Object,System.Windows.Forms.HtmlElementEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            htmlelementeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.IDbConnectionExtensions.IDbConnectionable">
            <summary>
            class that contains extension methods that extend <seealso cref="T:System.Data.IDbConnection"/>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.IDbConnectionExtensions.IDbConnectionable.SafeClose(System.Data.IDbConnection,System.Boolean)">
            <summary>
            A safe close routine for a database connection, which can also dispose the connection, if required.
            </summary>
            <param name="toClose">the connection to close</param>
            <param name="dispose">if set to true, it will also dispose the connection.</param>
        </member>
        <member name="T:PRI.ProductivityExtensions.IEnumerableExtensions.IEnumerableable">
            <summary>
            class that contains extension methods that extend <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ImageIndexConverterExtensions.ImageIndexConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ImageIndexConverter">ImageIndexConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ImageIndexConverterExtensions.ImageIndexConverterable.ConvertTo``1(System.Windows.Forms.ImageIndexConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ImageIndexConverterExtensions.ImageIndexConverterable.ConvertTo``1(System.Windows.Forms.ImageIndexConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            imageindexconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ImageKeyConverterExtensions.ImageKeyConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ImageKeyConverter">ImageKeyConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ImageKeyConverterExtensions.ImageKeyConverterable.ConvertTo``1(System.Windows.Forms.ImageKeyConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ImageKeyConverterExtensions.ImageKeyConverterable.ConvertTo``1(System.Windows.Forms.ImageKeyConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            imagekeyconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.InputLanguageChangedEventHandlerExtensions.InputLanguageChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.InputLanguageChangedEventHandler">InputLanguageChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.InputLanguageChangedEventHandlerExtensions.InputLanguageChangedEventHandlerable.BeginInvoke(System.Windows.Forms.InputLanguageChangedEventHandler,System.Object,System.Windows.Forms.InputLanguageChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            inputlanguagechangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.InputLanguageChangingEventHandlerExtensions.InputLanguageChangingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.InputLanguageChangingEventHandler">InputLanguageChangingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.InputLanguageChangingEventHandlerExtensions.InputLanguageChangingEventHandlerable.BeginInvoke(System.Windows.Forms.InputLanguageChangingEventHandler,System.Object,System.Windows.Forms.InputLanguageChangingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            inputlanguagechangingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ItemChangedEventHandlerExtensions.ItemChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ItemChangedEventHandler">ItemChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ItemChangedEventHandlerExtensions.ItemChangedEventHandlerable.BeginInvoke(System.Windows.Forms.ItemChangedEventHandler,System.Object,System.Windows.Forms.ItemChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            itemchangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ItemCheckedEventHandlerExtensions.ItemCheckedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ItemCheckedEventHandler">ItemCheckedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ItemCheckedEventHandlerExtensions.ItemCheckedEventHandlerable.BeginInvoke(System.Windows.Forms.ItemCheckedEventHandler,System.Object,System.Windows.Forms.ItemCheckedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            itemcheckedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ItemCheckEventHandlerExtensions.ItemCheckEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ItemCheckEventHandler">ItemCheckEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ItemCheckEventHandlerExtensions.ItemCheckEventHandlerable.BeginInvoke(System.Windows.Forms.ItemCheckEventHandler,System.Object,System.Windows.Forms.ItemCheckEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            itemcheckeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ItemDragEventHandlerExtensions.ItemDragEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ItemDragEventHandler">ItemDragEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ItemDragEventHandlerExtensions.ItemDragEventHandlerable.BeginInvoke(System.Windows.Forms.ItemDragEventHandler,System.Object,System.Windows.Forms.ItemDragEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            itemdrageventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.KeyEventHandlerExtensions.KeyEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.KeyEventHandler">KeyEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.KeyEventHandlerExtensions.KeyEventHandlerable.BeginInvoke(System.Windows.Forms.KeyEventHandler,System.Object,System.Windows.Forms.KeyEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            keyeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.KeyPressEventHandlerExtensions.KeyPressEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.KeyPressEventHandler">KeyPressEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.KeyPressEventHandlerExtensions.KeyPressEventHandlerable.BeginInvoke(System.Windows.Forms.KeyPressEventHandler,System.Object,System.Windows.Forms.KeyPressEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            keypresseventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.KeysConverterExtensions.KeysConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.KeysConverter">KeysConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.KeysConverterExtensions.KeysConverterable.ConvertTo``1(System.Windows.Forms.KeysConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.KeysConverterExtensions.KeysConverterable.ConvertTo``1(System.Windows.Forms.KeysConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            keysconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.LabelEditEventHandlerExtensions.LabelEditEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.LabelEditEventHandler">LabelEditEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.LabelEditEventHandlerExtensions.LabelEditEventHandlerable.BeginInvoke(System.Windows.Forms.LabelEditEventHandler,System.Object,System.Windows.Forms.LabelEditEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            labelediteventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.LayoutEventHandlerExtensions.LayoutEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.LayoutEventHandler">LayoutEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.LayoutEventHandlerExtensions.LayoutEventHandlerable.BeginInvoke(System.Windows.Forms.LayoutEventHandler,System.Object,System.Windows.Forms.LayoutEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            layouteventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.LinkClickedEventHandlerExtensions.LinkClickedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.LinkClickedEventHandler">LinkClickedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.LinkClickedEventHandlerExtensions.LinkClickedEventHandlerable.BeginInvoke(System.Windows.Forms.LinkClickedEventHandler,System.Object,System.Windows.Forms.LinkClickedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            linkclickedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.LinkConverterExtensions.LinkConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.LinkConverter">LinkConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.LinkConverterExtensions.LinkConverterable.ConvertTo``1(System.Windows.Forms.LinkConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.LinkConverterExtensions.LinkConverterable.ConvertTo``1(System.Windows.Forms.LinkConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            linkconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.LinkLabelLinkClickedEventHandlerExtensions.LinkLabelLinkClickedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.LinkLabelLinkClickedEventHandler">LinkLabelLinkClickedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.LinkLabelLinkClickedEventHandlerExtensions.LinkLabelLinkClickedEventHandlerable.BeginInvoke(System.Windows.Forms.LinkLabelLinkClickedEventHandler,System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            linklabellinkclickedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ListBindingConverterExtensions.ListBindingConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ListBindingConverter">ListBindingConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ListBindingConverterExtensions.ListBindingConverterable.ConvertTo``1(System.Windows.Forms.ListBindingConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ListBindingConverterExtensions.ListBindingConverterable.ConvertTo``1(System.Windows.Forms.ListBindingConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            listbindingconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ListControlConvertEventHandlerExtensions.ListControlConvertEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ListControlConvertEventHandler">ListControlConvertEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ListControlConvertEventHandlerExtensions.ListControlConvertEventHandlerable.BeginInvoke(System.Windows.Forms.ListControlConvertEventHandler,System.Object,System.Windows.Forms.ListControlConvertEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            listcontrolconverteventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ListViewItemConverterExtensions.ListViewItemConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ListViewItemConverter">ListViewItemConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ListViewItemConverterExtensions.ListViewItemConverterable.ConvertTo``1(System.Windows.Forms.ListViewItemConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ListViewItemConverterExtensions.ListViewItemConverterable.ConvertTo``1(System.Windows.Forms.ListViewItemConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            listviewitemconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ListViewItemMouseHoverEventHandlerExtensions.ListViewItemMouseHoverEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ListViewItemMouseHoverEventHandler">ListViewItemMouseHoverEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ListViewItemMouseHoverEventHandlerExtensions.ListViewItemMouseHoverEventHandlerable.BeginInvoke(System.Windows.Forms.ListViewItemMouseHoverEventHandler,System.Object,System.Windows.Forms.ListViewItemMouseHoverEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            listviewitemmousehovereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ListViewItemSelectionChangedEventHandlerExtensions.ListViewItemSelectionChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ListViewItemSelectionChangedEventHandler">ListViewItemSelectionChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ListViewItemSelectionChangedEventHandlerExtensions.ListViewItemSelectionChangedEventHandlerable.BeginInvoke(System.Windows.Forms.ListViewItemSelectionChangedEventHandler,System.Object,System.Windows.Forms.ListViewItemSelectionChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            listviewitemselectionchangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ListViewVirtualItemsSelectionRangeChangedEventHandlerExtensions.ListViewVirtualItemsSelectionRangeChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler">ListViewVirtualItemsSelectionRangeChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ListViewVirtualItemsSelectionRangeChangedEventHandlerExtensions.ListViewVirtualItemsSelectionRangeChangedEventHandlerable.BeginInvoke(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler,System.Object,System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            listviewvirtualitemsselectionrangechangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.MaskInputRejectedEventHandlerExtensions.MaskInputRejectedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.MaskInputRejectedEventHandler">MaskInputRejectedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MaskInputRejectedEventHandlerExtensions.MaskInputRejectedEventHandlerable.BeginInvoke(System.Windows.Forms.MaskInputRejectedEventHandler,System.Object,System.Windows.Forms.MaskInputRejectedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            maskinputrejectedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.MeasureItemEventHandlerExtensions.MeasureItemEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.MeasureItemEventHandler">MeasureItemEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MeasureItemEventHandlerExtensions.MeasureItemEventHandlerable.BeginInvoke(System.Windows.Forms.MeasureItemEventHandler,System.Object,System.Windows.Forms.MeasureItemEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            measureitemeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.MessageSurrogateFilterExtensions.MessageSurrogateFilterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Runtime.Remoting.Messaging.MessageSurrogateFilter">MessageSurrogateFilter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MessageSurrogateFilterExtensions.MessageSurrogateFilterable.BeginInvoke(System.Runtime.Remoting.Messaging.MessageSurrogateFilter,System.String,System.Object,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            messagesurrogatefilter.BeginInvoke(key, value, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.MethodInvokerExtensions.MethodInvokerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.MethodInvoker">MethodInvoker</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MethodInvokerExtensions.MethodInvokerable.BeginInvoke(System.Windows.Forms.MethodInvoker,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            methodinvoker.BeginInvoke(callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.MouseEventHandlerExtensions.MouseEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.MouseEventHandler">MouseEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MouseEventHandlerExtensions.MouseEventHandlerable.BeginInvoke(System.Windows.Forms.MouseEventHandler,System.Object,System.Windows.Forms.MouseEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            mouseeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.NavigateEventHandlerExtensions.NavigateEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.NavigateEventHandler">NavigateEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NavigateEventHandlerExtensions.NavigateEventHandlerable.BeginInvoke(System.Windows.Forms.NavigateEventHandler,System.Object,System.Windows.Forms.NavigateEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            navigateeventhandler.BeginInvoke(sender, ne, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.NodeLabelEditEventHandlerExtensions.NodeLabelEditEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.NodeLabelEditEventHandler">NodeLabelEditEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NodeLabelEditEventHandlerExtensions.NodeLabelEditEventHandlerable.BeginInvoke(System.Windows.Forms.NodeLabelEditEventHandler,System.Object,System.Windows.Forms.NodeLabelEditEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            nodelabelediteventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ObjectCreationDelegateExtensions.ObjectCreationDelegateable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Runtime.InteropServices.ObjectCreationDelegate">ObjectCreationDelegate</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ObjectCreationDelegateExtensions.ObjectCreationDelegateable.BeginInvoke(System.Runtime.InteropServices.ObjectCreationDelegate,System.IntPtr,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            objectcreationdelegate.BeginInvoke(aggregator, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.OdbcInfoMessageEventHandlerExtensions.OdbcInfoMessageEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.Odbc.OdbcInfoMessageEventHandler">OdbcInfoMessageEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.OdbcInfoMessageEventHandlerExtensions.OdbcInfoMessageEventHandlerable.BeginInvoke(System.Data.Odbc.OdbcInfoMessageEventHandler,System.Object,System.Data.Odbc.OdbcInfoMessageEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            odbcinfomessageeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.OdbcRowUpdatedEventHandlerExtensions.OdbcRowUpdatedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.Odbc.OdbcRowUpdatedEventHandler">OdbcRowUpdatedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.OdbcRowUpdatedEventHandlerExtensions.OdbcRowUpdatedEventHandlerable.BeginInvoke(System.Data.Odbc.OdbcRowUpdatedEventHandler,System.Object,System.Data.Odbc.OdbcRowUpdatedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            odbcrowupdatedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.OdbcRowUpdatingEventHandlerExtensions.OdbcRowUpdatingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.Odbc.OdbcRowUpdatingEventHandler">OdbcRowUpdatingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.OdbcRowUpdatingEventHandlerExtensions.OdbcRowUpdatingEventHandlerable.BeginInvoke(System.Data.Odbc.OdbcRowUpdatingEventHandler,System.Object,System.Data.Odbc.OdbcRowUpdatingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            odbcrowupdatingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.OleDbInfoMessageEventHandlerExtensions.OleDbInfoMessageEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.OleDb.OleDbInfoMessageEventHandler">OleDbInfoMessageEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.OleDbInfoMessageEventHandlerExtensions.OleDbInfoMessageEventHandlerable.BeginInvoke(System.Data.OleDb.OleDbInfoMessageEventHandler,System.Object,System.Data.OleDb.OleDbInfoMessageEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            oledbinfomessageeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.OleDbRowUpdatedEventHandlerExtensions.OleDbRowUpdatedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.OleDb.OleDbRowUpdatedEventHandler">OleDbRowUpdatedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.OleDbRowUpdatedEventHandlerExtensions.OleDbRowUpdatedEventHandlerable.BeginInvoke(System.Data.OleDb.OleDbRowUpdatedEventHandler,System.Object,System.Data.OleDb.OleDbRowUpdatedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            oledbrowupdatedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.OleDbRowUpdatingEventHandlerExtensions.OleDbRowUpdatingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.OleDb.OleDbRowUpdatingEventHandler">OleDbRowUpdatingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.OleDbRowUpdatingEventHandlerExtensions.OleDbRowUpdatingEventHandlerable.BeginInvoke(System.Data.OleDb.OleDbRowUpdatingEventHandler,System.Object,System.Data.OleDb.OleDbRowUpdatingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            oledbrowupdatingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.OnChangeEventHandlerExtensions.OnChangeEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.SqlClient.OnChangeEventHandler">OnChangeEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.OnChangeEventHandlerExtensions.OnChangeEventHandlerable.BeginInvoke(System.Data.SqlClient.OnChangeEventHandler,System.Object,System.Data.SqlClient.SqlNotificationEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            onchangeeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.OpacityConverterExtensions.OpacityConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.OpacityConverter">OpacityConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.OpacityConverterExtensions.OpacityConverterable.ConvertTo``1(System.Windows.Forms.OpacityConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.OpacityConverterExtensions.OpacityConverterable.ConvertTo``1(System.Windows.Forms.OpacityConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            opacityconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PaddingConverterExtensions.PaddingConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.PaddingConverter">PaddingConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PaddingConverterExtensions.PaddingConverterable.ConvertTo``1(System.Windows.Forms.PaddingConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PaddingConverterExtensions.PaddingConverterable.ConvertTo``1(System.Windows.Forms.PaddingConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            paddingconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PaintEventHandlerExtensions.PaintEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.PaintEventHandler">PaintEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PaintEventHandlerExtensions.PaintEventHandlerable.BeginInvoke(System.Windows.Forms.PaintEventHandler,System.Object,System.Windows.Forms.PaintEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            painteventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PlayRecordCallbackExtensions.PlayRecordCallbackable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.Imaging.PlayRecordCallback">PlayRecordCallback</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PlayRecordCallbackExtensions.PlayRecordCallbackable.BeginInvoke(System.Drawing.Imaging.PlayRecordCallback,System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.IntPtr,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            playrecordcallback.BeginInvoke(recordType, flags, dataSize, recordData, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PopupEventHandlerExtensions.PopupEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.PopupEventHandler">PopupEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PopupEventHandlerExtensions.PopupEventHandlerable.BeginInvoke(System.Windows.Forms.PopupEventHandler,System.Object,System.Windows.Forms.PopupEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            popupeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PowerModeChangedEventHandlerExtensions.PowerModeChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:Microsoft.Win32.PowerModeChangedEventHandler">PowerModeChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PowerModeChangedEventHandlerExtensions.PowerModeChangedEventHandlerable.BeginInvoke(Microsoft.Win32.PowerModeChangedEventHandler,System.Object,Microsoft.Win32.PowerModeChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            powermodechangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PreviewKeyDownEventHandlerExtensions.PreviewKeyDownEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.PreviewKeyDownEventHandler">PreviewKeyDownEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PreviewKeyDownEventHandlerExtensions.PreviewKeyDownEventHandlerable.BeginInvoke(System.Windows.Forms.PreviewKeyDownEventHandler,System.Object,System.Windows.Forms.PreviewKeyDownEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            previewkeydowneventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PrintPageEventHandlerExtensions.PrintPageEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.Printing.PrintPageEventHandler">PrintPageEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PrintPageEventHandlerExtensions.PrintPageEventHandlerable.BeginInvoke(System.Drawing.Printing.PrintPageEventHandler,System.Object,System.Drawing.Printing.PrintPageEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            printpageeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PropertyTabChangedEventHandlerExtensions.PropertyTabChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.PropertyTabChangedEventHandler">PropertyTabChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PropertyTabChangedEventHandlerExtensions.PropertyTabChangedEventHandlerable.BeginInvoke(System.Windows.Forms.PropertyTabChangedEventHandler,System.Object,System.Windows.Forms.PropertyTabChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            propertytabchangedeventhandler.BeginInvoke(s, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PropertyValueChangedEventHandlerExtensions.PropertyValueChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.PropertyValueChangedEventHandler">PropertyValueChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PropertyValueChangedEventHandlerExtensions.PropertyValueChangedEventHandlerable.BeginInvoke(System.Windows.Forms.PropertyValueChangedEventHandler,System.Object,System.Windows.Forms.PropertyValueChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            propertyvaluechangedeventhandler.BeginInvoke(s, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PropertyValueUIHandlerExtensions.PropertyValueUIHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.Design.PropertyValueUIHandler">PropertyValueUIHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PropertyValueUIHandlerExtensions.PropertyValueUIHandlerable.BeginInvoke(System.Drawing.Design.PropertyValueUIHandler,System.ComponentModel.ITypeDescriptorContext,System.ComponentModel.PropertyDescriptor,System.Collections.ArrayList,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            propertyvalueuihandler.BeginInvoke(context, propDesc, valueUIItemList, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PropertyValueUIItemInvokeHandlerExtensions.PropertyValueUIItemInvokeHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.Design.PropertyValueUIItemInvokeHandler">PropertyValueUIItemInvokeHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PropertyValueUIItemInvokeHandlerExtensions.PropertyValueUIItemInvokeHandlerable.BeginInvoke(System.Drawing.Design.PropertyValueUIItemInvokeHandler,System.ComponentModel.ITypeDescriptorContext,System.ComponentModel.PropertyDescriptor,System.Drawing.Design.PropertyValueUIItem,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            propertyvalueuiiteminvokehandler.BeginInvoke(context, descriptor, invokedItem, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.QueryAccessibilityHelpEventHandlerExtensions.QueryAccessibilityHelpEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.QueryAccessibilityHelpEventHandler">QueryAccessibilityHelpEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.QueryAccessibilityHelpEventHandlerExtensions.QueryAccessibilityHelpEventHandlerable.BeginInvoke(System.Windows.Forms.QueryAccessibilityHelpEventHandler,System.Object,System.Windows.Forms.QueryAccessibilityHelpEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            queryaccessibilityhelpeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.QueryContinueDragEventHandlerExtensions.QueryContinueDragEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.QueryContinueDragEventHandler">QueryContinueDragEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.QueryContinueDragEventHandlerExtensions.QueryContinueDragEventHandlerable.BeginInvoke(System.Windows.Forms.QueryContinueDragEventHandler,System.Object,System.Windows.Forms.QueryContinueDragEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            querycontinuedrageventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.QueryPageSettingsEventHandlerExtensions.QueryPageSettingsEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.Printing.QueryPageSettingsEventHandler">QueryPageSettingsEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.QueryPageSettingsEventHandlerExtensions.QueryPageSettingsEventHandlerable.BeginInvoke(System.Drawing.Printing.QueryPageSettingsEventHandler,System.Object,System.Drawing.Printing.QueryPageSettingsEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            querypagesettingseventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.QuestionEventHandlerExtensions.QuestionEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.QuestionEventHandler">QuestionEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.QuestionEventHandlerExtensions.QuestionEventHandlerable.BeginInvoke(System.Windows.Forms.QuestionEventHandler,System.Object,System.Windows.Forms.QuestionEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            questioneventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.RectangleConverterExtensions.RectangleConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.RectangleConverter">RectangleConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.RectangleConverterExtensions.RectangleConverterable.ConvertTo``1(System.Drawing.RectangleConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.RectangleConverterExtensions.RectangleConverterable.ConvertTo``1(System.Drawing.RectangleConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            rectangleconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ReflectionExtensions.CustomAttributeProviderExtensions">
            <summary>
            Extensions to <seealso cref="T:System.Reflection.ICustomAttributeProvider"/>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.CustomAttributeProviderExtensions.ContainsAttribute(System.Reflection.ICustomAttributeProvider,System.String)">
            <summary>
            Tests if <paramref name="t"/> has any custom attributes defined with the type name <paramref name="attr"/>
            </summary>
            <param name="t">The provider to check for types with given attribute type names.</param>
            <param name="attr">Name of the attribute to check fo</param>
            <returns>true - <paramref name="t"/> has the attribute defined.
            false - <paramref name="t"/> does not have the attribute defined.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.ILGeneratorable.EmitBackingFieldGetter(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Emit code that will get the value from <paramref name="field"/>
            </summary>
            <param name="generator">Generator that will emit the instructions</param>
            <param name="field">Field to read</param>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.ILGeneratorable.EmitBackingFieldSetter(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Emit code that will set the value <paramref name="field"/> based argument on stack
            </summary>
            <param name="generator">Generator that will emit the instructions</param>
            <param name="field">Field to write</param>
        </member>
        <member name="T:PRI.ProductivityExtensions.ReflectionExtensions.ModuleBuilderable">
            <summary>
            class that contains extension methods that extend <seealso cref="T:System.Reflection.Emit.ModuleBuilder"/>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.ModuleBuilderable.DefineClass(System.Reflection.Emit.ModuleBuilder,System.String)">
            <summary>
            Adds a public class to the module encapsulated by the <paramref name="moduleBuilder"/> of name <paramref name="name"/>
            </summary>
            <param name="moduleBuilder"><seealso cref="T:System.Reflection.Emit.ModuleBuilder"/> to add class to</param>
            <param name="name">Name of the class</param>
            <returns>TypeBuilder object that encapsulates the new class.</returns>
        </member>
        <member name="T:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable">
            <summary>
            class hat contains extension methods that extend reflection-related classes 
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttribute``1(System.Reflection.Assembly)">
            <summary>
            Makes Attribute.GetCustomAttribute() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = assembly.GetCustomAttribute&lt;AssemblyCopyrightAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Makes Attribute.GetCustomAttribute() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = memberInfo.GetCustomAttribute&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttribute``1(System.Reflection.ParameterInfo)">
            <summary>
            Makes Attribute.GetCustomAttribute() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = parameterInfo.GetCustomAttribute&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttribute``1(System.Reflection.Module)">
            <summary>
            Makes Attribute.GetCustomAttribute() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = module.GetCustomAttribute&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"> </param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttribute``1(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Makes Attribute.GetCustomAttribute() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = assembly.GetCustomAttribute&lt;AssemblyCopyrightAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <param name="inherit">If true, specifies to also search the ancestors of <paramref name="source" /> for custom attributes. </param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Makes Attribute.GetCustomAttribute() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = memberInfo.GetCustomAttribute&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <param name="inherit">If true, specifies to also search the ancestors of <paramref name="source" /> for custom attributes. </param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttribute``1(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            Makes Attribute.GetCustomAttribute() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = parameterInfo.GetCustomAttribute&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <param name="inherit">If true, specifies to also search the ancestors of <paramref name="source" /> for custom attributes. </param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttribute``1(System.Reflection.Module,System.Boolean)">
            <summary>
            Makes Attribute.GetCustomAttribute() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = module.GetCustomAttribute&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"> </param>
            <param name="inherit">If true, specifies to also search the ancestors of <paramref name="source" /> for custom attributes. </param>
            <returns>A reference to the single custom attribute of type <typeparamref name="T"/> that is applied to <paramref name="source" />, or null if there is no such attribute.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttributes``1(System.Reflection.Assembly)">
            <summary>
            Makes Attribute.GetCustomAttributes() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = assembly.GetCustomAttributes&lt;AssemblyCopyrightAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Makes Attribute.GetCustomAttributes() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = memberInfo.GetCustomAttributes&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttributes``1(System.Reflection.ParameterInfo)">
            <summary>
            Makes Attribute.GetCustomAttributes() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = parameterInfo.GetCustomAttributes&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttributes``1(System.Reflection.Module)">
            <summary>
            Makes Attribute.GetCustomAttributes() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = module.GetCustomAttributes&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"> </param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttributes``1(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Makes Attribute.GetCustomAttributes() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = assembly.GetCustomAttributes&lt;AssemblyCopyrightAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <param name="inherit">If true, specifies to also search the ancestors of <paramref name="source" /> for custom attributes. </param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Makes Attribute.GetCustomAttributes() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = memberInfo.GetCustomAttributes&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <param name="inherit">If true, specifies to also search the ancestors of <paramref name="source" /> for custom attributes. </param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttributes``1(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            Makes Attribute.GetCustomAttributes() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = parameterInfo.GetCustomAttributes&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <param name="inherit">If true, specifies to also search the ancestors of <paramref name="source" /> for custom attributes. </param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttributes``1(System.Reflection.Module,System.Boolean)">
            <summary>
            Makes Attribute.GetCustomAttributes() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = module.GetCustomAttributes&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"> </param>
            <param name="inherit">If true, specifies to also search the ancestors of <paramref name="source" /> for custom attributes. </param>
            <returns>A reference to the single custom attribute of type <typeparamref name="T"/> that is applied to <paramref name="source" />, or null if there is no such attribute.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetMethodInstructions(System.Reflection.MethodInfo,System.Reflection.Module,System.Byte[])">
            <summary>
            Gets a collection of <seealso cref="T:PRI.ProductivityExtensions.ReflectionExtensions.IlInstruction"/> representing the instructions in the body of a method
            </summary>
            <param name="methodInfo"></param>
            <param name="module"></param>
            <param name="il"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.ReferencesMethod``1(System.Type,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Tests wheter <paramref name="sourceType"/> references a method
            <example>TODO: Example for AssemblyExtensions.ReferencesMethod</example>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceType"></param>
            <param name="func"></param>
            <returns><code>true</code>if method contained in expression <paramref name="func"/> references any constructors in this <see cref="T:System.Type"/></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.ReferencesConstructor(System.Type,System.Type)">
            <summary>
            Tests wheter <paramref name="sourceType"/> references a constructor in <paramref name="type"/>
            <example>TODO: Example for AssemblyExtensions.ReferencesConstructor</example>
            </summary>
            <param name="sourceType"></param>
            <param name="type"> </param>
            <returns><code>true</code>if <paramref name="type"/> references any constructors in this <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.ReferencesConstructor``1(System.Type)">
            <summary>
            Tests wheter <paramref name="sourceType"/> references a constructor in <typeparamref name="T"/>
            <example>TODO: Example for AssemblyExtensions.ReferencesConstructor</example>
            </summary>
            <param name="sourceType"></param>
            <returns><code>true</code>if <typeparamref name="T"/> references any constructors in this <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.ReferencesConstructor(System.Reflection.Assembly,System.Type)">
            <summary>
            Tests where any types in the assembly references the constructor of <paramref name="type"/>
            </summary>
            <param name="assembly"></param>
            <param name="type"></param>
            <returns><code>true</code>if <paramref name="type"/> references any constructors in this <see cref="T:System.Reflection.Assembly"/></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.ReferencesConstructor``1(System.Reflection.Assembly)">
            <summary>
            Tests where any types in the assembly references the constructor of <typeparamref name="T"/>
            </summary>
            <param name="assembly"></param>
            <returns><code>true</code>if <typeparamref name="T"/> references any constructors in this <see cref="T:System.Reflection.Assembly"/></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetPrivateFieldValue``1(System.Object,System.String)">
            <summary>
            Gets a private field value
            </summary>
            <typeparam name="T">The type of the property</typeparam>
            <param name="obj">the object that will be operated upon.</param>
            <param name="fieldName">Name of the field whose value to retrieve.</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetPrivatePropertyValue``1(System.Object,System.String)">
            <summary>
            Gets a private property value
            </summary>
            <typeparam name="T">The type of the field</typeparam>
            <param name="obj">the object that will be operated upon.</param>
            <param name="propertyName">Name of the field whose value to retrieve.</param>
            <returns>The value of the field</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.SetPrivateFieldValue``1(System.Object,System.String,``0)">
            <summary>
            Gets a private field value
            </summary>
            <typeparam name="T">The type of the property</typeparam>
            <param name="obj">the object that will be operated upon.</param>
            <param name="fieldName">Name of the field whose value to retrieve.</param>
            <returns>The value of the property</returns>
            <param name="value">The value used to set the field</param>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.SetPrivatePropertyValue``1(System.Object,System.String,``0)">
            <summary>
            Sets a private property value
            </summary>
            <typeparam name="T">The type of the field</typeparam>
            <param name="obj">the object that will be operated upon.</param>
            <param name="propertyName">Name of the field whose value to retrieve.</param>
            <param name="value">The value used to set the property</param>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.FindAttributedTypes(System.Type)">
            <summary>
            Find all types in the current AppDomain that have been attributed with <paramref name="attributeType"/>
            </summary>
            <param name="attributeType">Attribute for which types must implement to match</param>
            <returns>Collection of types that match.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.FindAttributedTypes``1(``0)">
            <summary>
            Find all types in the current AppDomain that have been attributed with <paramref name="attribute"/>
            </summary>
            <param name="attribute">Attribute for which types must implement to match</param>
            <returns>Collection of types that match.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.FindAttributedTypes``1(``0,System.String,System.String)">
            <summary>
            Find all types in <paramref name="directory"/> whose names patch <paramref name="wildcard"/> that have been attributed with <typeparamref name="TAttribute"/>
            </summary>
            <param name="attribute">Attribute for which types must implement to match</param>
            <param name="directory">Directory to search for assemblies</param>
            <param name="wildcard">Wildcard to use to include assembly file names</param>
            <returns>Collection of types that match.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.FindAttributedTypes(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Find all types in <paramref name="assemblies"/> that have been attributed with <paramref name="attributeType"/>
            </summary>
            <param name="attributeType">Attribute for which types must implement to match</param>
            <param name="assemblies">Assemblies to search</param>
            <returns>Collection of types that match.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.FindAttributedTypes(System.Type,System.String,System.String)">
            <summary>
            Find all types in <paramref name="directory"/> whose names patch <paramref name="wildcard"/> that have been attributed with <paramref name="attributeType"/>
            </summary>
            <param name="attributeType">Attribute for which types must implement to match</param>
            <param name="directory">Directory to search for assemblies</param>
            <param name="wildcard">Wildcard to use to include assembly file names</param>
            <returns>Collection of types that match.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.FindAttributedTypes``1(``0,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Find all types in <paramref name="assemblies"/> that have been attributed with <paramref name="attribute"/>
            </summary>
            <param name="attribute">Attribute for which types must implement to match</param>
            <param name="assemblies">Assemblies to search</param>
            <returns>Collection of types that match.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Typeable.ByImplementedInterface(System.Type)">
            <summary>
            Get a collection of types that implement interface <param name="interfaceType" />
            </summary>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Typeable.ByImplementedInterface(System.Type,System.String)">
            <summary>
            Get a collection of types that implement interface <param name="interfaceType" /> within namespace named <paramref name="namespaceName"/>
            </summary>
            <param name="interfaceType"></param>
            <param name="namespaceName"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Typeable.ByImplementedInterfaceInDirectory(System.Type,System.String,System.String)">
            <summary>
            get a collection of types that implement <paramref name="interfaceType"/> for assemblies filenames matching <paramref name="wildcard"/> in directory <paramref name="directory"/>
            </summary>
            <param name="interfaceType"></param>
            <param name="directory"></param>
            <param name="wildcard"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Typeable.ByImplementedInterfaceInDirectory(System.Type,System.String,System.String,System.String)">
            <summary>
            get a collection of types that implement <paramref name="interfaceType"/> for assemblies filenames matching <paramref name="wildcard"/> in directory <paramref name="directory"/> within namespace named <paramref name="namespaceName"/>
            </summary>
            <param name="interfaceType"></param>
            <param name="directory"></param>
            <param name="wildcard"></param>
            <param name="namespaceName"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.TypeBuilderable.DefinePublicField``1(System.Reflection.Emit.TypeBuilder,System.String)">
            <summary>
            Add public field to <paramref name="typeBuilder"/> of name <paramref name="fieldName"/>
            </summary>
            <typeparam name="T">Type of the field</typeparam>
            <param name="typeBuilder"><seealso cref="T:System.Reflection.Emit.TypeBuilder"/> that will have the new field</param>
            <param name="fieldName">Name of the field</param>
            <returns>The new FieldBuilder object that encapsulates the field</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.TypeBuilderable.DefinePublicField(System.Reflection.Emit.TypeBuilder,System.String,System.Type)">
            <summary>
            Add public field to <paramref name="typeBuilder"/> of name <paramref name="fieldName"/>
            </summary>
            <param name="typeBuilder"><seealso cref="T:System.Reflection.Emit.TypeBuilder"/> that will have the new field</param>
            <param name="fieldName">Name of the field</param>
            <param name="type">Type of the field</param>
            <returns>The new FieldBuilder object that encapsulates the field</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.TypeBuilderable.DefinePrivateField``1(System.Reflection.Emit.TypeBuilder,System.String)">
            <summary>
            Add private field to <paramref name="typeBuilder"/> of name <paramref name="fieldName"/>
            </summary>
            <typeparam name="T">Type of the field</typeparam>
            <param name="typeBuilder"><seealso cref="T:System.Reflection.Emit.TypeBuilder"/> that will have the new field</param>
            <param name="fieldName">Name of the field</param>
            <returns>The new FieldBuilder object that encapsulates the field</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.TypeBuilderable.DefinePrivateField(System.Reflection.Emit.TypeBuilder,System.String,System.Type)">
            <summary>
            Add private field to <paramref name="typeBuilder"/> of name <paramref name="fieldName"/>
            </summary>
            <param name="typeBuilder"><seealso cref="T:System.Reflection.Emit.TypeBuilder"/> that will have the new field</param>
            <param name="fieldName">Name of the field</param>
            <param name="type">Type of the field</param>
            <returns>The new FieldBuilder object that encapsulates the field</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.TypeBuilderable.DefineProperty``1(System.Reflection.Emit.TypeBuilder,System.String,System.Reflection.PropertyAttributes)">
            <summary>
            Adds a public property to <paramref name="typeBuilder"/> of name <paramref name="propertyName"/>
            </summary>
            <typeparam name="T">Type of the property</typeparam>
            <param name="typeBuilder"><seealso cref="T:System.Reflection.Emit.TypeBuilder"/> that will have the new property</param>
            <param name="propertyName">Name of the property</param>
            <param name="propertyAttributes"><seealso cref="T:System.Reflection.PropertyAttributes"/></param>
            <returns>The new PropertyBuilder object that encapsulates the property</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.TypeBuilderable.DefineProperty(System.Reflection.Emit.TypeBuilder,System.String,System.Type,System.Reflection.PropertyAttributes)">
            <summary>
            Adds a public property to <paramref name="typeBuilder"/> of name <paramref name="propertyName"/>
            </summary>
            <param name="typeBuilder"><seealso cref="T:System.Reflection.Emit.TypeBuilder"/> that will have the new property</param>
            <param name="propertyName">Name of the property</param>
            <param name="type">Type of the property</param>
            <param name="propertyAttributes"><seealso cref="T:System.Reflection.PropertyAttributes"/></param>
            <returns>The new PropertyBuilder object that encapsulates the property</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.TypeBuilderable.DefinePropertyGetter(System.Reflection.Emit.TypeBuilder,System.Reflection.PropertyInfo)">
            <summary>
            Adds a property getter method to <paramref name="typeBuilder"/> based on name of <paramref name="propertyInfo"/>
            </summary>
            <param name="typeBuilder"><seealso cref="T:System.Reflection.Emit.TypeBuilder"/> that will have the new property.</param>
            <param name="propertyInfo"><seealso cref="T:System.Reflection.PropertyInfo"/> to base name and the method.</param>
            <returns>the new <seealso cref="T:System.Reflection.Emit.MethodBuilder"/> object that encapsulates the method</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.TypeBuilderable.DefinePropertySetter(System.Reflection.Emit.TypeBuilder,System.Reflection.PropertyInfo)">
            <summary>
            Adds a property setter method to <paramref name="typeBuilder"/> based on name of <paramref name="propertyInfo"/>
            </summary>
            <param name="typeBuilder"><seealso cref="T:System.Reflection.Emit.TypeBuilder"/> that will have the new property.</param>
            <param name="propertyInfo"><seealso cref="T:System.Reflection.PropertyInfo"/> to base name and the method.</param>
            <returns>the new <seealso cref="T:System.Reflection.Emit.MethodBuilder"/> object that encapsulates the method</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.TypeBuilderable.DefinePrivatePropertyGetter(System.Reflection.Emit.TypeBuilder,System.Reflection.PropertyInfo)">
            <summary>
            Adds a private property getter method to <paramref name="typeBuilder"/> based on name of <paramref name="propertyInfo"/>
            </summary>
            <param name="typeBuilder"><seealso cref="T:System.Reflection.Emit.TypeBuilder"/> that will have the new property.</param>
            <param name="propertyInfo"><seealso cref="T:System.Reflection.PropertyInfo"/> to base name and the method.</param>
            <returns>the new <seealso cref="T:System.Reflection.Emit.MethodBuilder"/> object that encapsulates the method</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.TypeBuilderable.DefinePrivatePropertySetter(System.Reflection.Emit.TypeBuilder,System.Reflection.PropertyInfo)">
            <summary>
            Adds a private property setter method to <paramref name="typeBuilder"/> based on name of <paramref name="propertyInfo"/>
            </summary>
            <param name="typeBuilder"><seealso cref="T:System.Reflection.Emit.TypeBuilder"/> that will have the new property.</param>
            <param name="propertyInfo"><seealso cref="T:System.Reflection.PropertyInfo"/> to base name and the method.</param>
            <returns>the new <seealso cref="T:System.Reflection.Emit.MethodBuilder"/> object that encapsulates the method</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.Reflection.Expressionable.ToPropertyDescriptor(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Converts the body of the lambda expression into the <see cref="T:System.Reflection.PropertyInfo" /> referenced by it.
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.RetrieveVirtualItemEventHandlerExtensions.RetrieveVirtualItemEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.RetrieveVirtualItemEventHandler">RetrieveVirtualItemEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.RetrieveVirtualItemEventHandlerExtensions.RetrieveVirtualItemEventHandlerable.BeginInvoke(System.Windows.Forms.RetrieveVirtualItemEventHandler,System.Object,System.Windows.Forms.RetrieveVirtualItemEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            retrievevirtualitemeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.RijndaelManagedTransformExtensions.RijndaelManagedTransformable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Security.Cryptography.RijndaelManagedTransform">RijndaelManagedTransform</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.RijndaelManagedTransformExtensions.RijndaelManagedTransformable.TransformBlock(System.Security.Cryptography.RijndaelManagedTransform,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Extends TransformBlock so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            rijndaelmanagedtransform.TransformBlock(inputBuffer, outputBuffer, outputOffset);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.RijndaelManagedTransformExtensions.RijndaelManagedTransformable.TransformFinalBlock(System.Security.Cryptography.RijndaelManagedTransform,System.Byte[])">
            <summary>
            Extends TransformFinalBlock so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            rijndaelmanagedtransform.TransformFinalBlock(inputBuffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ScrollEventHandlerExtensions.ScrollEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ScrollEventHandler">ScrollEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ScrollEventHandlerExtensions.ScrollEventHandlerable.BeginInvoke(System.Windows.Forms.ScrollEventHandler,System.Object,System.Windows.Forms.ScrollEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            scrolleventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SearchForVirtualItemEventHandlerExtensions.SearchForVirtualItemEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.SearchForVirtualItemEventHandler">SearchForVirtualItemEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SearchForVirtualItemEventHandlerExtensions.SearchForVirtualItemEventHandlerable.BeginInvoke(System.Windows.Forms.SearchForVirtualItemEventHandler,System.Object,System.Windows.Forms.SearchForVirtualItemEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            searchforvirtualitemeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SelectedGridItemChangedEventHandlerExtensions.SelectedGridItemChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.SelectedGridItemChangedEventHandler">SelectedGridItemChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SelectedGridItemChangedEventHandlerExtensions.SelectedGridItemChangedEventHandlerable.BeginInvoke(System.Windows.Forms.SelectedGridItemChangedEventHandler,System.Object,System.Windows.Forms.SelectedGridItemChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            selectedgriditemchangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SelectionRangeConverterExtensions.SelectionRangeConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.SelectionRangeConverter">SelectionRangeConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SelectionRangeConverterExtensions.SelectionRangeConverterable.ConvertTo``1(System.Windows.Forms.SelectionRangeConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SelectionRangeConverterExtensions.SelectionRangeConverterable.ConvertTo``1(System.Windows.Forms.SelectionRangeConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            selectionrangeconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SerialDataReceivedEventHandlerExtensions.SerialDataReceivedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.Ports.SerialDataReceivedEventHandler">SerialDataReceivedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SerialDataReceivedEventHandlerExtensions.SerialDataReceivedEventHandlerable.BeginInvoke(System.IO.Ports.SerialDataReceivedEventHandler,System.Object,System.IO.Ports.SerialDataReceivedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            serialdatareceivedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SerialErrorReceivedEventHandlerExtensions.SerialErrorReceivedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.Ports.SerialErrorReceivedEventHandler">SerialErrorReceivedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SerialErrorReceivedEventHandlerExtensions.SerialErrorReceivedEventHandlerable.BeginInvoke(System.IO.Ports.SerialErrorReceivedEventHandler,System.Object,System.IO.Ports.SerialErrorReceivedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            serialerrorreceivedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SerialPinChangedEventHandlerExtensions.SerialPinChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.Ports.SerialPinChangedEventHandler">SerialPinChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SerialPinChangedEventHandlerExtensions.SerialPinChangedEventHandlerable.BeginInvoke(System.IO.Ports.SerialPinChangedEventHandler,System.Object,System.IO.Ports.SerialPinChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            serialpinchangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SerialPortExtensions.SerialPortable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.Ports.SerialPort">SerialPort</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SerialPortExtensions.SerialPortable.Read(System.IO.Ports.SerialPort,System.Byte[])">
            <summary>
            Extends Read so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            serialport.Read(buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SerialPortExtensions.SerialPortable.Read(System.IO.Ports.SerialPort,System.Char[])">
            <summary>
            Extends Read so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            serialport.Read(buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SerialPortExtensions.SerialPortable.Write(System.IO.Ports.SerialPort,System.Char[])">
            <summary>
            Extends Write so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            serialport.Write(buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SerialPortExtensions.SerialPortable.Write(System.IO.Ports.SerialPort,System.Byte[])">
            <summary>
            Extends Write so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            serialport.Write(buffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SessionEndedEventHandlerExtensions.SessionEndedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:Microsoft.Win32.SessionEndedEventHandler">SessionEndedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SessionEndedEventHandlerExtensions.SessionEndedEventHandlerable.BeginInvoke(Microsoft.Win32.SessionEndedEventHandler,System.Object,Microsoft.Win32.SessionEndedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            sessionendedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SessionEndingEventHandlerExtensions.SessionEndingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:Microsoft.Win32.SessionEndingEventHandler">SessionEndingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SessionEndingEventHandlerExtensions.SessionEndingEventHandlerable.BeginInvoke(Microsoft.Win32.SessionEndingEventHandler,System.Object,Microsoft.Win32.SessionEndingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            sessionendingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SessionSwitchEventHandlerExtensions.SessionSwitchEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:Microsoft.Win32.SessionSwitchEventHandler">SessionSwitchEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SessionSwitchEventHandlerExtensions.SessionSwitchEventHandlerable.BeginInvoke(Microsoft.Win32.SessionSwitchEventHandler,System.Object,Microsoft.Win32.SessionSwitchEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            sessionswitcheventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SettingChangingEventHandlerExtensions.SettingChangingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Configuration.SettingChangingEventHandler">SettingChangingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SettingChangingEventHandlerExtensions.SettingChangingEventHandlerable.BeginInvoke(System.Configuration.SettingChangingEventHandler,System.Object,System.Configuration.SettingChangingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            settingchangingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SettingsLoadedEventHandlerExtensions.SettingsLoadedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Configuration.SettingsLoadedEventHandler">SettingsLoadedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SettingsLoadedEventHandlerExtensions.SettingsLoadedEventHandlerable.BeginInvoke(System.Configuration.SettingsLoadedEventHandler,System.Object,System.Configuration.SettingsLoadedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            settingsloadedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SettingsSavingEventHandlerExtensions.SettingsSavingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Configuration.SettingsSavingEventHandler">SettingsSavingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SettingsSavingEventHandlerExtensions.SettingsSavingEventHandlerable.BeginInvoke(System.Configuration.SettingsSavingEventHandler,System.Object,System.ComponentModel.CancelEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            settingssavingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SizeConverterExtensions.SizeConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.SizeConverter">SizeConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SizeConverterExtensions.SizeConverterable.ConvertTo``1(System.Drawing.SizeConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SizeConverterExtensions.SizeConverterable.ConvertTo``1(System.Drawing.SizeConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            sizeconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SizeFConverterExtensions.SizeFConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.SizeFConverter">SizeFConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SizeFConverterExtensions.SizeFConverterable.ConvertTo``1(System.Drawing.SizeFConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SizeFConverterExtensions.SizeFConverterable.ConvertTo``1(System.Drawing.SizeFConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            sizefconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SplitterCancelEventHandlerExtensions.SplitterCancelEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.SplitterCancelEventHandler">SplitterCancelEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SplitterCancelEventHandlerExtensions.SplitterCancelEventHandlerable.BeginInvoke(System.Windows.Forms.SplitterCancelEventHandler,System.Object,System.Windows.Forms.SplitterCancelEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            splittercanceleventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SplitterEventHandlerExtensions.SplitterEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.SplitterEventHandler">SplitterEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SplitterEventHandlerExtensions.SplitterEventHandlerable.BeginInvoke(System.Windows.Forms.SplitterEventHandler,System.Object,System.Windows.Forms.SplitterEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            splittereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SqlFileStreamExtensions.SqlFileStreamable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.SqlTypes.SqlFileStream">SqlFileStream</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlFileStreamExtensions.SqlFileStreamable.BeginRead(System.Data.SqlTypes.SqlFileStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginRead so that when a state object is not needed, null does not need to be passed.
            <example>
            sqlfilestream.BeginRead(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlFileStreamExtensions.SqlFileStreamable.BeginRead(System.Data.SqlTypes.SqlFileStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            sqlfilestream.BeginRead(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlFileStreamExtensions.SqlFileStreamable.BeginWrite(System.Data.SqlTypes.SqlFileStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
            <example>
            sqlfilestream.BeginWrite(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlFileStreamExtensions.SqlFileStreamable.BeginWrite(System.Data.SqlTypes.SqlFileStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            sqlfilestream.BeginWrite(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SqlRowUpdatedEventHandlerExtensions.SqlRowUpdatedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.SqlClient.SqlRowUpdatedEventHandler">SqlRowUpdatedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlRowUpdatedEventHandlerExtensions.SqlRowUpdatedEventHandlerable.BeginInvoke(System.Data.SqlClient.SqlRowUpdatedEventHandler,System.Object,System.Data.SqlClient.SqlRowUpdatedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            sqlrowupdatedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SqlRowUpdatingEventHandlerExtensions.SqlRowUpdatingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.SqlClient.SqlRowUpdatingEventHandler">SqlRowUpdatingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlRowUpdatingEventHandlerExtensions.SqlRowUpdatingEventHandlerable.BeginInvoke(System.Data.SqlClient.SqlRowUpdatingEventHandler,System.Object,System.Data.SqlClient.SqlRowUpdatingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            sqlrowupdatingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.StatusBarDrawItemEventHandlerExtensions.StatusBarDrawItemEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.StatusBarDrawItemEventHandler">StatusBarDrawItemEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StatusBarDrawItemEventHandlerExtensions.StatusBarDrawItemEventHandlerable.BeginInvoke(System.Windows.Forms.StatusBarDrawItemEventHandler,System.Object,System.Windows.Forms.StatusBarDrawItemEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            statusbardrawitemeventhandler.BeginInvoke(sender, sbdevent, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.StatusBarPanelClickEventHandlerExtensions.StatusBarPanelClickEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.StatusBarPanelClickEventHandler">StatusBarPanelClickEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StatusBarPanelClickEventHandlerExtensions.StatusBarPanelClickEventHandlerable.BeginInvoke(System.Windows.Forms.StatusBarPanelClickEventHandler,System.Object,System.Windows.Forms.StatusBarPanelClickEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            statusbarpanelclickeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.StreamExtensions.Streamable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.Stream">Stream</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.BeginReadToEnd(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously read to end of stream
            </summary>
            <example>
            byte[] buffer = new byte[1024];
            stream.BeginReadToEnd(buffer, 0, buffer.Length, ar =>
                                                           {
                                                           	int bytesRead = stream.EndRead(ar);
                                                           	ProcessData(buffer, bytesRead);
                                                           }, null);
            </example>
            <param name="stream">The stream for which this extension method acts upon.</param>
            <param name="buffer">The buffer to read the data into. </param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin writing data read from the stream. </param>
            <param name="count">The maximum number of bytes to read. </param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete. </param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests. </param>
            <exception cref="T:System.IO.IOException">Attempted an asynchronous read past the end of the stream, or a disk error occurs. </exception>
            <exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The current Stream implementation does not support the read operation. </exception>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous read, which could still be pending.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.BeginReadToEnd(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Asynchronously read to end of stream into a given buffer at given offset, of given size.
            This version does not use a state Object.
            </summary>
            <example>
            byte[] buffer = new byte[1024];
            stream.BeginReadToEnd(buffer, 0, buffer.Length, ar =>
                                                           {
                                                           	int bytesRead = stream.EndRead(ar);
                                                           	ProcessData(buffer, bytesRead);
                                                           });
            </example>
            <param name="stream">The stream for which this extension method acts upon.</param>
            <param name="buffer">The buffer to read the data into. </param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin writing data read from the stream. </param>
            <param name="count">The maximum number of bytes to read. </param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete. </param>
            <exception cref="T:System.IO.IOException">Attempted an asynchronous read past the end of the stream, or a disk error occurs. </exception>
            <exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The current Stream implementation does not support the read operation. </exception>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.BeginReadToEnd(System.IO.Stream,System.Byte[],System.AsyncCallback)">
            <summary>
            Asynchronously read to end of stream depending on size of buffer, starting at offset 0.
            This version does not use a state Object.
            </summary>
            <example>
            byte[] buffer = new byte[1024];
            stream.BeginReadToEnd(buffer, ar =>
                                                           {
                                                           	int bytesRead = stream.EndRead(ar);
                                                           	ProcessData(buffer, bytesRead);
                                                           });
            </example>
            <param name="stream">The stream for which this extension method acts upon.</param>
            <param name="buffer">The buffer to read the data into. </param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete. </param>
            <exception cref="T:System.IO.IOException">Attempted an asynchronous read past the end of the stream, or a disk error occurs. </exception>
            <exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The current Stream implementation does not support the read operation. </exception>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous read, which could still be pending.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.EndReadToEnd(System.IO.Stream,System.IAsyncResult)">
            <summary>
            The Asynchronous Programming Model matching End method to the corresponding BeginReadToEnd methods.
            </summary>
            <param name="stream"></param>
            <param name="ar">The reference to the pending asynchronous request to finish. </param><exception cref="T:System.ArgumentNullException"><paramref name="ar"/> is null. </exception><exception cref="T:System.ArgumentException">A handle to the pending read operation is not available.-or-The pending operation does not support reading.</exception><exception cref="T:System.InvalidOperationException"><paramref name="ar"/> did not originate from a <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> method on the current stream.</exception><exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception><filterpriority>2</filterpriority>
            <returns>
            The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.
            </returns>
            <exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.WriteAsync(System.IO.Stream,System.Byte[])">
            <summary>
            Extends WriteAsync so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            socket.WriteAsync(buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.ReadAsync(System.IO.Stream,System.Byte[])">
            <summary>
            Extends ReadAsync so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            socket.ReadAsync(buffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.StreamExtensions.Streamable.ByteArrayAsyncState">
            <summary>
            private state class to transfer state information between invocations of StreamExtensions.OnRead
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.Seek(System.IO.Stream,System.IO.SeekOrigin)">
            <summary>
            Seek with default offset of 0.
            </summary>
            <param name="stream"><seealso cref="T:System.IO.Stream"/> to operate on</param>
            <param name="seekOrigin"><seealso cref="F:System.IO.SeekOrigin.Begin"/> to seek to start,
            <seealso cref="F:System.IO.SeekOrigin.End"/> to seek to end, or <seealso cref="F:System.IO.SeekOrigin.Current"/> to do nothing.</param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.BeginRead(System.IO.Stream,System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.BeginRead(buffer, callback, state);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.BeginRead(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginRead so that when a state object is not needed, null does not need to be passed.
            <example>
            stream.BeginRead(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.BeginRead(System.IO.Stream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.BeginRead(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.BeginWrite(System.IO.Stream,System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.BeginWrite(buffer, callback, state);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.BeginWrite(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
            <example>
            stream.BeginWrite(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.BeginWrite(System.IO.Stream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.BeginWrite(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.Read(System.IO.Stream,System.Byte[])">
            <summary>
            Extends Read so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.Read(buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.Write(System.IO.Stream,System.Byte[])">
            <summary>
            Extends Write so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.Write(buffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TabControlCancelEventHandlerExtensions.TabControlCancelEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.TabControlCancelEventHandler">TabControlCancelEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TabControlCancelEventHandlerExtensions.TabControlCancelEventHandlerable.BeginInvoke(System.Windows.Forms.TabControlCancelEventHandler,System.Object,System.Windows.Forms.TabControlCancelEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            tabcontrolcanceleventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TabControlEventHandlerExtensions.TabControlEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.TabControlEventHandler">TabControlEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TabControlEventHandlerExtensions.TabControlEventHandlerable.BeginInvoke(System.Windows.Forms.TabControlEventHandler,System.Object,System.Windows.Forms.TabControlEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            tabcontroleventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TableLayoutCellPaintEventHandlerExtensions.TableLayoutCellPaintEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.TableLayoutCellPaintEventHandler">TableLayoutCellPaintEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TableLayoutCellPaintEventHandlerExtensions.TableLayoutCellPaintEventHandlerable.BeginInvoke(System.Windows.Forms.TableLayoutCellPaintEventHandler,System.Object,System.Windows.Forms.TableLayoutCellPaintEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            tablelayoutcellpainteventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TableLayoutSettingsTypeConverterExtensions.TableLayoutSettingsTypeConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.Layout.TableLayoutSettingsTypeConverter">TableLayoutSettingsTypeConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TableLayoutSettingsTypeConverterExtensions.TableLayoutSettingsTypeConverterable.ConvertTo``1(System.Windows.Forms.Layout.TableLayoutSettingsTypeConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TableLayoutSettingsTypeConverterExtensions.TableLayoutSettingsTypeConverterable.ConvertTo``1(System.Windows.Forms.Layout.TableLayoutSettingsTypeConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            tablelayoutsettingstypeconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.EndOfDay(System.DateTime)">
            <summary>
            Gets a <seealso cref="T:System.DateTime"/> that represents the last millisecond of the day represented by <paramref name="date"/>
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.BeginningOfDay(System.DateTime)">
            <summary>
            Gets a <seealso cref="T:System.DateTime"/> that represents the first  millisecond of the day represented by <paramref name="date"/>
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.From(System.TimeSpan,System.DateTime)">
            <summary>
            Calculates a final date spanning <paramref name="source"/> after <paramref name="origin"/>
            <example>
            // calculate date/time that it will be in one hour
            var finalDate = new TimeSpan(0, 1, 0, 0).From(DateTime.Now);
            </example>
            </summary>
            <param name="source"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Since(System.TimeSpan,System.DateTime)">
            <summary>
            Calculates a final date spanning <paramref name="source"/> after <paramref name="origin"/>
            Alias to <seealso cref="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.From(System.TimeSpan,System.DateTime)"/>
            </summary>
            <param name="source"></param>
            <param name="origin"></param>
            <seealso cref="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.From(System.TimeSpan,System.DateTime)"/>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Years(System.Int32)">
            <summary>
            Creates a <see cref="T:System.TimeSpan"/> spanning <paramref name="source"/> years.
            <example>
            var oneYear = 1.Years();
            </example>
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Months(System.Int32)">
            <summary>
            Creates a <see cref="T:System.TimeSpan"/> spanning <paramref name="source"/> months.
            </summary>
            var oneMonth = 1.Months();
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Minutes(System.Int32)">
            <summary>
            Creates a <see cref="T:System.TimeSpan"/> spanning <paramref name="source"/> minutes.
            <example>
            var oneMinute = 1.Minutes();
            </example>
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Hours(System.Int32)">
            <summary>
            Creates a <see cref="T:System.TimeSpan"/> spanning <paramref name="source"/> hours.
            <example>
            var oneHour = 1.Hours();
            </example>
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Days(System.Int32)">
            <summary>
            Creates a <see cref="T:System.TimeSpan"/> spanning <paramref name="source"/> days.
            <example>
            var oneDay = 1.Days();
            </example>
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Second(System.Int32)">
            <summary>
            Creates a <see cref="T:System.TimeSpan"/> spanning 1 second.
            <example>
            var oneSecond = 1.Second();
            </example>
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Seconds(System.Int32)">
            <summary>
            Creates a <see cref="T:System.TimeSpan"/> spanning <paramref name="source"/> seconds.
            <example>
            var fiveSeconds = 5.Second();
            </example>
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Milliseconds(System.Int32)">
            <summary>
            Creates a <see cref="T:System.TimeSpan"/> spanning <paramref name="source"/> milliseconds.
            <example>
            var fiftyMilliseconds = 50.Milliseconds();
            </example>
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Ago(System.TimeSpan,System.DateTime)">
            <summary>
            Creates a final <see cref="T:System.DateTime"/> <paramref name="source"/> in the past
            <example>
            50.Seconds.Ago();
            </example>
            </summary>
            <param name="source"></param>
            <param name="now">DateTime, or DateTime.Now if missing</param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Double(System.TimeSpan)">
            <summary>
            Doubles a <see cref="T:System.TimeSpan"/>
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.RoundToHours(System.TimeSpan)">
            <summary>
            Rounds a <see cref="T:System.TimeSpan"/> to the nearest hour
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.RoundToMinutes(System.TimeSpan)">
            <summary>
            Rounds a <see cref="T:System.TimeSpan"/> to the nearest minute
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.RoundToSeconds(System.TimeSpan)">
            <summary>
            Rounds a <see cref="T:System.TimeSpan"/> to the nearest second
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Million(System.Int32)">
            <summary>
            Creates an int of <paramref name="value"/> million.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Thousand(System.Int32)">
            <summary>
            Creates an int of <paramref name="value"/> thousand.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.ToEnglishString(System.TimeSpan)">
            <summary>
            Creates an English string from a <see cref="T:System.TimeSpan"/> value
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="T:PRI.ProductivityExtensions.TimerElapsedEventHandlerExtensions.TimerElapsedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:Microsoft.Win32.TimerElapsedEventHandler">TimerElapsedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TimerElapsedEventHandlerExtensions.TimerElapsedEventHandlerable.BeginInvoke(Microsoft.Win32.TimerElapsedEventHandler,System.Object,Microsoft.Win32.TimerElapsedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            timerelapsedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolBarButtonClickEventHandlerExtensions.ToolBarButtonClickEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolBarButtonClickEventHandler">ToolBarButtonClickEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolBarButtonClickEventHandlerExtensions.ToolBarButtonClickEventHandlerable.BeginInvoke(System.Windows.Forms.ToolBarButtonClickEventHandler,System.Object,System.Windows.Forms.ToolBarButtonClickEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolbarbuttonclickeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolboxComponentsCreatedEventHandlerExtensions.ToolboxComponentsCreatedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.Design.ToolboxComponentsCreatedEventHandler">ToolboxComponentsCreatedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolboxComponentsCreatedEventHandlerExtensions.ToolboxComponentsCreatedEventHandlerable.BeginInvoke(System.Drawing.Design.ToolboxComponentsCreatedEventHandler,System.Object,System.Drawing.Design.ToolboxComponentsCreatedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolboxcomponentscreatedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolboxComponentsCreatingEventHandlerExtensions.ToolboxComponentsCreatingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.Design.ToolboxComponentsCreatingEventHandler">ToolboxComponentsCreatingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolboxComponentsCreatingEventHandlerExtensions.ToolboxComponentsCreatingEventHandlerable.BeginInvoke(System.Drawing.Design.ToolboxComponentsCreatingEventHandler,System.Object,System.Drawing.Design.ToolboxComponentsCreatingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolboxcomponentscreatingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolboxItemCreatorCallbackExtensions.ToolboxItemCreatorCallbackable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.Design.ToolboxItemCreatorCallback">ToolboxItemCreatorCallback</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolboxItemCreatorCallbackExtensions.ToolboxItemCreatorCallbackable.BeginInvoke(System.Drawing.Design.ToolboxItemCreatorCallback,System.Object,System.String,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolboxitemcreatorcallback.BeginInvoke(serializedObject, format, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripArrowRenderEventHandlerExtensions.ToolStripArrowRenderEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripArrowRenderEventHandler">ToolStripArrowRenderEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripArrowRenderEventHandlerExtensions.ToolStripArrowRenderEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripArrowRenderEventHandler,System.Object,System.Windows.Forms.ToolStripArrowRenderEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstriparrowrendereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripContentPanelRenderEventHandlerExtensions.ToolStripContentPanelRenderEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripContentPanelRenderEventHandler">ToolStripContentPanelRenderEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripContentPanelRenderEventHandlerExtensions.ToolStripContentPanelRenderEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripContentPanelRenderEventHandler,System.Object,System.Windows.Forms.ToolStripContentPanelRenderEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstripcontentpanelrendereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripDropDownClosedEventHandlerExtensions.ToolStripDropDownClosedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripDropDownClosedEventHandler">ToolStripDropDownClosedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripDropDownClosedEventHandlerExtensions.ToolStripDropDownClosedEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripDropDownClosedEventHandler,System.Object,System.Windows.Forms.ToolStripDropDownClosedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstripdropdownclosedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripDropDownClosingEventHandlerExtensions.ToolStripDropDownClosingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripDropDownClosingEventHandler">ToolStripDropDownClosingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripDropDownClosingEventHandlerExtensions.ToolStripDropDownClosingEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripDropDownClosingEventHandler,System.Object,System.Windows.Forms.ToolStripDropDownClosingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstripdropdownclosingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripGripRenderEventHandlerExtensions.ToolStripGripRenderEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripGripRenderEventHandler">ToolStripGripRenderEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripGripRenderEventHandlerExtensions.ToolStripGripRenderEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripGripRenderEventHandler,System.Object,System.Windows.Forms.ToolStripGripRenderEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstripgriprendereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripItemClickedEventHandlerExtensions.ToolStripItemClickedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripItemClickedEventHandler">ToolStripItemClickedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripItemClickedEventHandlerExtensions.ToolStripItemClickedEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripItemClickedEventHandler,System.Object,System.Windows.Forms.ToolStripItemClickedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstripitemclickedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripItemEventHandlerExtensions.ToolStripItemEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripItemEventHandler">ToolStripItemEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripItemEventHandlerExtensions.ToolStripItemEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripItemEventHandler,System.Object,System.Windows.Forms.ToolStripItemEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstripitemeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripItemImageRenderEventHandlerExtensions.ToolStripItemImageRenderEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripItemImageRenderEventHandler">ToolStripItemImageRenderEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripItemImageRenderEventHandlerExtensions.ToolStripItemImageRenderEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripItemImageRenderEventHandler,System.Object,System.Windows.Forms.ToolStripItemImageRenderEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstripitemimagerendereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripItemRenderEventHandlerExtensions.ToolStripItemRenderEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripItemRenderEventHandler">ToolStripItemRenderEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripItemRenderEventHandlerExtensions.ToolStripItemRenderEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripItemRenderEventHandler,System.Object,System.Windows.Forms.ToolStripItemRenderEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstripitemrendereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripItemTextRenderEventHandlerExtensions.ToolStripItemTextRenderEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripItemTextRenderEventHandler">ToolStripItemTextRenderEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripItemTextRenderEventHandlerExtensions.ToolStripItemTextRenderEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripItemTextRenderEventHandler,System.Object,System.Windows.Forms.ToolStripItemTextRenderEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstripitemtextrendereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripPanelRenderEventHandlerExtensions.ToolStripPanelRenderEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripPanelRenderEventHandler">ToolStripPanelRenderEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripPanelRenderEventHandlerExtensions.ToolStripPanelRenderEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripPanelRenderEventHandler,System.Object,System.Windows.Forms.ToolStripPanelRenderEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstrippanelrendereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripRenderEventHandlerExtensions.ToolStripRenderEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripRenderEventHandler">ToolStripRenderEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripRenderEventHandlerExtensions.ToolStripRenderEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripRenderEventHandler,System.Object,System.Windows.Forms.ToolStripRenderEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstriprendereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripSeparatorRenderEventHandlerExtensions.ToolStripSeparatorRenderEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripSeparatorRenderEventHandler">ToolStripSeparatorRenderEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripSeparatorRenderEventHandlerExtensions.ToolStripSeparatorRenderEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripSeparatorRenderEventHandler,System.Object,System.Windows.Forms.ToolStripSeparatorRenderEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstripseparatorrendereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TreeNodeConverterExtensions.TreeNodeConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.TreeNodeConverter">TreeNodeConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TreeNodeConverterExtensions.TreeNodeConverterable.ConvertTo``1(System.Windows.Forms.TreeNodeConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TreeNodeConverterExtensions.TreeNodeConverterable.ConvertTo``1(System.Windows.Forms.TreeNodeConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            treenodeconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TreeNodeMouseClickEventHandlerExtensions.TreeNodeMouseClickEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.TreeNodeMouseClickEventHandler">TreeNodeMouseClickEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TreeNodeMouseClickEventHandlerExtensions.TreeNodeMouseClickEventHandlerable.BeginInvoke(System.Windows.Forms.TreeNodeMouseClickEventHandler,System.Object,System.Windows.Forms.TreeNodeMouseClickEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            treenodemouseclickeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TreeNodeMouseHoverEventHandlerExtensions.TreeNodeMouseHoverEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.TreeNodeMouseHoverEventHandler">TreeNodeMouseHoverEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TreeNodeMouseHoverEventHandlerExtensions.TreeNodeMouseHoverEventHandlerable.BeginInvoke(System.Windows.Forms.TreeNodeMouseHoverEventHandler,System.Object,System.Windows.Forms.TreeNodeMouseHoverEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            treenodemousehovereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TreeViewCancelEventHandlerExtensions.TreeViewCancelEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.TreeViewCancelEventHandler">TreeViewCancelEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TreeViewCancelEventHandlerExtensions.TreeViewCancelEventHandlerable.BeginInvoke(System.Windows.Forms.TreeViewCancelEventHandler,System.Object,System.Windows.Forms.TreeViewCancelEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            treeviewcanceleventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TreeViewEventHandlerExtensions.TreeViewEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.TreeViewEventHandler">TreeViewEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TreeViewEventHandlerExtensions.TreeViewEventHandlerable.BeginInvoke(System.Windows.Forms.TreeViewEventHandler,System.Object,System.Windows.Forms.TreeViewEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            treevieweventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TreeViewImageIndexConverterExtensions.TreeViewImageIndexConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.TreeViewImageIndexConverter">TreeViewImageIndexConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TreeViewImageIndexConverterExtensions.TreeViewImageIndexConverterable.ConvertTo``1(System.Windows.Forms.TreeViewImageIndexConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TreeViewImageIndexConverterExtensions.TreeViewImageIndexConverterable.ConvertTo``1(System.Windows.Forms.TreeViewImageIndexConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            treeviewimageindexconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TreeViewImageKeyConverterExtensions.TreeViewImageKeyConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.TreeViewImageKeyConverter">TreeViewImageKeyConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TreeViewImageKeyConverterExtensions.TreeViewImageKeyConverterable.ConvertTo``1(System.Windows.Forms.TreeViewImageKeyConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TreeViewImageKeyConverterExtensions.TreeViewImageKeyConverterable.ConvertTo``1(System.Windows.Forms.TreeViewImageKeyConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            treeviewimagekeyconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.UserPreferenceChangedEventHandlerExtensions.UserPreferenceChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:Microsoft.Win32.UserPreferenceChangedEventHandler">UserPreferenceChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UserPreferenceChangedEventHandlerExtensions.UserPreferenceChangedEventHandlerable.BeginInvoke(Microsoft.Win32.UserPreferenceChangedEventHandler,System.Object,Microsoft.Win32.UserPreferenceChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            userpreferencechangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.UserPreferenceChangingEventHandlerExtensions.UserPreferenceChangingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:Microsoft.Win32.UserPreferenceChangingEventHandler">UserPreferenceChangingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UserPreferenceChangingEventHandlerExtensions.UserPreferenceChangingEventHandlerable.BeginInvoke(Microsoft.Win32.UserPreferenceChangingEventHandler,System.Object,Microsoft.Win32.UserPreferenceChangingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            userpreferencechangingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
    </members>
</doc>
