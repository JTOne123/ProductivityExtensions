<?xml version="1.0"?>
<doc>
    <assembly>
        <name>geschikt</name>
    </assembly>
    <members>
        <member name="T:PRI.ProductivityExtensions.ActionExtensions.Actionable">
            <summary>
            Extensions methods on <seealso cref="T:System.Action`1"/>
            </summary>
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Action{T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16}" />
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ActionExtensions.Actionable.Sum``1(System.Collections.Generic.IEnumerable{System.Action{``0}})">
            <summary>
            Create a single multitask delegate from several actions.
            </summary>
            <typeparam name="T">The type of the parameter of the action that this action encapsulates. This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
            <param name="coll">The collection of <seealso cref="T:System.Action`1"/> to create a multicast delegate from.</param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ActionExtensions.Actionable.BeginInvoke``16(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16&gt; so that when a state object is not needed, null does not need to be passed.
            <example>
            action.BeginInvoke&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16&gt;(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ActiveDesignerEventHandlerExtensions.ActiveDesignerEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.Design.ActiveDesignerEventHandler">ActiveDesignerEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ActiveDesignerEventHandlerExtensions.ActiveDesignerEventHandlerable.BeginInvoke(System.ComponentModel.Design.ActiveDesignerEventHandler,System.Object,System.ComponentModel.Design.ActiveDesignerEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            activedesignereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.AddingNewEventHandlerExtensions.AddingNewEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.AddingNewEventHandler">AddingNewEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.AddingNewEventHandlerExtensions.AddingNewEventHandlerable.BeginInvoke(System.ComponentModel.AddingNewEventHandler,System.Object,System.ComponentModel.AddingNewEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            addingneweventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.AnonymousPipeClientStreamExtensions.AnonymousPipeClientStreamable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.Pipes.AnonymousPipeClientStream">AnonymousPipeClientStream</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.AnonymousPipeClientStreamExtensions.AnonymousPipeClientStreamable.BeginRead(System.IO.Pipes.AnonymousPipeClientStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginRead so that when a state object is not needed, null does not need to be passed.
            <example>
            pipestream.BeginRead(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.AnonymousPipeClientStreamExtensions.AnonymousPipeClientStreamable.BeginRead(System.IO.Pipes.AnonymousPipeClientStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            pipestream.BeginRead(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.AnonymousPipeClientStreamExtensions.AnonymousPipeClientStreamable.BeginWrite(System.IO.Pipes.AnonymousPipeClientStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
            <example>
            pipestream.BeginWrite(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.AnonymousPipeClientStreamExtensions.AnonymousPipeClientStreamable.BeginWrite(System.IO.Pipes.AnonymousPipeClientStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            pipestream.BeginWrite(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.AnonymousPipeServerStreamExtensions.AnonymousPipeServerStreamable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.Pipes.AnonymousPipeServerStream">AnonymousPipeServerStream</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.AnonymousPipeServerStreamExtensions.AnonymousPipeServerStreamable.BeginRead(System.IO.Pipes.AnonymousPipeServerStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginRead so that when a state object is not needed, null does not need to be passed.
            <example>
            pipestream.BeginRead(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.AnonymousPipeServerStreamExtensions.AnonymousPipeServerStreamable.BeginRead(System.IO.Pipes.AnonymousPipeServerStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            pipestream.BeginRead(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.AnonymousPipeServerStreamExtensions.AnonymousPipeServerStreamable.BeginWrite(System.IO.Pipes.AnonymousPipeServerStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
            <example>
            pipestream.BeginWrite(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.AnonymousPipeServerStreamExtensions.AnonymousPipeServerStreamable.BeginWrite(System.IO.Pipes.AnonymousPipeServerStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            pipestream.BeginWrite(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.AppDomainInitializerExtensions.AppDomainInitializerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.AppDomainInitializer">AppDomainInitializer</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.AppDomainInitializerExtensions.AppDomainInitializerable.BeginInvoke(System.AppDomainInitializer,System.String[],System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            appdomaininitializer.BeginInvoke(args, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.AppSettingsReaderExtensions.AppSettingsReaderable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Configuration.AppSettingsReader">AppSettingsReader</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.AppSettingsReaderExtensions.AppSettingsReaderable.GetValue``1(System.Configuration.AppSettingsReader,System.String)">
            <summary>
            Extends GetValue so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            appsettingsreader.GetValue&lt;int&gt;(key);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ArrayConverterExtensions.ArrayConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.ArrayConverter">ArrayConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ArrayConverterExtensions.ArrayConverterable.ConvertTo``1(System.ComponentModel.ArrayConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            arrayconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ArrayConverterExtensions.ArrayConverterable.ConvertTo``1(System.ComponentModel.ArrayConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.AssemblyLoadEventHandlerExtensions.AssemblyLoadEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.AssemblyLoadEventHandler">AssemblyLoadEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.AssemblyLoadEventHandlerExtensions.AssemblyLoadEventHandlerable.BeginInvoke(System.AssemblyLoadEventHandler,System.Object,System.AssemblyLoadEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            assemblyloadeventhandler.BeginInvoke(sender, args, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.AsyncCallbackExtensions.AsyncCallbackable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.AsyncCallback">AsyncCallback</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.AsyncCallbackExtensions.AsyncCallbackable.BeginInvoke(System.AsyncCallback,System.IAsyncResult,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            asynccallback.BeginInvoke(ar, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.AsyncCompletedEventHandlerExtensions.AsyncCompletedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.AsyncCompletedEventHandler">AsyncCompletedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.AsyncCompletedEventHandlerExtensions.AsyncCompletedEventHandlerable.BeginInvoke(System.ComponentModel.AsyncCompletedEventHandler,System.Object,System.ComponentModel.AsyncCompletedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            asynccompletedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.AuthenticatedStreamExtensions.AuthenticatedStreamable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.Security.AuthenticatedStream">AuthenticatedStream</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.AuthenticatedStreamExtensions.AuthenticatedStreamable.BeginRead(System.Net.Security.AuthenticatedStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginRead so that when a state object is not needed, null does not need to be passed.
            <example>
            stream.BeginRead(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.AuthenticatedStreamExtensions.AuthenticatedStreamable.BeginRead(System.Net.Security.AuthenticatedStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.BeginRead(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.AuthenticatedStreamExtensions.AuthenticatedStreamable.BeginWrite(System.Net.Security.AuthenticatedStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
            <example>
            stream.BeginWrite(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.AuthenticatedStreamExtensions.AuthenticatedStreamable.BeginWrite(System.Net.Security.AuthenticatedStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.BeginWrite(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.AuthenticationSchemeSelectorExtensions.AuthenticationSchemeSelectorable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.AuthenticationSchemeSelector">AuthenticationSchemeSelector</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.AuthenticationSchemeSelectorExtensions.AuthenticationSchemeSelectorable.BeginInvoke(System.Net.AuthenticationSchemeSelector,System.Net.HttpListenerRequest,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            authenticationschemeselector.BeginInvoke(httpRequest, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.BaseNumberConverterExtensions.BaseNumberConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.BaseNumberConverter">BaseNumberConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.BaseNumberConverterExtensions.BaseNumberConverterable.ConvertTo``1(System.ComponentModel.BaseNumberConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            basenumberconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.BaseNumberConverterExtensions.BaseNumberConverterable.ConvertTo``1(System.ComponentModel.BaseNumberConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.BinaryReaderExtensions.BinaryReaderable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.BinaryReader">BinaryReader</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.BinaryReaderExtensions.BinaryReaderable.Read(System.IO.BinaryReader,System.Char[])">
            <summary>
            Extends Read so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            binaryreader.Read(buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.BinaryReaderExtensions.BinaryReaderable.Read(System.IO.BinaryReader,System.Byte[])">
            <summary>
            Extends Read so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            binaryreader.Read(buffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.BinderExtensions.Binderable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Reflection.Binder">Binder</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.BinderExtensions.Binderable.ChangeType``1(System.Reflection.Binder,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Extends ChangeType so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            binder.ChangeType&lt;int&gt;(value, culture);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.BindingCompleteEventHandlerExtensions.BindingCompleteEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.BindingCompleteEventHandler">BindingCompleteEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.BindingCompleteEventHandlerExtensions.BindingCompleteEventHandlerable.BeginInvoke(System.Windows.Forms.BindingCompleteEventHandler,System.Object,System.Windows.Forms.BindingCompleteEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            bindingcompleteeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.BindingManagerDataErrorEventHandlerExtensions.BindingManagerDataErrorEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.BindingManagerDataErrorEventHandler">BindingManagerDataErrorEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.BindingManagerDataErrorEventHandlerExtensions.BindingManagerDataErrorEventHandlerable.BeginInvoke(System.Windows.Forms.BindingManagerDataErrorEventHandler,System.Object,System.Windows.Forms.BindingManagerDataErrorEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            bindingmanagerdataerroreventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.BindIPEndPointExtensions.BindIPEndPointable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.BindIPEndPoint">BindIPEndPoint</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.BindIPEndPointExtensions.BindIPEndPointable.BeginInvoke(System.Net.BindIPEndPoint,System.Net.ServicePoint,System.Net.IPEndPoint,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            bindipendpoint.BeginInvoke(servicePoint, remoteEndPoint, retryCount, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.BooleanConverterExtensions.BooleanConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.BooleanConverter">BooleanConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.BooleanConverterExtensions.BooleanConverterable.ConvertTo``1(System.ComponentModel.BooleanConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.BooleanConverterExtensions.BooleanConverterable.ConvertTo``1(System.ComponentModel.BooleanConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.BufferedStreamExtensions.BufferedStreamable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.BufferedStream">BufferedStream</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.BufferedStreamExtensions.BufferedStreamable.BeginRead(System.IO.BufferedStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginRead so that when a state object is not needed, null does not need to be passed.
            <example>
            stream.BeginRead(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.BufferedStreamExtensions.BufferedStreamable.BeginRead(System.IO.BufferedStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.BeginRead(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.BufferedStreamExtensions.BufferedStreamable.BeginWrite(System.IO.BufferedStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
            <example>
            stream.BeginWrite(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.BufferedStreamExtensions.BufferedStreamable.BeginWrite(System.IO.BufferedStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.BeginWrite(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ByteArrayExtensions.ByteArrayable">
            <summary>
            class that contains extension methods that extend <seealso cref="T:byte[]"/>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ByteArrayExtensions.ByteArrayable.AsHexString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a byte array into a continuous hex string
            </summary>
            <param name="buffer">buffer that contains the bytes</param>
            <param name="offset">offset into the buffer to start</param>
            <param name="length">how many types to process</param>
            <returns>string of hex characters</returns>
            <exception cref="T:System.IndexOutOfRangeException">if <paramref name="offset"/> is less than 0 or <paramref name="length"/> is longer than the buffer</exception>
        </member>
        <member name="M:PRI.ProductivityExtensions.ByteArrayExtensions.ByteArrayable.AsHexString(System.Byte[])">
            <summary>
            Converts a byte array into a continuous hex string
            </summary>
            <param name="buffer">buffer that contains the bytes</param>
            <returns>string of hex characters</returns>
        </member>
        <member name="T:PRI.ProductivityExtensions.ByteConverterExtensions.ByteConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.ByteConverter">ByteConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ByteConverterExtensions.ByteConverterable.ConvertTo``1(System.ComponentModel.ByteConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            basenumberconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ByteConverterExtensions.ByteConverterable.ConvertTo``1(System.ComponentModel.ByteConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.CacheVirtualItemsEventHandlerExtensions.CacheVirtualItemsEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.CacheVirtualItemsEventHandler">CacheVirtualItemsEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CacheVirtualItemsEventHandlerExtensions.CacheVirtualItemsEventHandlerable.BeginInvoke(System.Windows.Forms.CacheVirtualItemsEventHandler,System.Object,System.Windows.Forms.CacheVirtualItemsEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            cachevirtualitemseventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.CancelEventHandlerExtensions.CancelEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.CancelEventHandler">CancelEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CancelEventHandlerExtensions.CancelEventHandlerable.BeginInvoke(System.ComponentModel.CancelEventHandler,System.Object,System.ComponentModel.CancelEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            canceleventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.CharConverterExtensions.CharConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.CharConverter">CharConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CharConverterExtensions.CharConverterable.ConvertTo``1(System.ComponentModel.CharConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            charconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CharConverterExtensions.CharConverterable.ConvertTo``1(System.ComponentModel.CharConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.CollectionChangeEventHandlerExtensions.CollectionChangeEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.CollectionChangeEventHandler">CollectionChangeEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CollectionChangeEventHandlerExtensions.CollectionChangeEventHandlerable.BeginInvoke(System.ComponentModel.CollectionChangeEventHandler,System.Object,System.ComponentModel.CollectionChangeEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            collectionchangeeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.CollectionConverterExtensions.CollectionConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.CollectionConverter">CollectionConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CollectionConverterExtensions.CollectionConverterable.ConvertTo``1(System.ComponentModel.CollectionConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            collectionconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CollectionConverterExtensions.CollectionConverterable.ConvertTo``1(System.ComponentModel.CollectionConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ColorConverterExtensions.ColorConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.ColorConverter">ColorConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ColorConverterExtensions.ColorConverterable.ConvertTo``1(System.Drawing.ColorConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ColorConverterExtensions.ColorConverterable.ConvertTo``1(System.Drawing.ColorConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            colorconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ColumnClickEventHandlerExtensions.ColumnClickEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ColumnClickEventHandler">ColumnClickEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ColumnClickEventHandlerExtensions.ColumnClickEventHandlerable.BeginInvoke(System.Windows.Forms.ColumnClickEventHandler,System.Object,System.Windows.Forms.ColumnClickEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            columnclickeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ColumnHeaderConverterExtensions.ColumnHeaderConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ColumnHeaderConverter">ColumnHeaderConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ColumnHeaderConverterExtensions.ColumnHeaderConverterable.ConvertTo``1(System.Windows.Forms.ColumnHeaderConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ColumnHeaderConverterExtensions.ColumnHeaderConverterable.ConvertTo``1(System.Windows.Forms.ColumnHeaderConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            columnheaderconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ColumnReorderedEventHandlerExtensions.ColumnReorderedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ColumnReorderedEventHandler">ColumnReorderedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ColumnReorderedEventHandlerExtensions.ColumnReorderedEventHandlerable.BeginInvoke(System.Windows.Forms.ColumnReorderedEventHandler,System.Object,System.Windows.Forms.ColumnReorderedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            columnreorderedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ColumnWidthChangedEventHandlerExtensions.ColumnWidthChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ColumnWidthChangedEventHandler">ColumnWidthChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ColumnWidthChangedEventHandlerExtensions.ColumnWidthChangedEventHandlerable.BeginInvoke(System.Windows.Forms.ColumnWidthChangedEventHandler,System.Object,System.Windows.Forms.ColumnWidthChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            columnwidthchangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ColumnWidthChangingEventHandlerExtensions.ColumnWidthChangingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ColumnWidthChangingEventHandler">ColumnWidthChangingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ColumnWidthChangingEventHandlerExtensions.ColumnWidthChangingEventHandlerable.BeginInvoke(System.Windows.Forms.ColumnWidthChangingEventHandler,System.Object,System.Windows.Forms.ColumnWidthChangingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            columnwidthchangingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ComparisonExtensions.Comparisonable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Comparison`1">Comparison&lt;T&gt;</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ComparisonExtensions.Comparisonable.BeginInvoke``1(System.Comparison{``0},``0,``0,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke&lt;T&gt; so that when a state object is not needed, null does not need to be passed.
            <example>
            comparison.BeginInvoke&lt;T&gt;(x, y, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ComponentChangedEventHandlerExtensions.ComponentChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.Design.ComponentChangedEventHandler">ComponentChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ComponentChangedEventHandlerExtensions.ComponentChangedEventHandlerable.BeginInvoke(System.ComponentModel.Design.ComponentChangedEventHandler,System.Object,System.ComponentModel.Design.ComponentChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            componentchangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ComponentChangingEventHandlerExtensions.ComponentChangingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.Design.ComponentChangingEventHandler">ComponentChangingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ComponentChangingEventHandlerExtensions.ComponentChangingEventHandlerable.BeginInvoke(System.ComponentModel.Design.ComponentChangingEventHandler,System.Object,System.ComponentModel.Design.ComponentChangingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            componentchangingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ComponentConverterExtensions.ComponentConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.ComponentConverter">ComponentConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ComponentConverterExtensions.ComponentConverterable.ConvertTo``1(System.ComponentModel.ComponentConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            referenceconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ComponentConverterExtensions.ComponentConverterable.ConvertTo``1(System.ComponentModel.ComponentConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ComponentEventHandlerExtensions.ComponentEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.Design.ComponentEventHandler">ComponentEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ComponentEventHandlerExtensions.ComponentEventHandlerable.BeginInvoke(System.ComponentModel.Design.ComponentEventHandler,System.Object,System.ComponentModel.Design.ComponentEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            componenteventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ComponentRenameEventHandlerExtensions.ComponentRenameEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.Design.ComponentRenameEventHandler">ComponentRenameEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ComponentRenameEventHandlerExtensions.ComponentRenameEventHandlerable.BeginInvoke(System.ComponentModel.Design.ComponentRenameEventHandler,System.Object,System.ComponentModel.Design.ComponentRenameEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            componentrenameeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ConsoleCancelEventHandlerExtensions.ConsoleCancelEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ConsoleCancelEventHandler">ConsoleCancelEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ConsoleCancelEventHandlerExtensions.ConsoleCancelEventHandlerable.BeginInvoke(System.ConsoleCancelEventHandler,System.Object,System.ConsoleCancelEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            consolecanceleventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ContentsResizedEventHandlerExtensions.ContentsResizedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ContentsResizedEventHandler">ContentsResizedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ContentsResizedEventHandlerExtensions.ContentsResizedEventHandlerable.BeginInvoke(System.Windows.Forms.ContentsResizedEventHandler,System.Object,System.Windows.Forms.ContentsResizedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            contentsresizedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ContextCallbackExtensions.ContextCallbackable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Threading.ContextCallback">ContextCallback</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ContextCallbackExtensions.ContextCallbackable.BeginInvoke(System.Threading.ContextCallback,System.Object,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            contextcallback.BeginInvoke(state, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ControlEventHandlerExtensions.ControlEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ControlEventHandler">ControlEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ControlEventHandlerExtensions.ControlEventHandlerable.BeginInvoke(System.Windows.Forms.ControlEventHandler,System.Object,System.Windows.Forms.ControlEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            controleventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ConverterExtensions.Converterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Converter`2">Converter&lt;TInput,TOutput&gt;</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ConverterExtensions.Converterable.BeginInvoke``2(System.Converter{``0,``1},``0,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke&lt;TInput, TOutput&gt; so that when a state object is not needed, null does not need to be passed.
            <example>
            converter.BeginInvoke&lt;TInput, TOutput&gt;(input, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ConvertEventHandlerExtensions.ConvertEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ConvertEventHandler">ConvertEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ConvertEventHandlerExtensions.ConvertEventHandlerable.BeginInvoke(System.Windows.Forms.ConvertEventHandler,System.Object,System.Windows.Forms.ConvertEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            converteventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.CrossAppDomainDelegateExtensions.CrossAppDomainDelegateable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.CrossAppDomainDelegate">CrossAppDomainDelegate</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CrossAppDomainDelegateExtensions.CrossAppDomainDelegateable.BeginInvoke(System.CrossAppDomainDelegate,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            crossappdomaindelegate.BeginInvoke(callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.CrossContextDelegateExtensions.CrossContextDelegateable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Runtime.Remoting.Contexts.CrossContextDelegate">CrossContextDelegate</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CrossContextDelegateExtensions.CrossContextDelegateable.BeginInvoke(System.Runtime.Remoting.Contexts.CrossContextDelegate,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            crosscontextdelegate.BeginInvoke(callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.CryptoAPITransformExtensions.CryptoAPITransformable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Security.Cryptography.CryptoAPITransform">CryptoAPITransform</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CryptoAPITransformExtensions.CryptoAPITransformable.TransformBlock(System.Security.Cryptography.CryptoAPITransform,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Extends TransformBlock so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            cryptoapitransform.TransformBlock(inputBuffer, outputBuffer, outputOffset);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CryptoAPITransformExtensions.CryptoAPITransformable.TransformFinalBlock(System.Security.Cryptography.CryptoAPITransform,System.Byte[])">
            <summary>
            Extends TransformFinalBlock so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            cryptoapitransform.TransformFinalBlock(inputBuffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.CryptoStreamExtensions.CryptoStreamable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Security.Cryptography.CryptoStream">CryptoStream</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CryptoStreamExtensions.CryptoStreamable.BeginRead(System.Security.Cryptography.CryptoStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginRead so that when a state object is not needed, null does not need to be passed.
            <example>
            stream.BeginRead(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CryptoStreamExtensions.CryptoStreamable.BeginRead(System.Security.Cryptography.CryptoStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.BeginRead(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CryptoStreamExtensions.CryptoStreamable.BeginWrite(System.Security.Cryptography.CryptoStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
            <example>
            stream.BeginWrite(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CryptoStreamExtensions.CryptoStreamable.BeginWrite(System.Security.Cryptography.CryptoStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.BeginWrite(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.CultureInfoConverterExtensions.CultureInfoConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.CultureInfoConverter">CultureInfoConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CultureInfoConverterExtensions.CultureInfoConverterable.ConvertTo``1(System.ComponentModel.CultureInfoConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            cultureinfoconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CultureInfoConverterExtensions.CultureInfoConverterable.ConvertTo``1(System.ComponentModel.CultureInfoConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.CursorConverterExtensions.CursorConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.CursorConverter">CursorConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CursorConverterExtensions.CursorConverterable.ConvertTo``1(System.Windows.Forms.CursorConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.CursorConverterExtensions.CursorConverterable.ConvertTo``1(System.Windows.Forms.CursorConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            cursorconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataColumnChangeEventHandlerExtensions.DataColumnChangeEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.DataColumnChangeEventHandler">DataColumnChangeEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataColumnChangeEventHandlerExtensions.DataColumnChangeEventHandlerable.BeginInvoke(System.Data.DataColumnChangeEventHandler,System.Object,System.Data.DataColumnChangeEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datacolumnchangeeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataColumnExcentions.DataColumable">
            <summary>
            class that contains extension methods that extend <seealso cref="T:System.Data.DataColumnCollection"/>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataColumnExcentions.DataColumable.Add``1(System.Data.DataColumnCollection,System.String)">
            <summary>
            Adds a generic Add&lt;T&gt; to DataColumnCollection to avoid Add(typeof(T), "columnName")
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataColumnCollection"></param>
            <param name="columnName"></param>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridPreferredColumnWidthTypeConverterExtensions.DataGridPreferredColumnWidthTypeConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridPreferredColumnWidthTypeConverter">DataGridPreferredColumnWidthTypeConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridPreferredColumnWidthTypeConverterExtensions.DataGridPreferredColumnWidthTypeConverterable.ConvertTo``1(System.Windows.Forms.DataGridPreferredColumnWidthTypeConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridPreferredColumnWidthTypeConverterExtensions.DataGridPreferredColumnWidthTypeConverterable.ConvertTo``1(System.Windows.Forms.DataGridPreferredColumnWidthTypeConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            datagridpreferredcolumnwidthtypeconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewAutoSizeColumnModeEventHandlerExtensions.DataGridViewAutoSizeColumnModeEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler">DataGridViewAutoSizeColumnModeEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewAutoSizeColumnModeEventHandlerExtensions.DataGridViewAutoSizeColumnModeEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewAutoSizeColumnModeEventHandler,System.Object,System.Windows.Forms.DataGridViewAutoSizeColumnModeEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewautosizecolumnmodeeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewAutoSizeColumnsModeEventHandlerExtensions.DataGridViewAutoSizeColumnsModeEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler">DataGridViewAutoSizeColumnsModeEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewAutoSizeColumnsModeEventHandlerExtensions.DataGridViewAutoSizeColumnsModeEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventHandler,System.Object,System.Windows.Forms.DataGridViewAutoSizeColumnsModeEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewautosizecolumnsmodeeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewAutoSizeModeEventHandlerExtensions.DataGridViewAutoSizeModeEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewAutoSizeModeEventHandler">DataGridViewAutoSizeModeEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewAutoSizeModeEventHandlerExtensions.DataGridViewAutoSizeModeEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewAutoSizeModeEventHandler,System.Object,System.Windows.Forms.DataGridViewAutoSizeModeEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewautosizemodeeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewBindingCompleteEventHandlerExtensions.DataGridViewBindingCompleteEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewBindingCompleteEventHandler">DataGridViewBindingCompleteEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewBindingCompleteEventHandlerExtensions.DataGridViewBindingCompleteEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewBindingCompleteEventHandler,System.Object,System.Windows.Forms.DataGridViewBindingCompleteEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewbindingcompleteeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellCancelEventHandlerExtensions.DataGridViewCellCancelEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellCancelEventHandler">DataGridViewCellCancelEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellCancelEventHandlerExtensions.DataGridViewCellCancelEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellCancelEventHandler,System.Object,System.Windows.Forms.DataGridViewCellCancelEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcellcanceleventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellContextMenuStripNeededEventHandlerExtensions.DataGridViewCellContextMenuStripNeededEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler">DataGridViewCellContextMenuStripNeededEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellContextMenuStripNeededEventHandlerExtensions.DataGridViewCellContextMenuStripNeededEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler,System.Object,System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcellcontextmenustripneededeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellErrorTextNeededEventHandlerExtensions.DataGridViewCellErrorTextNeededEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler">DataGridViewCellErrorTextNeededEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellErrorTextNeededEventHandlerExtensions.DataGridViewCellErrorTextNeededEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellErrorTextNeededEventHandler,System.Object,System.Windows.Forms.DataGridViewCellErrorTextNeededEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcellerrortextneededeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellEventHandlerExtensions.DataGridViewCellEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellEventHandler">DataGridViewCellEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellEventHandlerExtensions.DataGridViewCellEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellEventHandler,System.Object,System.Windows.Forms.DataGridViewCellEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcelleventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellFormattingEventHandlerExtensions.DataGridViewCellFormattingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellFormattingEventHandler">DataGridViewCellFormattingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellFormattingEventHandlerExtensions.DataGridViewCellFormattingEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellFormattingEventHandler,System.Object,System.Windows.Forms.DataGridViewCellFormattingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcellformattingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellMouseEventHandlerExtensions.DataGridViewCellMouseEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellMouseEventHandler">DataGridViewCellMouseEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellMouseEventHandlerExtensions.DataGridViewCellMouseEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellMouseEventHandler,System.Object,System.Windows.Forms.DataGridViewCellMouseEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcellmouseeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellPaintingEventHandlerExtensions.DataGridViewCellPaintingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellPaintingEventHandler">DataGridViewCellPaintingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellPaintingEventHandlerExtensions.DataGridViewCellPaintingEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellPaintingEventHandler,System.Object,System.Windows.Forms.DataGridViewCellPaintingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcellpaintingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellParsingEventHandlerExtensions.DataGridViewCellParsingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellParsingEventHandler">DataGridViewCellParsingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellParsingEventHandlerExtensions.DataGridViewCellParsingEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellParsingEventHandler,System.Object,System.Windows.Forms.DataGridViewCellParsingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcellparsingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellStateChangedEventHandlerExtensions.DataGridViewCellStateChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellStateChangedEventHandler">DataGridViewCellStateChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellStateChangedEventHandlerExtensions.DataGridViewCellStateChangedEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellStateChangedEventHandler,System.Object,System.Windows.Forms.DataGridViewCellStateChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcellstatechangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellStyleContentChangedEventHandlerExtensions.DataGridViewCellStyleContentChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler">DataGridViewCellStyleContentChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellStyleContentChangedEventHandlerExtensions.DataGridViewCellStyleContentChangedEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellStyleContentChangedEventHandler,System.Object,System.Windows.Forms.DataGridViewCellStyleContentChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcellstylecontentchangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellStyleConverterExtensions.DataGridViewCellStyleConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellStyleConverter">DataGridViewCellStyleConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellStyleConverterExtensions.DataGridViewCellStyleConverterable.ConvertTo``1(System.Windows.Forms.DataGridViewCellStyleConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellStyleConverterExtensions.DataGridViewCellStyleConverterable.ConvertTo``1(System.Windows.Forms.DataGridViewCellStyleConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            datagridviewcellstyleconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellToolTipTextNeededEventHandlerExtensions.DataGridViewCellToolTipTextNeededEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler">DataGridViewCellToolTipTextNeededEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellToolTipTextNeededEventHandlerExtensions.DataGridViewCellToolTipTextNeededEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellToolTipTextNeededEventHandler,System.Object,System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcelltooltiptextneededeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellValidatingEventHandlerExtensions.DataGridViewCellValidatingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellValidatingEventHandler">DataGridViewCellValidatingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellValidatingEventHandlerExtensions.DataGridViewCellValidatingEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellValidatingEventHandler,System.Object,System.Windows.Forms.DataGridViewCellValidatingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcellvalidatingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewCellValueEventHandlerExtensions.DataGridViewCellValueEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewCellValueEventHandler">DataGridViewCellValueEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewCellValueEventHandlerExtensions.DataGridViewCellValueEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewCellValueEventHandler,System.Object,System.Windows.Forms.DataGridViewCellValueEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcellvalueeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewColumnDividerDoubleClickEventHandlerExtensions.DataGridViewColumnDividerDoubleClickEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventHandler">DataGridViewColumnDividerDoubleClickEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewColumnDividerDoubleClickEventHandlerExtensions.DataGridViewColumnDividerDoubleClickEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventHandler,System.Object,System.Windows.Forms.DataGridViewColumnDividerDoubleClickEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcolumndividerdoubleclickeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewColumnEventHandlerExtensions.DataGridViewColumnEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewColumnEventHandler">DataGridViewColumnEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewColumnEventHandlerExtensions.DataGridViewColumnEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewColumnEventHandler,System.Object,System.Windows.Forms.DataGridViewColumnEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcolumneventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewColumnStateChangedEventHandlerExtensions.DataGridViewColumnStateChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewColumnStateChangedEventHandler">DataGridViewColumnStateChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewColumnStateChangedEventHandlerExtensions.DataGridViewColumnStateChangedEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewColumnStateChangedEventHandler,System.Object,System.Windows.Forms.DataGridViewColumnStateChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewcolumnstatechangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewDataErrorEventHandlerExtensions.DataGridViewDataErrorEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewDataErrorEventHandler">DataGridViewDataErrorEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewDataErrorEventHandlerExtensions.DataGridViewDataErrorEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewDataErrorEventHandler,System.Object,System.Windows.Forms.DataGridViewDataErrorEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewdataerroreventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewEditingControlShowingEventHandlerExtensions.DataGridViewEditingControlShowingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewEditingControlShowingEventHandler">DataGridViewEditingControlShowingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewEditingControlShowingEventHandlerExtensions.DataGridViewEditingControlShowingEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewEditingControlShowingEventHandler,System.Object,System.Windows.Forms.DataGridViewEditingControlShowingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridvieweditingcontrolshowingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowCancelEventHandlerExtensions.DataGridViewRowCancelEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowCancelEventHandler">DataGridViewRowCancelEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowCancelEventHandlerExtensions.DataGridViewRowCancelEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowCancelEventHandler,System.Object,System.Windows.Forms.DataGridViewRowCancelEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewrowcanceleventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowContextMenuStripNeededEventHandlerExtensions.DataGridViewRowContextMenuStripNeededEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler">DataGridViewRowContextMenuStripNeededEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowContextMenuStripNeededEventHandlerExtensions.DataGridViewRowContextMenuStripNeededEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventHandler,System.Object,System.Windows.Forms.DataGridViewRowContextMenuStripNeededEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewrowcontextmenustripneededeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowDividerDoubleClickEventHandlerExtensions.DataGridViewRowDividerDoubleClickEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowDividerDoubleClickEventHandler">DataGridViewRowDividerDoubleClickEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowDividerDoubleClickEventHandlerExtensions.DataGridViewRowDividerDoubleClickEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowDividerDoubleClickEventHandler,System.Object,System.Windows.Forms.DataGridViewRowDividerDoubleClickEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewrowdividerdoubleclickeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowErrorTextNeededEventHandlerExtensions.DataGridViewRowErrorTextNeededEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler">DataGridViewRowErrorTextNeededEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowErrorTextNeededEventHandlerExtensions.DataGridViewRowErrorTextNeededEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowErrorTextNeededEventHandler,System.Object,System.Windows.Forms.DataGridViewRowErrorTextNeededEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewrowerrortextneededeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowEventHandlerExtensions.DataGridViewRowEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowEventHandler">DataGridViewRowEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowEventHandlerExtensions.DataGridViewRowEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowEventHandler,System.Object,System.Windows.Forms.DataGridViewRowEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewroweventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowHeightInfoNeededEventHandlerExtensions.DataGridViewRowHeightInfoNeededEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowHeightInfoNeededEventHandler">DataGridViewRowHeightInfoNeededEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowHeightInfoNeededEventHandlerExtensions.DataGridViewRowHeightInfoNeededEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowHeightInfoNeededEventHandler,System.Object,System.Windows.Forms.DataGridViewRowHeightInfoNeededEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewrowheightinfoneededeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowHeightInfoPushedEventHandlerExtensions.DataGridViewRowHeightInfoPushedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowHeightInfoPushedEventHandler">DataGridViewRowHeightInfoPushedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowHeightInfoPushedEventHandlerExtensions.DataGridViewRowHeightInfoPushedEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowHeightInfoPushedEventHandler,System.Object,System.Windows.Forms.DataGridViewRowHeightInfoPushedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewrowheightinfopushedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowPostPaintEventHandlerExtensions.DataGridViewRowPostPaintEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowPostPaintEventHandler">DataGridViewRowPostPaintEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowPostPaintEventHandlerExtensions.DataGridViewRowPostPaintEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowPostPaintEventHandler,System.Object,System.Windows.Forms.DataGridViewRowPostPaintEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewrowpostpainteventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowPrePaintEventHandlerExtensions.DataGridViewRowPrePaintEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowPrePaintEventHandler">DataGridViewRowPrePaintEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowPrePaintEventHandlerExtensions.DataGridViewRowPrePaintEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowPrePaintEventHandler,System.Object,System.Windows.Forms.DataGridViewRowPrePaintEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewrowprepainteventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowsAddedEventHandlerExtensions.DataGridViewRowsAddedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowsAddedEventHandler">DataGridViewRowsAddedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowsAddedEventHandlerExtensions.DataGridViewRowsAddedEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowsAddedEventHandler,System.Object,System.Windows.Forms.DataGridViewRowsAddedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewrowsaddedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowsRemovedEventHandlerExtensions.DataGridViewRowsRemovedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowsRemovedEventHandler">DataGridViewRowsRemovedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowsRemovedEventHandlerExtensions.DataGridViewRowsRemovedEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowsRemovedEventHandler,System.Object,System.Windows.Forms.DataGridViewRowsRemovedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewrowsremovedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewRowStateChangedEventHandlerExtensions.DataGridViewRowStateChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewRowStateChangedEventHandler">DataGridViewRowStateChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewRowStateChangedEventHandlerExtensions.DataGridViewRowStateChangedEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewRowStateChangedEventHandler,System.Object,System.Windows.Forms.DataGridViewRowStateChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewrowstatechangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataGridViewSortCompareEventHandlerExtensions.DataGridViewSortCompareEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DataGridViewSortCompareEventHandler">DataGridViewSortCompareEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataGridViewSortCompareEventHandlerExtensions.DataGridViewSortCompareEventHandlerable.BeginInvoke(System.Windows.Forms.DataGridViewSortCompareEventHandler,System.Object,System.Windows.Forms.DataGridViewSortCompareEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datagridviewsortcompareeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataReceivedEventHandlerExtensions.DataReceivedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Diagnostics.DataReceivedEventHandler">DataReceivedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataReceivedEventHandlerExtensions.DataReceivedEventHandlerable.BeginInvoke(System.Diagnostics.DataReceivedEventHandler,System.Object,System.Diagnostics.DataReceivedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datareceivedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataRowChangeEventHandlerExtensions.DataRowChangeEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.DataRowChangeEventHandler">DataRowChangeEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataRowChangeEventHandlerExtensions.DataRowChangeEventHandlerable.BeginInvoke(System.Data.DataRowChangeEventHandler,System.Object,System.Data.DataRowChangeEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datarowchangeeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataTableClearEventHandlerExtensions.DataTableClearEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.DataTableClearEventHandler">DataTableClearEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataTableClearEventHandlerExtensions.DataTableClearEventHandlerable.BeginInvoke(System.Data.DataTableClearEventHandler,System.Object,System.Data.DataTableClearEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datatablecleareventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DataTableNewRowEventHandlerExtensions.DataTableNewRowEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.DataTableNewRowEventHandler">DataTableNewRowEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DataTableNewRowEventHandlerExtensions.DataTableNewRowEventHandlerable.BeginInvoke(System.Data.DataTableNewRowEventHandler,System.Object,System.Data.DataTableNewRowEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            datatablenewroweventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DateBoldEventHandlerExtensions.DateBoldEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DateBoldEventHandler">DateBoldEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DateBoldEventHandlerExtensions.DateBoldEventHandlerable.BeginInvoke(System.Windows.Forms.DateBoldEventHandler,System.Object,System.Windows.Forms.DateBoldEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            dateboldeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DateRangeEventHandlerExtensions.DateRangeEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DateRangeEventHandler">DateRangeEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DateRangeEventHandlerExtensions.DateRangeEventHandlerable.BeginInvoke(System.Windows.Forms.DateRangeEventHandler,System.Object,System.Windows.Forms.DateRangeEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            daterangeeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DateTimeConverterExtensions.DateTimeConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.DateTimeConverter">DateTimeConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DateTimeConverterExtensions.DateTimeConverterable.ConvertTo``1(System.ComponentModel.DateTimeConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            datetimeconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DateTimeConverterExtensions.DateTimeConverterable.ConvertTo``1(System.ComponentModel.DateTimeConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DateTimeOffsetConverterExtensions.DateTimeOffsetConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.DateTimeOffsetConverter">DateTimeOffsetConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DateTimeOffsetConverterExtensions.DateTimeOffsetConverterable.ConvertTo``1(System.ComponentModel.DateTimeOffsetConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            datetimeoffsetconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DateTimeOffsetConverterExtensions.DateTimeOffsetConverterable.ConvertTo``1(System.ComponentModel.DateTimeOffsetConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DbDataReaderExtensions.DbDataReaderable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.Common.DbDataReader">DbDataReader</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DbDataReaderExtensions.DbDataReaderable.GetBytes(System.Data.Common.DbDataReader,System.Int32,System.Int64,System.Byte[])">
            <summary>
            Extends GetBytes so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            dbdatareader.GetBytes(ordinal, dataOffset, buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DbDataReaderExtensions.DbDataReaderable.GetChars(System.Data.Common.DbDataReader,System.Int32,System.Int64,System.Char[])">
            <summary>
            Extends GetChars so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            dbdatareader.GetChars(ordinal, dataOffset, buffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DbDataRecordExtensions.DbDataRecordable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.Common.DbDataRecord">DbDataRecord</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DbDataRecordExtensions.DbDataRecordable.GetBytes(System.Data.Common.DbDataRecord,System.Int32,System.Int64,System.Byte[])">
            <summary>
            Extends GetBytes so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            dbdatarecord.GetBytes(i, dataIndex, buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DbDataRecordExtensions.DbDataRecordable.GetChars(System.Data.Common.DbDataRecord,System.Int32,System.Int64,System.Char[])">
            <summary>
            Extends GetChars so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            dbdatarecord.GetChars(i, dataIndex, buffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DecimalConverterExtensions.DecimalConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.DecimalConverter">DecimalConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DecimalConverterExtensions.DecimalConverterable.ConvertTo``1(System.ComponentModel.DecimalConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            decimalconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DecimalConverterExtensions.DecimalConverterable.ConvertTo``1(System.ComponentModel.DecimalConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DecoderExtensions.Decoderable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Text.Decoder">Decoder</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DecoderExtensions.Decoderable.GetCharCount(System.Text.Decoder,System.Byte[])">
            <summary>
            Extends GetCharCount so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            decoder.GetCharCount(bytes);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DecoderExtensions.Decoderable.GetCharCount(System.Text.Decoder,System.Byte[],System.Boolean)">
            <summary>
            Extends GetCharCount so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            decoder.GetCharCount(bytes, flush);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DecoderExtensions.Decoderable.GetChars(System.Text.Decoder,System.Byte[],System.Char[],System.Int32)">
            <summary>
            Extends GetChars so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            decoder.GetChars(bytes, chars, charIndex);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DecoderExtensions.Decoderable.GetChars(System.Text.Decoder,System.Byte[],System.Char[],System.Int32,System.Boolean)">
            <summary>
            Extends GetChars so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            decoder.GetChars(bytes, chars, charIndex, flush);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DecoderExtensions.Decoderable.Convert(System.Text.Decoder,System.Byte[],System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            Extends Convert so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            decoder.Convert(bytes, chars, charIndex, charCount, flush, bytesUsed, charsUsed, completed);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DeflateStreamExtensions.DeflateStreamable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.Compression.DeflateStream">DeflateStream</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DeflateStreamExtensions.DeflateStreamable.BeginRead(System.IO.Compression.DeflateStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginRead so that when a state object is not needed, null does not need to be passed.
            <example>
            deflatestream.BeginRead(array, offset, count, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DeflateStreamExtensions.DeflateStreamable.BeginRead(System.IO.Compression.DeflateStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            deflatestream.BeginRead(array, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DeflateStreamExtensions.DeflateStreamable.BeginWrite(System.IO.Compression.DeflateStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
            <example>
            deflatestream.BeginWrite(array, offset, count, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DeflateStreamExtensions.DeflateStreamable.BeginWrite(System.IO.Compression.DeflateStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            deflatestream.BeginWrite(array, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DesignerEventHandlerExtensions.DesignerEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.Design.DesignerEventHandler">DesignerEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DesignerEventHandlerExtensions.DesignerEventHandlerable.BeginInvoke(System.ComponentModel.Design.DesignerEventHandler,System.Object,System.ComponentModel.Design.DesignerEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            designereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DesignerTransactionCloseEventHandlerExtensions.DesignerTransactionCloseEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">DesignerTransactionCloseEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DesignerTransactionCloseEventHandlerExtensions.DesignerTransactionCloseEventHandlerable.BeginInvoke(System.ComponentModel.Design.DesignerTransactionCloseEventHandler,System.Object,System.ComponentModel.Design.DesignerTransactionCloseEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            designertransactioncloseeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DoubleConverterExtensions.DoubleConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.DoubleConverter">DoubleConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DoubleConverterExtensions.DoubleConverterable.ConvertTo``1(System.ComponentModel.DoubleConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            basenumberconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DoubleConverterExtensions.DoubleConverterable.ConvertTo``1(System.ComponentModel.DoubleConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DownloadDataCompletedEventHandlerExtensions.DownloadDataCompletedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.DownloadDataCompletedEventHandler">DownloadDataCompletedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DownloadDataCompletedEventHandlerExtensions.DownloadDataCompletedEventHandlerable.BeginInvoke(System.Net.DownloadDataCompletedEventHandler,System.Object,System.Net.DownloadDataCompletedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            downloaddatacompletedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DownloadProgressChangedEventHandlerExtensions.DownloadProgressChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.DownloadProgressChangedEventHandler">DownloadProgressChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DownloadProgressChangedEventHandlerExtensions.DownloadProgressChangedEventHandlerable.BeginInvoke(System.Net.DownloadProgressChangedEventHandler,System.Object,System.Net.DownloadProgressChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            downloadprogresschangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DownloadStringCompletedEventHandlerExtensions.DownloadStringCompletedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.DownloadStringCompletedEventHandler">DownloadStringCompletedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DownloadStringCompletedEventHandlerExtensions.DownloadStringCompletedEventHandlerable.BeginInvoke(System.Net.DownloadStringCompletedEventHandler,System.Object,System.Net.DownloadStringCompletedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            downloadstringcompletedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DoWorkEventHandlerExtensions.DoWorkEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.DoWorkEventHandler">DoWorkEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DoWorkEventHandlerExtensions.DoWorkEventHandlerable.BeginInvoke(System.ComponentModel.DoWorkEventHandler,System.Object,System.ComponentModel.DoWorkEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            doworkeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DragEventHandlerExtensions.DragEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DragEventHandler">DragEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DragEventHandlerExtensions.DragEventHandlerable.BeginInvoke(System.Windows.Forms.DragEventHandler,System.Object,System.Windows.Forms.DragEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            drageventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DrawItemEventHandlerExtensions.DrawItemEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DrawItemEventHandler">DrawItemEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DrawItemEventHandlerExtensions.DrawItemEventHandlerable.BeginInvoke(System.Windows.Forms.DrawItemEventHandler,System.Object,System.Windows.Forms.DrawItemEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            drawitemeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DrawListViewColumnHeaderEventHandlerExtensions.DrawListViewColumnHeaderEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DrawListViewColumnHeaderEventHandler">DrawListViewColumnHeaderEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DrawListViewColumnHeaderEventHandlerExtensions.DrawListViewColumnHeaderEventHandlerable.BeginInvoke(System.Windows.Forms.DrawListViewColumnHeaderEventHandler,System.Object,System.Windows.Forms.DrawListViewColumnHeaderEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            drawlistviewcolumnheadereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DrawListViewItemEventHandlerExtensions.DrawListViewItemEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DrawListViewItemEventHandler">DrawListViewItemEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DrawListViewItemEventHandlerExtensions.DrawListViewItemEventHandlerable.BeginInvoke(System.Windows.Forms.DrawListViewItemEventHandler,System.Object,System.Windows.Forms.DrawListViewItemEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            drawlistviewitemeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DrawListViewSubItemEventHandlerExtensions.DrawListViewSubItemEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DrawListViewSubItemEventHandler">DrawListViewSubItemEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DrawListViewSubItemEventHandlerExtensions.DrawListViewSubItemEventHandlerable.BeginInvoke(System.Windows.Forms.DrawListViewSubItemEventHandler,System.Object,System.Windows.Forms.DrawListViewSubItemEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            drawlistviewsubitemeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DrawToolTipEventHandlerExtensions.DrawToolTipEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DrawToolTipEventHandler">DrawToolTipEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DrawToolTipEventHandlerExtensions.DrawToolTipEventHandlerable.BeginInvoke(System.Windows.Forms.DrawToolTipEventHandler,System.Object,System.Windows.Forms.DrawToolTipEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            drawtooltipeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.DrawTreeNodeEventHandlerExtensions.DrawTreeNodeEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.DrawTreeNodeEventHandler">DrawTreeNodeEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.DrawTreeNodeEventHandlerExtensions.DrawTreeNodeEventHandlerable.BeginInvoke(System.Windows.Forms.DrawTreeNodeEventHandler,System.Object,System.Windows.Forms.DrawTreeNodeEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            drawtreenodeeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ElapsedEventHandlerExtensions.ElapsedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Timers.ElapsedEventHandler">ElapsedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ElapsedEventHandlerExtensions.ElapsedEventHandlerable.BeginInvoke(System.Timers.ElapsedEventHandler,System.Object,System.Timers.ElapsedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            elapsedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.EncoderExtensions.Encoderable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Text.Encoder">Encoder</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.EncoderExtensions.Encoderable.GetByteCount(System.Text.Encoder,System.Char[],System.Boolean)">
            <summary>
            Extends GetByteCount so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            encoder.GetByteCount(chars, flush);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.EncoderExtensions.Encoderable.GetBytes(System.Text.Encoder,System.Char[],System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Extends GetBytes so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            encoder.GetBytes(chars, bytes, byteIndex, flush);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.EncoderExtensions.Encoderable.Convert(System.Text.Encoder,System.Char[],System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            Extends Convert so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            encoder.Convert(chars, bytes, byteIndex, byteCount, flush, charsUsed, bytesUsed, completed);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.EncodingExtensions.Encodingable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Text.Encoding">Encoding</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.EncodingExtensions.Encodingable.GetBytes(System.Text.Encoding,System.Char[],System.Byte[],System.Int32)">
            <summary>
            Extends GetBytes so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            encoding.GetBytes(chars, bytes, byteIndex);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.EncodingExtensions.Encodingable.GetChars(System.Text.Encoding,System.Byte[],System.Char[],System.Int32)">
            <summary>
            Extends GetChars so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            encoding.GetChars(bytes, chars, charIndex);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.EntryWrittenEventHandlerExtensions.EntryWrittenEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Diagnostics.EntryWrittenEventHandler">EntryWrittenEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.EntryWrittenEventHandlerExtensions.EntryWrittenEventHandlerable.BeginInvoke(System.Diagnostics.EntryWrittenEventHandler,System.Object,System.Diagnostics.EntryWrittenEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            entrywritteneventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.EnumConverterExtensions.EnumConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.EnumConverter">EnumConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.EnumConverterExtensions.EnumConverterable.ConvertTo``1(System.ComponentModel.EnumConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            enumconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.EnumConverterExtensions.EnumConverterable.ConvertTo``1(System.ComponentModel.EnumConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ErrorEventHandlerExtensions.ErrorEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.ErrorEventHandler">ErrorEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ErrorEventHandlerExtensions.ErrorEventHandlerable.BeginInvoke(System.IO.ErrorEventHandler,System.Object,System.IO.ErrorEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            erroreventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.EventHandlerExtensions.EventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.EventHandler`1">EventHandler&lt;TEventArgs&gt;</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.EventHandlerExtensions.EventHandlerable.RaiseEvent``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises the event which is represented by the handler specified.
            </summary>
            <typeparam name="T">type of the event args</typeparam>
            <param name="handler">The handler of the event to raise.</param>
            <param name="sender">The sender of the event.</param>
            <param name="arguments">The arguments to pass to the handler.</param>
        </member>
        <member name="M:PRI.ProductivityExtensions.EventHandlerExtensions.EventHandlerable.RaiseEvent(System.ComponentModel.PropertyChangedEventHandler,System.Object,System.String)">
            <summary>
            Raises the PropertyChanged event, if the handler isn't null, otherwise a no-op
            </summary>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:PRI.ProductivityExtensions.EventHandlerExtensions.EventHandlerable.RaiseEvent(System.EventHandler,System.Object)">
            <summary>
            Raises the event on the handler passed in with default empty arguments
            </summary>
            <param name="handler">The handler.</param>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:PRI.ProductivityExtensions.EventHandlerExtensions.EventHandlerable.BeginInvoke``1(System.EventHandler{``0},System.Object,``0,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke&lt;TEventArgs&gt; so that when a state object is not needed, null does not need to be passed.
            <example>
            eventhandler.BeginInvoke&lt;TEventArgs&gt;(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ExpandableObjectConverterExtensions.ExpandableObjectConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.ExpandableObjectConverter">ExpandableObjectConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ExpandableObjectConverterExtensions.ExpandableObjectConverterable.ConvertTo``1(System.ComponentModel.ExpandableObjectConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ExpandableObjectConverterExtensions.ExpandableObjectConverterable.ConvertTo``1(System.ComponentModel.ExpandableObjectConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ExtendedProtectionPolicyTypeConverterExtensions.ExtendedProtectionPolicyTypeConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter">ExtendedProtectionPolicyTypeConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ExtendedProtectionPolicyTypeConverterExtensions.ExtendedProtectionPolicyTypeConverterable.ConvertTo``1(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ExtendedProtectionPolicyTypeConverterExtensions.ExtendedProtectionPolicyTypeConverterable.ConvertTo``1(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            extendedprotectionpolicytypeconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.FileStreamExtensions.FileStreamable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.FileStream">FileStream</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.FileStreamExtensions.FileStreamable.BeginRead(System.IO.FileStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginRead so that when a state object is not needed, null does not need to be passed.
            <example>
            filestream.BeginRead(array, offset, numBytes, userCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.FileStreamExtensions.FileStreamable.BeginRead(System.IO.FileStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            filestream.BeginRead(array, userCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.FileStreamExtensions.FileStreamable.BeginWrite(System.IO.FileStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
            <example>
            filestream.BeginWrite(array, offset, numBytes, userCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.FileStreamExtensions.FileStreamable.BeginWrite(System.IO.FileStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            filestream.BeginWrite(array, userCallback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.FileSystemEventHandlerExtensions.FileSystemEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.FileSystemEventHandler">FileSystemEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.FileSystemEventHandlerExtensions.FileSystemEventHandlerable.BeginInvoke(System.IO.FileSystemEventHandler,System.Object,System.IO.FileSystemEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            filesystemeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.FileWebRequestExtensions.FileWebRequestable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.FileWebRequest">FileWebRequest</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.FileWebRequestExtensions.FileWebRequestable.BeginGetResponse(System.Net.FileWebRequest,System.AsyncCallback)">
            <summary>
            Extends BeginGetResponse so that when a state object is not needed, null does not need to be passed.
            <example>
            filewebrequest.BeginGetResponse(callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.FileWebRequestExtensions.FileWebRequestable.BeginGetRequestStream(System.Net.FileWebRequest,System.AsyncCallback)">
            <summary>
            Extends BeginGetRequestStream so that when a state object is not needed, null does not need to be passed.
            <example>
            filewebrequest.BeginGetRequestStream(callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.FillErrorEventHandlerExtensions.FillErrorEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.FillErrorEventHandler">FillErrorEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.FillErrorEventHandlerExtensions.FillErrorEventHandlerable.BeginInvoke(System.Data.FillErrorEventHandler,System.Object,System.Data.FillErrorEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            fillerroreventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.FontConverterExtensions.FontConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.FontConverter">FontConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.FontConverterExtensions.FontConverterable.ConvertTo``1(System.Drawing.FontConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.FontConverterExtensions.FontConverterable.ConvertTo``1(System.Drawing.FontConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            fontconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.FormatterConverterExtensions.FormatterConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Runtime.Serialization.FormatterConverter">FormatterConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.FormatterConverterExtensions.FormatterConverterable.Convert``1(System.Runtime.Serialization.FormatterConverter,System.Object)">
            <summary>
            Extends Convert so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            formatterconverter.Convert&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.FormClosedEventHandlerExtensions.FormClosedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.FormClosedEventHandler">FormClosedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.FormClosedEventHandlerExtensions.FormClosedEventHandlerable.BeginInvoke(System.Windows.Forms.FormClosedEventHandler,System.Object,System.Windows.Forms.FormClosedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            formclosedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.FormClosingEventHandlerExtensions.FormClosingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.FormClosingEventHandler">FormClosingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.FormClosingEventHandlerExtensions.FormClosingEventHandlerable.BeginInvoke(System.Windows.Forms.FormClosingEventHandler,System.Object,System.Windows.Forms.FormClosingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            formclosingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.FromBase64TransformExtensions.FromBase64Transformable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Security.Cryptography.FromBase64Transform">FromBase64Transform</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.FromBase64TransformExtensions.FromBase64Transformable.TransformBlock(System.Security.Cryptography.FromBase64Transform,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Extends TransformBlock so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            frombase64transform.TransformBlock(inputBuffer, outputBuffer, outputOffset);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.FromBase64TransformExtensions.FromBase64Transformable.TransformFinalBlock(System.Security.Cryptography.FromBase64Transform,System.Byte[])">
            <summary>
            Extends TransformFinalBlock so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            frombase64transform.TransformFinalBlock(inputBuffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.FtpWebRequestExtensions.FtpWebRequestable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.FtpWebRequest">FtpWebRequest</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.FtpWebRequestExtensions.FtpWebRequestable.BeginGetResponse(System.Net.FtpWebRequest,System.AsyncCallback)">
            <summary>
            Extends BeginGetResponse so that when a state object is not needed, null does not need to be passed.
            <example>
            ftpwebrequest.BeginGetResponse(callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.FtpWebRequestExtensions.FtpWebRequestable.BeginGetRequestStream(System.Net.FtpWebRequest,System.AsyncCallback)">
            <summary>
            Extends BeginGetRequestStream so that when a state object is not needed, null does not need to be passed.
            <example>
            ftpwebrequest.BeginGetRequestStream(callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.FuncExtensions.Funcable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Func`17">Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,TResult&gt;</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.FuncExtensions.Funcable.BeginInvoke``17(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult&gt; so that when a state object is not needed, null does not need to be passed.
            <example>
            func.BeginInvoke&lt;T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult&gt;(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.GiveFeedbackEventHandlerExtensions.GiveFeedbackEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.GiveFeedbackEventHandler">GiveFeedbackEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.GiveFeedbackEventHandlerExtensions.GiveFeedbackEventHandlerable.BeginInvoke(System.Windows.Forms.GiveFeedbackEventHandler,System.Object,System.Windows.Forms.GiveFeedbackEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            givefeedbackeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.GuidConverterExtensions.GuidConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.GuidConverter">GuidConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.GuidConverterExtensions.GuidConverterable.ConvertTo``1(System.ComponentModel.GuidConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            guidconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.GuidConverterExtensions.GuidConverterable.ConvertTo``1(System.ComponentModel.GuidConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.GZipStreamExtensions.GZipStreamable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.Compression.GZipStream">GZipStream</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.GZipStreamExtensions.GZipStreamable.BeginRead(System.IO.Compression.GZipStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginRead so that when a state object is not needed, null does not need to be passed.
            <example>
            gzipstream.BeginRead(array, offset, count, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.GZipStreamExtensions.GZipStreamable.BeginRead(System.IO.Compression.GZipStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            gzipstream.BeginRead(array, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.GZipStreamExtensions.GZipStreamable.BeginWrite(System.IO.Compression.GZipStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
            <example>
            gzipstream.BeginWrite(array, offset, count, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.GZipStreamExtensions.GZipStreamable.BeginWrite(System.IO.Compression.GZipStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            gzipstream.BeginWrite(array, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.HandledEventHandlerExtensions.HandledEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.HandledEventHandler">HandledEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.HandledEventHandlerExtensions.HandledEventHandlerable.BeginInvoke(System.ComponentModel.HandledEventHandler,System.Object,System.ComponentModel.HandledEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            handledeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.HashAlgorithmExtensions.HashAlgorithmable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Security.Cryptography.HashAlgorithm">HashAlgorithm</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.HashAlgorithmExtensions.HashAlgorithmable.TransformBlock(System.Security.Cryptography.HashAlgorithm,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Extends TransformBlock so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            hashalgorithm.TransformBlock(inputBuffer, outputBuffer, outputOffset);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.HashAlgorithmExtensions.HashAlgorithmable.TransformFinalBlock(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
            <summary>
            Extends TransformFinalBlock so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            hashalgorithm.TransformFinalBlock(inputBuffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.HeaderHandlerExtensions.HeaderHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Runtime.Remoting.Messaging.HeaderHandler">HeaderHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.HeaderHandlerExtensions.HeaderHandlerable.BeginInvoke(System.Runtime.Remoting.Messaging.HeaderHandler,System.Runtime.Remoting.Messaging.Header[],System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            headerhandler.BeginInvoke(headers, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.HelpEventHandlerExtensions.HelpEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.HelpEventHandler">HelpEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.HelpEventHandlerExtensions.HelpEventHandlerable.BeginInvoke(System.Windows.Forms.HelpEventHandler,System.Object,System.Windows.Forms.HelpEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            helpeventhandler.BeginInvoke(sender, hlpevent, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.HtmlElementErrorEventHandlerExtensions.HtmlElementErrorEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.HtmlElementErrorEventHandler">HtmlElementErrorEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.HtmlElementErrorEventHandlerExtensions.HtmlElementErrorEventHandlerable.BeginInvoke(System.Windows.Forms.HtmlElementErrorEventHandler,System.Object,System.Windows.Forms.HtmlElementErrorEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            htmlelementerroreventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.HtmlElementEventHandlerExtensions.HtmlElementEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.HtmlElementEventHandler">HtmlElementEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.HtmlElementEventHandlerExtensions.HtmlElementEventHandlerable.BeginInvoke(System.Windows.Forms.HtmlElementEventHandler,System.Object,System.Windows.Forms.HtmlElementEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            htmlelementeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.HttpContinueDelegateExtensions.HttpContinueDelegateable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.HttpContinueDelegate">HttpContinueDelegate</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.HttpContinueDelegateExtensions.HttpContinueDelegateable.BeginInvoke(System.Net.HttpContinueDelegate,System.Int32,System.Net.WebHeaderCollection,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            httpcontinuedelegate.BeginInvoke(StatusCode, httpHeaders, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.HttpListenerExtensions.HttpListenerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.HttpListener">HttpListener</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.HttpListenerExtensions.HttpListenerable.BeginGetContext(System.Net.HttpListener,System.AsyncCallback)">
            <summary>
            Extends BeginGetContext so that when a state object is not needed, null does not need to be passed.
            <example>
            httplistener.BeginGetContext(callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.HttpListenerRequestExtensions.HttpListenerRequestable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.HttpListenerRequest">HttpListenerRequest</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.HttpListenerRequestExtensions.HttpListenerRequestable.BeginGetClientCertificate(System.Net.HttpListenerRequest,System.AsyncCallback)">
            <summary>
            Extends BeginGetClientCertificate so that when a state object is not needed, null does not need to be passed.
            <example>
            httplistenerrequest.BeginGetClientCertificate(requestCallback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.HttpWebRequestExtensions.HttpWebRequestable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.HttpWebRequest">HttpWebRequest</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.HttpWebRequestExtensions.HttpWebRequestable.BeginGetRequestStream(System.Net.HttpWebRequest,System.AsyncCallback)">
            <summary>
            Extends BeginGetRequestStream so that when a state object is not needed, null does not need to be passed.
            <example>
            httpwebrequest.BeginGetRequestStream(callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.HttpWebRequestExtensions.HttpWebRequestable.BeginGetResponse(System.Net.HttpWebRequest,System.AsyncCallback)">
            <summary>
            Extends BeginGetResponse so that when a state object is not needed, null does not need to be passed.
            <example>
            httpwebrequest.BeginGetResponse(callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ICollectionableExtensions.ICollectionable.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the passed in list is null or empty.
            </summary>
            <typeparam name="T">the type of the elements in the list to check</typeparam>
            <param name="toCheck">the list to check.</param>
            <returns>true if the passed in list is null or empty, false otherwise</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ICollectionableExtensions.ICollectionable.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the range defined by source to the destination.
            </summary>
            <param name="destination">The destination.</param>
            <param name="source">The source.</param>
        </member>
        <member name="T:PRI.ProductivityExtensions.IComNativeDescriptorHandlerExtensions.IComNativeDescriptorHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.IComNativeDescriptorHandler">IComNativeDescriptorHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.IComNativeDescriptorHandlerExtensions.IComNativeDescriptorHandlerable.GetEditor``1(System.ComponentModel.IComNativeDescriptorHandler,System.Object)">
            <summary>
            Extends GetEditor so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            icomnativedescriptorhandler.GetEditor&lt;int&gt;(component);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.IconConverterExtensions.IconConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.IconConverter">IconConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.IconConverterExtensions.IconConverterable.ConvertTo``1(System.Drawing.IconConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.IconConverterExtensions.IconConverterable.ConvertTo``1(System.Drawing.IconConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            iconconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.IConvertibleExtensions.IConvertibleable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IConvertible">IConvertible</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.IConvertibleExtensions.IConvertibleable.ToType``1(System.IConvertible,System.IFormatProvider)">
            <summary>
            Extends ToType so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            iconvertible.ToType&lt;int&gt;(provider);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ICryptoTransformExtensions.ICryptoTransformable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Security.Cryptography.ICryptoTransform">ICryptoTransform</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ICryptoTransformExtensions.ICryptoTransformable.TransformBlock(System.Security.Cryptography.ICryptoTransform,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Extends TransformBlock so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            icryptotransform.TransformBlock(inputBuffer, outputBuffer, outputOffset);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ICryptoTransformExtensions.ICryptoTransformable.TransformFinalBlock(System.Security.Cryptography.ICryptoTransform,System.Byte[])">
            <summary>
            Extends TransformFinalBlock so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            icryptotransform.TransformFinalBlock(inputBuffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.IDataRecordExtensions.IDataRecordable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.IDataRecord">IDataRecord</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.IDataRecordExtensions.IDataRecordable.GetBytes(System.Data.IDataRecord,System.Int32,System.Int64,System.Byte[])">
            <summary>
            Extends GetBytes so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            idatarecord.GetBytes(i, fieldOffset, buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.IDataRecordExtensions.IDataRecordable.GetChars(System.Data.IDataRecord,System.Int32,System.Int64,System.Char[])">
            <summary>
            Extends GetChars so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            idatarecord.GetChars(i, fieldoffset, buffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.IDbConnectionExtensions.IDbConnectionable">
            <summary>
            class that contains extension methods that extend <seealso cref="T:System.Data.IDbConnection"/>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.IDbConnectionExtensions.IDbConnectionable.SafeClose(System.Data.IDbConnection,System.Boolean)">
            <summary>
            A safe close routine for a database connection, which can also dispose the connection, if required.
            </summary>
            <param name="toClose">the connection to close</param>
            <param name="dispose">if set to true, it will also dispose the connection.</param>
        </member>
        <member name="T:PRI.ProductivityExtensions.IDesignerSerializationManagerExtensions.IDesignerSerializationManagerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">IDesignerSerializationManager</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.IDesignerSerializationManagerExtensions.IDesignerSerializationManagerable.CreateInstance``1(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Collections.ICollection,System.String,System.Boolean)">
            <summary>
            Extends CreateInstance so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            idesignerserializationmanager.CreateInstance&lt;int&gt;(arguments, name, addToContainer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.IDictionaryExtensions.IDictionaryable">
            <summary>
            class that contains extension methods that extend <seealso cref="T:System.Collections.Generic.IDictionary`2"/>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.IDictionaryExtensions.IDictionaryable.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Adds the range specified to the dictionary specified, using the key producer func to produce the key values.
            If the key already exists, the key's value is overwritten with the value to add.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="container">The container.</param>
            <param name="keyProducerFunc">The key producer func.</param>
            <param name="rangeToAdd">The range to add.</param>
        </member>
        <member name="M:PRI.ProductivityExtensions.IDictionaryExtensions.IDictionaryable.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value for the key from the dictionary specified, or null / default(TValue) if key not found or the key is null.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns>the value for the key from the dictionary specified, or null / default(TValue) if key not found or the key is null.</returns>
        </member>
        <member name="T:PRI.ProductivityExtensions.IEnumerableExtensions.IEnumerableable">
            <summary>
            class that contains extension methods that extend <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.IEnumerableExtensions.IEnumerableable.SetEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks whether the enumerable to compare with is equal to the source enumerable, element wise. If elements are in a different order, the
            method will still return true. This is different from SequenceEqual which does take order into account
            </summary>
            <typeparam name="T">type of the element in the sequences to compare</typeparam>
            <param name="source">The source.</param>
            <param name="toCompareWith">the sequence to compare with.</param>
            <returns>true if the source and the sequence to compare with have the same elements, regardless of ordering</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.IEnumerableExtensions.IEnumerableable.SetEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Checks whether the enumerable to compare with is equal to the source enumerable, element wise. If elements are in a different order, the
            method will still return true. This is different from SequenceEqual which does take order into account
            </summary>
            <typeparam name="T">type of the element in the sequences to compare</typeparam>
            <param name="source">The source.</param>
            <param name="toCompareWith">the sequence to compare with.</param>
            <param name="comparer">The comparer.</param>
            <returns>
            true if the source and the sequence to compare with have the same elements, regardless of ordering
            </returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.IEnumerableExtensions.IEnumerableable.Sum``1(System.Collections.Generic.IEnumerable{System.Action{``0}})">
            <summary>
            Create a single multicast delegate from a collection of delegates
            </summary>
            <typeparam name="T">Type of parameter to delegate</typeparam>
            <param name="coll"></param>
            <returns>The collection of delegates</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.IEnumerableExtensions.IEnumerableable.Sum``2(System.Collections.Generic.IEnumerable{System.Func{``0,``1}})">
            <summary>
            Create a single multicast delegate from a collection of delegates
            </summary>
            <typeparam name="T1">Type of parameter to delegate</typeparam>
            <typeparam name="T2">Type of return of the delegate</typeparam>
            <param name="coll">The collection of delegates</param>
            <returns></returns>
        </member>
        <member name="T:PRI.ProductivityExtensions.IFormatterConverterExtensions.IFormatterConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Runtime.Serialization.IFormatterConverter">IFormatterConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.IFormatterConverterExtensions.IFormatterConverterable.Convert``1(System.Runtime.Serialization.IFormatterConverter,System.Object)">
            <summary>
            Extends Convert so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            iformatterconverter.Convert&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.IListExtensions.IListable">
            <summary>
            class that contains extension methods that extend <seealso cref="T:System.Collections.Generic.IList`1"/>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.IListExtensions.IListable.SwapValues``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Swaps the values at indexA and indexB.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="indexA">The index for A.</param>
            <param name="indexB">The index for B.</param>
        </member>
        <member name="M:PRI.ProductivityExtensions.IListExtensions.IListable.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Searches for the element specified in the sorted list specified using binary search http://en.wikipedia.org/wiki/Binary_search. The algorithm
            is re-implemented here to be able to search in any sorted IList implementing data structure (.NET's BCL only implements BinarySearch on arrays and
            List(Of T). If no IComparer(Of T) is available, try using Algorithmia's ComparisonBasedComparer,
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sortedList">The sorted list.</param>
            <param name="element">The element.</param>
            <param name="comparer">The comparer.</param>
            <returns>The index of the element searched or the bitwise complement of the index of the next element that is larger than
            <i>element</i> or if there is no larger element the bitwise complement of Count. Bitwise complements have their original bits negated. Use
            the '~' operator in C# to get the real value. Bitwise complements are used to avoid returning a value which is in the range of valid indices so
            callers can't check whether the value returned is an index or if the element wasn't found. If the value returned is negative, the bitwise complement
            can be used as index to insert the element in the sorted list to keep the list sorted</returns>
            <remarks>Assumes that sortedList is sorted ascending. If you pass in a descending sorted list, be sure the comparer is adjusted as well.</remarks>
        </member>
        <member name="T:PRI.ProductivityExtensions.ImageConverterExtensions.ImageConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.ImageConverter">ImageConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ImageConverterExtensions.ImageConverterable.ConvertTo``1(System.Drawing.ImageConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ImageConverterExtensions.ImageConverterable.ConvertTo``1(System.Drawing.ImageConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            imageconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ImageFormatConverterExtensions.ImageFormatConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.ImageFormatConverter">ImageFormatConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ImageFormatConverterExtensions.ImageFormatConverterable.ConvertTo``1(System.Drawing.ImageFormatConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ImageFormatConverterExtensions.ImageFormatConverterable.ConvertTo``1(System.Drawing.ImageFormatConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            imageformatconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ImageIndexConverterExtensions.ImageIndexConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ImageIndexConverter">ImageIndexConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ImageIndexConverterExtensions.ImageIndexConverterable.ConvertTo``1(System.Windows.Forms.ImageIndexConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ImageIndexConverterExtensions.ImageIndexConverterable.ConvertTo``1(System.Windows.Forms.ImageIndexConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            imageindexconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ImageKeyConverterExtensions.ImageKeyConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ImageKeyConverter">ImageKeyConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ImageKeyConverterExtensions.ImageKeyConverterable.ConvertTo``1(System.Windows.Forms.ImageKeyConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ImageKeyConverterExtensions.ImageKeyConverterable.ConvertTo``1(System.Windows.Forms.ImageKeyConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            imagekeyconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.InputLanguageChangedEventHandlerExtensions.InputLanguageChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.InputLanguageChangedEventHandler">InputLanguageChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.InputLanguageChangedEventHandlerExtensions.InputLanguageChangedEventHandlerable.BeginInvoke(System.Windows.Forms.InputLanguageChangedEventHandler,System.Object,System.Windows.Forms.InputLanguageChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            inputlanguagechangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.InputLanguageChangingEventHandlerExtensions.InputLanguageChangingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.InputLanguageChangingEventHandler">InputLanguageChangingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.InputLanguageChangingEventHandlerExtensions.InputLanguageChangingEventHandlerable.BeginInvoke(System.Windows.Forms.InputLanguageChangingEventHandler,System.Object,System.Windows.Forms.InputLanguageChangingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            inputlanguagechangingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.InstanceCreationEditorExtensions.InstanceCreationEditorable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.InstanceCreationEditor">InstanceCreationEditor</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.InstanceCreationEditorExtensions.InstanceCreationEditorable.CreateInstance``1(System.ComponentModel.InstanceCreationEditor,System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Extends CreateInstance so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            instancecreationeditor.CreateInstance&lt;int&gt;(context);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.Int16ConverterExtensions.Int16Converterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.Int16Converter">Int16Converter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.Int16ConverterExtensions.Int16Converterable.ConvertTo``1(System.ComponentModel.Int16Converter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            basenumberconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.Int16ConverterExtensions.Int16Converterable.ConvertTo``1(System.ComponentModel.Int16Converter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.Int32ConverterExtensions.Int32Converterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.Int32Converter">Int32Converter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.Int32ConverterExtensions.Int32Converterable.ConvertTo``1(System.ComponentModel.Int32Converter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            basenumberconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.Int32ConverterExtensions.Int32Converterable.ConvertTo``1(System.ComponentModel.Int32Converter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.Int64ConverterExtensions.Int64Converterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.Int64Converter">Int64Converter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.Int64ConverterExtensions.Int64Converterable.ConvertTo``1(System.ComponentModel.Int64Converter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            basenumberconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.Int64ConverterExtensions.Int64Converterable.ConvertTo``1(System.ComponentModel.Int64Converter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.InvalidateEventHandlerExtensions.InvalidateEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.InvalidateEventHandler">InvalidateEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.InvalidateEventHandlerExtensions.InvalidateEventHandlerable.BeginInvoke(System.Windows.Forms.InvalidateEventHandler,System.Object,System.Windows.Forms.InvalidateEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            invalidateeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.IOCompletionCallbackExtensions.IOCompletionCallbackable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Threading.IOCompletionCallback">IOCompletionCallback</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.IOCompletionCallbackExtensions.IOCompletionCallbackable.BeginInvoke(System.Threading.IOCompletionCallback,System.UInt32,System.UInt32,System.Threading.NativeOverlapped*,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            iocompletioncallback.BeginInvoke(errorCode, numBytes, pOVERLAP, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.IpAddressExtensions.IpAddressable">
            <summary>
            class that contains extension methods that extend <seealso cref="T:System.Net.IPAddress"/>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.IpAddressExtensions.IpAddressable.IsIPv4LinkLocal(System.Net.IPAddress)">
            <summary>
            Checks if an <see cref="T:System.Net.IPAddress"/> is IPv4 link local or not
            </summary>
            <param name="ipAddress">IPAddress to check</param>
            <returns>true if IP address is an IPv4 link local address</returns>
        </member>
        <member name="T:PRI.ProductivityExtensions.IPGlobalPropertiesExtensions.IPGlobalPropertiesable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.NetworkInformation.IPGlobalProperties">IPGlobalProperties</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.IPGlobalPropertiesExtensions.IPGlobalPropertiesable.BeginGetUnicastAddresses(System.Net.NetworkInformation.IPGlobalProperties,System.AsyncCallback)">
            <summary>
            Extends BeginGetUnicastAddresses so that when a state object is not needed, null does not need to be passed.
            <example>
            ipglobalproperties.BeginGetUnicastAddresses(callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.IsolatedStorageFileStreamExtensions.IsolatedStorageFileStreamable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.IsolatedStorage.IsolatedStorageFileStream">IsolatedStorageFileStream</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.IsolatedStorageFileStreamExtensions.IsolatedStorageFileStreamable.BeginRead(System.IO.IsolatedStorage.IsolatedStorageFileStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginRead so that when a state object is not needed, null does not need to be passed.
            <example>
            isolatedstoragefilestream.BeginRead(buffer, offset, numBytes, userCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.IsolatedStorageFileStreamExtensions.IsolatedStorageFileStreamable.BeginRead(System.IO.IsolatedStorage.IsolatedStorageFileStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            isolatedstoragefilestream.BeginRead(buffer, userCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.IsolatedStorageFileStreamExtensions.IsolatedStorageFileStreamable.BeginWrite(System.IO.IsolatedStorage.IsolatedStorageFileStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
            <example>
            isolatedstoragefilestream.BeginWrite(buffer, offset, numBytes, userCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.IsolatedStorageFileStreamExtensions.IsolatedStorageFileStreamable.BeginWrite(System.IO.IsolatedStorage.IsolatedStorageFileStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            isolatedstoragefilestream.BeginWrite(buffer, userCallback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ItemChangedEventHandlerExtensions.ItemChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ItemChangedEventHandler">ItemChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ItemChangedEventHandlerExtensions.ItemChangedEventHandlerable.BeginInvoke(System.Windows.Forms.ItemChangedEventHandler,System.Object,System.Windows.Forms.ItemChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            itemchangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ItemCheckedEventHandlerExtensions.ItemCheckedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ItemCheckedEventHandler">ItemCheckedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ItemCheckedEventHandlerExtensions.ItemCheckedEventHandlerable.BeginInvoke(System.Windows.Forms.ItemCheckedEventHandler,System.Object,System.Windows.Forms.ItemCheckedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            itemcheckedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ItemCheckEventHandlerExtensions.ItemCheckEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ItemCheckEventHandler">ItemCheckEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ItemCheckEventHandlerExtensions.ItemCheckEventHandlerable.BeginInvoke(System.Windows.Forms.ItemCheckEventHandler,System.Object,System.Windows.Forms.ItemCheckEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            itemcheckeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ItemDragEventHandlerExtensions.ItemDragEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ItemDragEventHandler">ItemDragEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ItemDragEventHandlerExtensions.ItemDragEventHandlerable.BeginInvoke(System.Windows.Forms.ItemDragEventHandler,System.Object,System.Windows.Forms.ItemDragEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            itemdrageventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.KeyEventHandlerExtensions.KeyEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.KeyEventHandler">KeyEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.KeyEventHandlerExtensions.KeyEventHandlerable.BeginInvoke(System.Windows.Forms.KeyEventHandler,System.Object,System.Windows.Forms.KeyEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            keyeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.KeyPressEventHandlerExtensions.KeyPressEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.KeyPressEventHandler">KeyPressEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.KeyPressEventHandlerExtensions.KeyPressEventHandlerable.BeginInvoke(System.Windows.Forms.KeyPressEventHandler,System.Object,System.Windows.Forms.KeyPressEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            keypresseventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.KeysConverterExtensions.KeysConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.KeysConverter">KeysConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.KeysConverterExtensions.KeysConverterable.ConvertTo``1(System.Windows.Forms.KeysConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.KeysConverterExtensions.KeysConverterable.ConvertTo``1(System.Windows.Forms.KeysConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            keysconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.LabelEditEventHandlerExtensions.LabelEditEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.LabelEditEventHandler">LabelEditEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.LabelEditEventHandlerExtensions.LabelEditEventHandlerable.BeginInvoke(System.Windows.Forms.LabelEditEventHandler,System.Object,System.Windows.Forms.LabelEditEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            labelediteventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.LayoutEventHandlerExtensions.LayoutEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.LayoutEventHandler">LayoutEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.LayoutEventHandlerExtensions.LayoutEventHandlerable.BeginInvoke(System.Windows.Forms.LayoutEventHandler,System.Object,System.Windows.Forms.LayoutEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            layouteventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.LinkClickedEventHandlerExtensions.LinkClickedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.LinkClickedEventHandler">LinkClickedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.LinkClickedEventHandlerExtensions.LinkClickedEventHandlerable.BeginInvoke(System.Windows.Forms.LinkClickedEventHandler,System.Object,System.Windows.Forms.LinkClickedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            linkclickedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.LinkConverterExtensions.LinkConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.LinkConverter">LinkConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.LinkConverterExtensions.LinkConverterable.ConvertTo``1(System.Windows.Forms.LinkConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.LinkConverterExtensions.LinkConverterable.ConvertTo``1(System.Windows.Forms.LinkConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            linkconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.LinkLabelLinkClickedEventHandlerExtensions.LinkLabelLinkClickedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.LinkLabelLinkClickedEventHandler">LinkLabelLinkClickedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.LinkLabelLinkClickedEventHandlerExtensions.LinkLabelLinkClickedEventHandlerable.BeginInvoke(System.Windows.Forms.LinkLabelLinkClickedEventHandler,System.Object,System.Windows.Forms.LinkLabelLinkClickedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            linklabellinkclickedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ListBindingConverterExtensions.ListBindingConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ListBindingConverter">ListBindingConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ListBindingConverterExtensions.ListBindingConverterable.ConvertTo``1(System.Windows.Forms.ListBindingConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ListBindingConverterExtensions.ListBindingConverterable.ConvertTo``1(System.Windows.Forms.ListBindingConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            listbindingconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ListChangedEventHandlerExtensions.ListChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.ListChangedEventHandler">ListChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ListChangedEventHandlerExtensions.ListChangedEventHandlerable.BeginInvoke(System.ComponentModel.ListChangedEventHandler,System.Object,System.ComponentModel.ListChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            listchangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ListControlConvertEventHandlerExtensions.ListControlConvertEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ListControlConvertEventHandler">ListControlConvertEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ListControlConvertEventHandlerExtensions.ListControlConvertEventHandlerable.BeginInvoke(System.Windows.Forms.ListControlConvertEventHandler,System.Object,System.Windows.Forms.ListControlConvertEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            listcontrolconverteventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ListExtensions.Listable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Collections.Generic.List`1">List&lt;T&gt;</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ListExtensions.Listable.CopyTo``1(System.Collections.Generic.List{``0},System.Int32,``0[])">
            <summary>
            Extends CopyTo&lt;T&gt; so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            list.CopyTo&lt;T&gt;(index, array);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ListViewItemConverterExtensions.ListViewItemConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ListViewItemConverter">ListViewItemConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ListViewItemConverterExtensions.ListViewItemConverterable.ConvertTo``1(System.Windows.Forms.ListViewItemConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ListViewItemConverterExtensions.ListViewItemConverterable.ConvertTo``1(System.Windows.Forms.ListViewItemConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            listviewitemconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ListViewItemMouseHoverEventHandlerExtensions.ListViewItemMouseHoverEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ListViewItemMouseHoverEventHandler">ListViewItemMouseHoverEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ListViewItemMouseHoverEventHandlerExtensions.ListViewItemMouseHoverEventHandlerable.BeginInvoke(System.Windows.Forms.ListViewItemMouseHoverEventHandler,System.Object,System.Windows.Forms.ListViewItemMouseHoverEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            listviewitemmousehovereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ListViewItemSelectionChangedEventHandlerExtensions.ListViewItemSelectionChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ListViewItemSelectionChangedEventHandler">ListViewItemSelectionChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ListViewItemSelectionChangedEventHandlerExtensions.ListViewItemSelectionChangedEventHandlerable.BeginInvoke(System.Windows.Forms.ListViewItemSelectionChangedEventHandler,System.Object,System.Windows.Forms.ListViewItemSelectionChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            listviewitemselectionchangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ListViewVirtualItemsSelectionRangeChangedEventHandlerExtensions.ListViewVirtualItemsSelectionRangeChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler">ListViewVirtualItemsSelectionRangeChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ListViewVirtualItemsSelectionRangeChangedEventHandlerExtensions.ListViewVirtualItemsSelectionRangeChangedEventHandlerable.BeginInvoke(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler,System.Object,System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            listviewvirtualitemsselectionrangechangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.LocalCertificateSelectionCallbackExtensions.LocalCertificateSelectionCallbackable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.Security.LocalCertificateSelectionCallback">LocalCertificateSelectionCallback</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.LocalCertificateSelectionCallbackExtensions.LocalCertificateSelectionCallbackable.BeginInvoke(System.Net.Security.LocalCertificateSelectionCallback,System.Object,System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Cryptography.X509Certificates.X509Certificate,System.String[],System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            localcertificateselectioncallback.BeginInvoke(sender, targetHost, localCertificates, remoteCertificate, acceptableIssuers, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.MarginsConverterExtensions.MarginsConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.Printing.MarginsConverter">MarginsConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MarginsConverterExtensions.MarginsConverterable.ConvertTo``1(System.Drawing.Printing.MarginsConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MarginsConverterExtensions.MarginsConverterable.ConvertTo``1(System.Drawing.Printing.MarginsConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            marginsconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.MaskInputRejectedEventHandlerExtensions.MaskInputRejectedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.MaskInputRejectedEventHandler">MaskInputRejectedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MaskInputRejectedEventHandlerExtensions.MaskInputRejectedEventHandlerable.BeginInvoke(System.Windows.Forms.MaskInputRejectedEventHandler,System.Object,System.Windows.Forms.MaskInputRejectedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            maskinputrejectedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.MatchEvaluatorExtensions.MatchEvaluatorable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Text.RegularExpressions.MatchEvaluator">MatchEvaluator</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MatchEvaluatorExtensions.MatchEvaluatorable.BeginInvoke(System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.Match,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            matchevaluator.BeginInvoke(match, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.MeasureItemEventHandlerExtensions.MeasureItemEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.MeasureItemEventHandler">MeasureItemEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MeasureItemEventHandlerExtensions.MeasureItemEventHandlerable.BeginInvoke(System.Windows.Forms.MeasureItemEventHandler,System.Object,System.Windows.Forms.MeasureItemEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            measureitemeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.MemberFilterExtensions.MemberFilterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Reflection.MemberFilter">MemberFilter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MemberFilterExtensions.MemberFilterable.BeginInvoke(System.Reflection.MemberFilter,System.Reflection.MemberInfo,System.Object,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            memberfilter.BeginInvoke(m, filterCriteria, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.MemoryMappedViewStreamExtensions.MemoryMappedViewStreamable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewStream">MemoryMappedViewStream</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MemoryMappedViewStreamExtensions.MemoryMappedViewStreamable.BeginRead(System.IO.MemoryMappedFiles.MemoryMappedViewStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginRead so that when a state object is not needed, null does not need to be passed.
            <example>
            stream.BeginRead(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MemoryMappedViewStreamExtensions.MemoryMappedViewStreamable.BeginRead(System.IO.MemoryMappedFiles.MemoryMappedViewStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.BeginRead(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MemoryMappedViewStreamExtensions.MemoryMappedViewStreamable.BeginWrite(System.IO.MemoryMappedFiles.MemoryMappedViewStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
            <example>
            stream.BeginWrite(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MemoryMappedViewStreamExtensions.MemoryMappedViewStreamable.BeginWrite(System.IO.MemoryMappedFiles.MemoryMappedViewStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.BeginWrite(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.MemoryStreamExtensions.MemoryStreamable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.MemoryStream">MemoryStream</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MemoryStreamExtensions.MemoryStreamable.BeginRead(System.IO.MemoryStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginRead so that when a state object is not needed, null does not need to be passed.
            <example>
            stream.BeginRead(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MemoryStreamExtensions.MemoryStreamable.BeginRead(System.IO.MemoryStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.BeginRead(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MemoryStreamExtensions.MemoryStreamable.BeginWrite(System.IO.MemoryStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
            <example>
            stream.BeginWrite(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MemoryStreamExtensions.MemoryStreamable.BeginWrite(System.IO.MemoryStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.BeginWrite(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.MergeFailedEventHandlerExtensions.MergeFailedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.MergeFailedEventHandler">MergeFailedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MergeFailedEventHandlerExtensions.MergeFailedEventHandlerable.BeginInvoke(System.Data.MergeFailedEventHandler,System.Object,System.Data.MergeFailedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            mergefailedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.MessageSurrogateFilterExtensions.MessageSurrogateFilterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Runtime.Remoting.Messaging.MessageSurrogateFilter">MessageSurrogateFilter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MessageSurrogateFilterExtensions.MessageSurrogateFilterable.BeginInvoke(System.Runtime.Remoting.Messaging.MessageSurrogateFilter,System.String,System.Object,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            messagesurrogatefilter.BeginInvoke(key, value, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.MethodInvokerExtensions.MethodInvokerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.MethodInvoker">MethodInvoker</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MethodInvokerExtensions.MethodInvokerable.BeginInvoke(System.Windows.Forms.MethodInvoker,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            methodinvoker.BeginInvoke(callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ModuleResolveEventHandlerExtensions.ModuleResolveEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Reflection.ModuleResolveEventHandler">ModuleResolveEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ModuleResolveEventHandlerExtensions.ModuleResolveEventHandlerable.BeginInvoke(System.Reflection.ModuleResolveEventHandler,System.Object,System.ResolveEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            moduleresolveeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.MouseEventHandlerExtensions.MouseEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.MouseEventHandler">MouseEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MouseEventHandlerExtensions.MouseEventHandlerable.BeginInvoke(System.Windows.Forms.MouseEventHandler,System.Object,System.Windows.Forms.MouseEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            mouseeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.MultilineStringConverterExtensions.MultilineStringConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.MultilineStringConverter">MultilineStringConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MultilineStringConverterExtensions.MultilineStringConverterable.ConvertTo``1(System.ComponentModel.MultilineStringConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            multilinestringconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.MultilineStringConverterExtensions.MultilineStringConverterable.ConvertTo``1(System.ComponentModel.MultilineStringConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.NamedPipeClientStreamExtensions.NamedPipeClientStreamable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.Pipes.NamedPipeClientStream">NamedPipeClientStream</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NamedPipeClientStreamExtensions.NamedPipeClientStreamable.BeginRead(System.IO.Pipes.NamedPipeClientStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginRead so that when a state object is not needed, null does not need to be passed.
            <example>
            pipestream.BeginRead(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NamedPipeClientStreamExtensions.NamedPipeClientStreamable.BeginRead(System.IO.Pipes.NamedPipeClientStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            pipestream.BeginRead(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NamedPipeClientStreamExtensions.NamedPipeClientStreamable.BeginWrite(System.IO.Pipes.NamedPipeClientStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
            <example>
            pipestream.BeginWrite(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NamedPipeClientStreamExtensions.NamedPipeClientStreamable.BeginWrite(System.IO.Pipes.NamedPipeClientStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            pipestream.BeginWrite(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.NamedPipeServerStreamExtensions.NamedPipeServerStreamable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.Pipes.NamedPipeServerStream">NamedPipeServerStream</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NamedPipeServerStreamExtensions.NamedPipeServerStreamable.BeginWaitForConnection(System.IO.Pipes.NamedPipeServerStream,System.AsyncCallback)">
            <summary>
            Extends BeginWaitForConnection so that when a state object is not needed, null does not need to be passed.
            <example>
            namedpipeserverstream.BeginWaitForConnection(callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NamedPipeServerStreamExtensions.NamedPipeServerStreamable.BeginRead(System.IO.Pipes.NamedPipeServerStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginRead so that when a state object is not needed, null does not need to be passed.
            <example>
            pipestream.BeginRead(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NamedPipeServerStreamExtensions.NamedPipeServerStreamable.BeginRead(System.IO.Pipes.NamedPipeServerStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            pipestream.BeginRead(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NamedPipeServerStreamExtensions.NamedPipeServerStreamable.BeginWrite(System.IO.Pipes.NamedPipeServerStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
            <example>
            pipestream.BeginWrite(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NamedPipeServerStreamExtensions.NamedPipeServerStreamable.BeginWrite(System.IO.Pipes.NamedPipeServerStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            pipestream.BeginWrite(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.NavigateEventHandlerExtensions.NavigateEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.NavigateEventHandler">NavigateEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NavigateEventHandlerExtensions.NavigateEventHandlerable.BeginInvoke(System.Windows.Forms.NavigateEventHandler,System.Object,System.Windows.Forms.NavigateEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            navigateeventhandler.BeginInvoke(sender, ne, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.NegotiateStreamExtensions.NegotiateStreamable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.Security.NegotiateStream">NegotiateStream</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NegotiateStreamExtensions.NegotiateStreamable.BeginAuthenticateAsClient(System.Net.Security.NegotiateStream,System.AsyncCallback)">
            <summary>
            Extends BeginAuthenticateAsClient so that when a state object is not needed, null does not need to be passed.
            <example>
            negotiatestream.BeginAuthenticateAsClient(asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NegotiateStreamExtensions.NegotiateStreamable.BeginAuthenticateAsClient(System.Net.Security.NegotiateStream,System.Net.NetworkCredential,System.String,System.AsyncCallback)">
            <summary>
            Extends BeginAuthenticateAsClient so that when a state object is not needed, null does not need to be passed.
            <example>
            negotiatestream.BeginAuthenticateAsClient(credential, targetName, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NegotiateStreamExtensions.NegotiateStreamable.BeginAuthenticateAsClient(System.Net.Security.NegotiateStream,System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback)">
            <summary>
            Extends BeginAuthenticateAsClient so that when a state object is not needed, null does not need to be passed.
            <example>
            negotiatestream.BeginAuthenticateAsClient(credential, binding, targetName, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NegotiateStreamExtensions.NegotiateStreamable.BeginAuthenticateAsClient(System.Net.Security.NegotiateStream,System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback)">
            <summary>
            Extends BeginAuthenticateAsClient so that when a state object is not needed, null does not need to be passed.
            <example>
            negotiatestream.BeginAuthenticateAsClient(credential, targetName, requiredProtectionLevel, allowedImpersonationLevel, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NegotiateStreamExtensions.NegotiateStreamable.BeginAuthenticateAsClient(System.Net.Security.NegotiateStream,System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback)">
            <summary>
            Extends BeginAuthenticateAsClient so that when a state object is not needed, null does not need to be passed.
            <example>
            negotiatestream.BeginAuthenticateAsClient(credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NegotiateStreamExtensions.NegotiateStreamable.BeginAuthenticateAsServer(System.Net.Security.NegotiateStream,System.AsyncCallback)">
            <summary>
            Extends BeginAuthenticateAsServer so that when a state object is not needed, null does not need to be passed.
            <example>
            negotiatestream.BeginAuthenticateAsServer(asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NegotiateStreamExtensions.NegotiateStreamable.BeginAuthenticateAsServer(System.Net.Security.NegotiateStream,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback)">
            <summary>
            Extends BeginAuthenticateAsServer so that when a state object is not needed, null does not need to be passed.
            <example>
            negotiatestream.BeginAuthenticateAsServer(policy, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NegotiateStreamExtensions.NegotiateStreamable.BeginAuthenticateAsServer(System.Net.Security.NegotiateStream,System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback)">
            <summary>
            Extends BeginAuthenticateAsServer so that when a state object is not needed, null does not need to be passed.
            <example>
            negotiatestream.BeginAuthenticateAsServer(credential, requiredProtectionLevel, requiredImpersonationLevel, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NegotiateStreamExtensions.NegotiateStreamable.BeginAuthenticateAsServer(System.Net.Security.NegotiateStream,System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback)">
            <summary>
            Extends BeginAuthenticateAsServer so that when a state object is not needed, null does not need to be passed.
            <example>
            negotiatestream.BeginAuthenticateAsServer(credential, policy, requiredProtectionLevel, requiredImpersonationLevel, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NegotiateStreamExtensions.NegotiateStreamable.BeginRead(System.Net.Security.NegotiateStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginRead so that when a state object is not needed, null does not need to be passed.
            <example>
            negotiatestream.BeginRead(buffer, offset, count, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NegotiateStreamExtensions.NegotiateStreamable.BeginRead(System.Net.Security.NegotiateStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            negotiatestream.BeginRead(buffer, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NegotiateStreamExtensions.NegotiateStreamable.BeginWrite(System.Net.Security.NegotiateStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
            <example>
            negotiatestream.BeginWrite(buffer, offset, count, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NegotiateStreamExtensions.NegotiateStreamable.BeginWrite(System.Net.Security.NegotiateStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            negotiatestream.BeginWrite(buffer, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.NetworkAddressChangedEventHandlerExtensions.NetworkAddressChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.NetworkInformation.NetworkAddressChangedEventHandler">NetworkAddressChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NetworkAddressChangedEventHandlerExtensions.NetworkAddressChangedEventHandlerable.BeginInvoke(System.Net.NetworkInformation.NetworkAddressChangedEventHandler,System.Object,System.EventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            networkaddresschangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.NetworkAvailabilityChangedEventHandlerExtensions.NetworkAvailabilityChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler">NetworkAvailabilityChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NetworkAvailabilityChangedEventHandlerExtensions.NetworkAvailabilityChangedEventHandlerable.BeginInvoke(System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler,System.Object,System.Net.NetworkInformation.NetworkAvailabilityEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            networkavailabilitychangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.NetworkStreamExtensions.NetworkStreamable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.Sockets.NetworkStream">NetworkStream</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NetworkStreamExtensions.NetworkStreamable.BeginRead(System.Net.Sockets.NetworkStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginRead so that when a state object is not needed, null does not need to be passed.
            <example>
            networkstream.BeginRead(buffer, offset, size, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NetworkStreamExtensions.NetworkStreamable.BeginRead(System.Net.Sockets.NetworkStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            networkstream.BeginRead(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NetworkStreamExtensions.NetworkStreamable.BeginWrite(System.Net.Sockets.NetworkStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
            <example>
            networkstream.BeginWrite(buffer, offset, size, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NetworkStreamExtensions.NetworkStreamable.BeginWrite(System.Net.Sockets.NetworkStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            networkstream.BeginWrite(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.NodeLabelEditEventHandlerExtensions.NodeLabelEditEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.NodeLabelEditEventHandler">NodeLabelEditEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NodeLabelEditEventHandlerExtensions.NodeLabelEditEventHandlerable.BeginInvoke(System.Windows.Forms.NodeLabelEditEventHandler,System.Object,System.Windows.Forms.NodeLabelEditEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            nodelabelediteventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.NotifyCollectionChangedEventHandlerExtensions.NotifyCollectionChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Collections.Specialized.NotifyCollectionChangedEventHandler">NotifyCollectionChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NotifyCollectionChangedEventHandlerExtensions.NotifyCollectionChangedEventHandlerable.BeginInvoke(System.Collections.Specialized.NotifyCollectionChangedEventHandler,System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            notifycollectionchangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.NullableConverterExtensions.NullableConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.NullableConverter">NullableConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NullableConverterExtensions.NullableConverterable.ConvertTo``1(System.ComponentModel.NullableConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            nullableconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.NullableConverterExtensions.NullableConverterable.ConvertTo``1(System.ComponentModel.NullableConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ObjectCreationDelegateExtensions.ObjectCreationDelegateable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Runtime.InteropServices.ObjectCreationDelegate">ObjectCreationDelegate</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ObjectCreationDelegateExtensions.ObjectCreationDelegateable.BeginInvoke(System.Runtime.InteropServices.ObjectCreationDelegate,System.IntPtr,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            objectcreationdelegate.BeginInvoke(aggregator, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.OdbcInfoMessageEventHandlerExtensions.OdbcInfoMessageEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.Odbc.OdbcInfoMessageEventHandler">OdbcInfoMessageEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.OdbcInfoMessageEventHandlerExtensions.OdbcInfoMessageEventHandlerable.BeginInvoke(System.Data.Odbc.OdbcInfoMessageEventHandler,System.Object,System.Data.Odbc.OdbcInfoMessageEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            odbcinfomessageeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.OdbcRowUpdatedEventHandlerExtensions.OdbcRowUpdatedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.Odbc.OdbcRowUpdatedEventHandler">OdbcRowUpdatedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.OdbcRowUpdatedEventHandlerExtensions.OdbcRowUpdatedEventHandlerable.BeginInvoke(System.Data.Odbc.OdbcRowUpdatedEventHandler,System.Object,System.Data.Odbc.OdbcRowUpdatedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            odbcrowupdatedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.OdbcRowUpdatingEventHandlerExtensions.OdbcRowUpdatingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.Odbc.OdbcRowUpdatingEventHandler">OdbcRowUpdatingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.OdbcRowUpdatingEventHandlerExtensions.OdbcRowUpdatingEventHandlerable.BeginInvoke(System.Data.Odbc.OdbcRowUpdatingEventHandler,System.Object,System.Data.Odbc.OdbcRowUpdatingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            odbcrowupdatingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.OleDbInfoMessageEventHandlerExtensions.OleDbInfoMessageEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.OleDb.OleDbInfoMessageEventHandler">OleDbInfoMessageEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.OleDbInfoMessageEventHandlerExtensions.OleDbInfoMessageEventHandlerable.BeginInvoke(System.Data.OleDb.OleDbInfoMessageEventHandler,System.Object,System.Data.OleDb.OleDbInfoMessageEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            oledbinfomessageeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.OleDbRowUpdatedEventHandlerExtensions.OleDbRowUpdatedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.OleDb.OleDbRowUpdatedEventHandler">OleDbRowUpdatedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.OleDbRowUpdatedEventHandlerExtensions.OleDbRowUpdatedEventHandlerable.BeginInvoke(System.Data.OleDb.OleDbRowUpdatedEventHandler,System.Object,System.Data.OleDb.OleDbRowUpdatedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            oledbrowupdatedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.OleDbRowUpdatingEventHandlerExtensions.OleDbRowUpdatingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.OleDb.OleDbRowUpdatingEventHandler">OleDbRowUpdatingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.OleDbRowUpdatingEventHandlerExtensions.OleDbRowUpdatingEventHandlerable.BeginInvoke(System.Data.OleDb.OleDbRowUpdatingEventHandler,System.Object,System.Data.OleDb.OleDbRowUpdatingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            oledbrowupdatingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.OnChangeEventHandlerExtensions.OnChangeEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.SqlClient.OnChangeEventHandler">OnChangeEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.OnChangeEventHandlerExtensions.OnChangeEventHandlerable.BeginInvoke(System.Data.SqlClient.OnChangeEventHandler,System.Object,System.Data.SqlClient.SqlNotificationEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            onchangeeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.OpacityConverterExtensions.OpacityConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.OpacityConverter">OpacityConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.OpacityConverterExtensions.OpacityConverterable.ConvertTo``1(System.Windows.Forms.OpacityConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.OpacityConverterExtensions.OpacityConverterable.ConvertTo``1(System.Windows.Forms.OpacityConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            opacityconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.OpenReadCompletedEventHandlerExtensions.OpenReadCompletedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.OpenReadCompletedEventHandler">OpenReadCompletedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.OpenReadCompletedEventHandlerExtensions.OpenReadCompletedEventHandlerable.BeginInvoke(System.Net.OpenReadCompletedEventHandler,System.Object,System.Net.OpenReadCompletedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            openreadcompletedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.OpenWriteCompletedEventHandlerExtensions.OpenWriteCompletedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.OpenWriteCompletedEventHandler">OpenWriteCompletedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.OpenWriteCompletedEventHandlerExtensions.OpenWriteCompletedEventHandlerable.BeginInvoke(System.Net.OpenWriteCompletedEventHandler,System.Object,System.Net.OpenWriteCompletedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            openwritecompletedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PaddingConverterExtensions.PaddingConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.PaddingConverter">PaddingConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PaddingConverterExtensions.PaddingConverterable.ConvertTo``1(System.Windows.Forms.PaddingConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PaddingConverterExtensions.PaddingConverterable.ConvertTo``1(System.Windows.Forms.PaddingConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            paddingconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PaintEventHandlerExtensions.PaintEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.PaintEventHandler">PaintEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PaintEventHandlerExtensions.PaintEventHandlerable.BeginInvoke(System.Windows.Forms.PaintEventHandler,System.Object,System.Windows.Forms.PaintEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            painteventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ParameterizedThreadStartExtensions.ParameterizedThreadStartable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Threading.ParameterizedThreadStart">ParameterizedThreadStart</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ParameterizedThreadStartExtensions.ParameterizedThreadStartable.BeginInvoke(System.Threading.ParameterizedThreadStart,System.Object,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            parameterizedthreadstart.BeginInvoke(obj, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PingCompletedEventHandlerExtensions.PingCompletedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.NetworkInformation.PingCompletedEventHandler">PingCompletedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PingCompletedEventHandlerExtensions.PingCompletedEventHandlerable.BeginInvoke(System.Net.NetworkInformation.PingCompletedEventHandler,System.Object,System.Net.NetworkInformation.PingCompletedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            pingcompletedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PipeStreamExtensions.PipeStreamable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.Pipes.PipeStream">PipeStream</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PipeStreamExtensions.PipeStreamable.BeginRead(System.IO.Pipes.PipeStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginRead so that when a state object is not needed, null does not need to be passed.
            <example>
            pipestream.BeginRead(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PipeStreamExtensions.PipeStreamable.BeginRead(System.IO.Pipes.PipeStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            pipestream.BeginRead(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PipeStreamExtensions.PipeStreamable.BeginWrite(System.IO.Pipes.PipeStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
            <example>
            pipestream.BeginWrite(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PipeStreamExtensions.PipeStreamable.BeginWrite(System.IO.Pipes.PipeStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            pipestream.BeginWrite(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PipeStreamImpersonationWorkerExtensions.PipeStreamImpersonationWorkerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.Pipes.PipeStreamImpersonationWorker">PipeStreamImpersonationWorker</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PipeStreamImpersonationWorkerExtensions.PipeStreamImpersonationWorkerable.BeginInvoke(System.IO.Pipes.PipeStreamImpersonationWorker,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            pipestreamimpersonationworker.BeginInvoke(callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PlayRecordCallbackExtensions.PlayRecordCallbackable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.Imaging.PlayRecordCallback">PlayRecordCallback</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PlayRecordCallbackExtensions.PlayRecordCallbackable.BeginInvoke(System.Drawing.Imaging.PlayRecordCallback,System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.IntPtr,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            playrecordcallback.BeginInvoke(recordType, flags, dataSize, recordData, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PointConverterExtensions.PointConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.PointConverter">PointConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PointConverterExtensions.PointConverterable.ConvertTo``1(System.Drawing.PointConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PointConverterExtensions.PointConverterable.ConvertTo``1(System.Drawing.PointConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            pointconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PopupEventHandlerExtensions.PopupEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.PopupEventHandler">PopupEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PopupEventHandlerExtensions.PopupEventHandlerable.BeginInvoke(System.Windows.Forms.PopupEventHandler,System.Object,System.Windows.Forms.PopupEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            popupeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PowerModeChangedEventHandlerExtensions.PowerModeChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:Microsoft.Win32.PowerModeChangedEventHandler">PowerModeChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PowerModeChangedEventHandlerExtensions.PowerModeChangedEventHandlerable.BeginInvoke(Microsoft.Win32.PowerModeChangedEventHandler,System.Object,Microsoft.Win32.PowerModeChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            powermodechangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PredicateExtensions.Predicateable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Predicate`1">Predicate&lt;T&gt;</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PredicateExtensions.Predicateable.BeginInvoke``1(System.Predicate{``0},``0,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke&lt;T&gt; so that when a state object is not needed, null does not need to be passed.
            <example>
            predicate.BeginInvoke&lt;T&gt;(obj, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PreviewKeyDownEventHandlerExtensions.PreviewKeyDownEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.PreviewKeyDownEventHandler">PreviewKeyDownEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PreviewKeyDownEventHandlerExtensions.PreviewKeyDownEventHandlerable.BeginInvoke(System.Windows.Forms.PreviewKeyDownEventHandler,System.Object,System.Windows.Forms.PreviewKeyDownEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            previewkeydowneventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PrintEventHandlerExtensions.PrintEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.Printing.PrintEventHandler">PrintEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PrintEventHandlerExtensions.PrintEventHandlerable.BeginInvoke(System.Drawing.Printing.PrintEventHandler,System.Object,System.Drawing.Printing.PrintEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            printeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PrintPageEventHandlerExtensions.PrintPageEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.Printing.PrintPageEventHandler">PrintPageEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PrintPageEventHandlerExtensions.PrintPageEventHandlerable.BeginInvoke(System.Drawing.Printing.PrintPageEventHandler,System.Object,System.Drawing.Printing.PrintPageEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            printpageeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ProgressChangedEventHandlerExtensions.ProgressChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.ProgressChangedEventHandler">ProgressChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ProgressChangedEventHandlerExtensions.ProgressChangedEventHandlerable.BeginInvoke(System.ComponentModel.ProgressChangedEventHandler,System.Object,System.ComponentModel.ProgressChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            progresschangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PropertyChangedEventHandlerExtensions.PropertyChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.PropertyChangedEventHandler">PropertyChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PropertyChangedEventHandlerExtensions.PropertyChangedEventHandlerable.BeginInvoke(System.ComponentModel.PropertyChangedEventHandler,System.Object,System.ComponentModel.PropertyChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            propertychangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PropertyChangingEventHandlerExtensions.PropertyChangingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.PropertyChangingEventHandler">PropertyChangingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PropertyChangingEventHandlerExtensions.PropertyChangingEventHandlerable.BeginInvoke(System.ComponentModel.PropertyChangingEventHandler,System.Object,System.ComponentModel.PropertyChangingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            propertychangingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PropertyTabChangedEventHandlerExtensions.PropertyTabChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.PropertyTabChangedEventHandler">PropertyTabChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PropertyTabChangedEventHandlerExtensions.PropertyTabChangedEventHandlerable.BeginInvoke(System.Windows.Forms.PropertyTabChangedEventHandler,System.Object,System.Windows.Forms.PropertyTabChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            propertytabchangedeventhandler.BeginInvoke(s, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PropertyValueChangedEventHandlerExtensions.PropertyValueChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.PropertyValueChangedEventHandler">PropertyValueChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PropertyValueChangedEventHandlerExtensions.PropertyValueChangedEventHandlerable.BeginInvoke(System.Windows.Forms.PropertyValueChangedEventHandler,System.Object,System.Windows.Forms.PropertyValueChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            propertyvaluechangedeventhandler.BeginInvoke(s, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PropertyValueUIHandlerExtensions.PropertyValueUIHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.Design.PropertyValueUIHandler">PropertyValueUIHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PropertyValueUIHandlerExtensions.PropertyValueUIHandlerable.BeginInvoke(System.Drawing.Design.PropertyValueUIHandler,System.ComponentModel.ITypeDescriptorContext,System.ComponentModel.PropertyDescriptor,System.Collections.ArrayList,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            propertyvalueuihandler.BeginInvoke(context, propDesc, valueUIItemList, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.PropertyValueUIItemInvokeHandlerExtensions.PropertyValueUIItemInvokeHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.Design.PropertyValueUIItemInvokeHandler">PropertyValueUIItemInvokeHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.PropertyValueUIItemInvokeHandlerExtensions.PropertyValueUIItemInvokeHandlerable.BeginInvoke(System.Drawing.Design.PropertyValueUIItemInvokeHandler,System.ComponentModel.ITypeDescriptorContext,System.ComponentModel.PropertyDescriptor,System.Drawing.Design.PropertyValueUIItem,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            propertyvalueuiiteminvokehandler.BeginInvoke(context, descriptor, invokedItem, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.QueryAccessibilityHelpEventHandlerExtensions.QueryAccessibilityHelpEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.QueryAccessibilityHelpEventHandler">QueryAccessibilityHelpEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.QueryAccessibilityHelpEventHandlerExtensions.QueryAccessibilityHelpEventHandlerable.BeginInvoke(System.Windows.Forms.QueryAccessibilityHelpEventHandler,System.Object,System.Windows.Forms.QueryAccessibilityHelpEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            queryaccessibilityhelpeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.QueryContinueDragEventHandlerExtensions.QueryContinueDragEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.QueryContinueDragEventHandler">QueryContinueDragEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.QueryContinueDragEventHandlerExtensions.QueryContinueDragEventHandlerable.BeginInvoke(System.Windows.Forms.QueryContinueDragEventHandler,System.Object,System.Windows.Forms.QueryContinueDragEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            querycontinuedrageventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.QueryPageSettingsEventHandlerExtensions.QueryPageSettingsEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.Printing.QueryPageSettingsEventHandler">QueryPageSettingsEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.QueryPageSettingsEventHandlerExtensions.QueryPageSettingsEventHandlerable.BeginInvoke(System.Drawing.Printing.QueryPageSettingsEventHandler,System.Object,System.Drawing.Printing.QueryPageSettingsEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            querypagesettingseventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.QuestionEventHandlerExtensions.QuestionEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.QuestionEventHandler">QuestionEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.QuestionEventHandlerExtensions.QuestionEventHandlerable.BeginInvoke(System.Windows.Forms.QuestionEventHandler,System.Object,System.Windows.Forms.QuestionEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            questioneventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.RectangleConverterExtensions.RectangleConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.RectangleConverter">RectangleConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.RectangleConverterExtensions.RectangleConverterable.ConvertTo``1(System.Drawing.RectangleConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.RectangleConverterExtensions.RectangleConverterable.ConvertTo``1(System.Drawing.RectangleConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            rectangleconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ReferenceConverterExtensions.ReferenceConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.ReferenceConverter">ReferenceConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReferenceConverterExtensions.ReferenceConverterable.ConvertTo``1(System.ComponentModel.ReferenceConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            referenceconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReferenceConverterExtensions.ReferenceConverterable.ConvertTo``1(System.ComponentModel.ReferenceConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ReflectionExtensions.CustomAttributeProviderExtensions">
            <summary>
            Extensions to <seealso cref="T:System.Reflection.ICustomAttributeProvider"/>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.CustomAttributeProviderExtensions.ContainsAttribute(System.Reflection.ICustomAttributeProvider,System.String)">
            <summary>
            Tests if <paramref name="t"/> has any custom attributes defined with the type name <paramref name="attr"/>
            </summary>
            <param name="t">The provider to check for types with given attribute type names.</param>
            <param name="attr">Name of the attribute to check fo</param>
            <returns>true - <paramref name="t"/> has the attribute defined.
            false - <paramref name="t"/> does not have the attribute defined.</returns>
        </member>
        <member name="T:PRI.ProductivityExtensions.ReflectionExtensions.ILGeneratorable">
            <summary>
            Extension methods for <seealso cref="T:System.Reflection.Emit.ILGenerator"/>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.ILGeneratorable.EmitBackingFieldGetter(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Emit code that will get the value from <paramref name="field"/>
            </summary>
            <param name="generator">Generator that will emit the instructions</param>
            <param name="field">Field to read</param>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.ILGeneratorable.EmitBackingFieldSetter(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>
            Emit code that will set the value <paramref name="field"/> based argument on stack
            </summary>
            <param name="generator">Generator that will emit the instructions</param>
            <param name="field">Field to write</param>
        </member>
        <member name="T:PRI.ProductivityExtensions.ReflectionExtensions.IlInstruction">
            <summary>
            class that contains information about an IL Instruction
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.IlInstruction.#ctor(System.Reflection.Emit.OpCode)">
            <summary>
            construct an IlInstruction based on the OpCode
            </summary>
            <param name="code"></param>
        </member>
        <member name="P:PRI.ProductivityExtensions.ReflectionExtensions.IlInstruction.Code">
            <summary>
            Opcode of the instruction
            </summary>
        </member>
        <member name="P:PRI.ProductivityExtensions.ReflectionExtensions.IlInstruction.Operand">
            <summary>
            Optional operand of the instruction
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ReflectionExtensions.ModuleBuilderable">
            <summary>
            class that contains extension methods that extend <seealso cref="T:System.Reflection.Emit.ModuleBuilder"/>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.ModuleBuilderable.DefineClass(System.Reflection.Emit.ModuleBuilder,System.String)">
            <summary>
            Adds a public class to the module encapsulated by the <paramref name="moduleBuilder"/> of name <paramref name="name"/>
            </summary>
            <param name="moduleBuilder"><seealso cref="T:System.Reflection.Emit.ModuleBuilder"/> to add class to</param>
            <param name="name">Name of the class</param>
            <returns>TypeBuilder object that encapsulates the new class.</returns>
        </member>
        <member name="T:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable">
            <summary>
            class hat contains extension methods that extend reflection-related classes
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttribute``1(System.Reflection.Assembly)">
            <summary>
            Makes Attribute.GetCustomAttribute() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = assembly.GetCustomAttribute&lt;AssemblyCopyrightAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Makes Attribute.GetCustomAttribute() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = memberInfo.GetCustomAttribute&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttribute``1(System.Reflection.ParameterInfo)">
            <summary>
            Makes Attribute.GetCustomAttribute() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = parameterInfo.GetCustomAttribute&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttribute``1(System.Reflection.Module)">
            <summary>
            Makes Attribute.GetCustomAttribute() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = module.GetCustomAttribute&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"> </param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttribute``1(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Makes Attribute.GetCustomAttribute() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = assembly.GetCustomAttribute&lt;AssemblyCopyrightAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <param name="inherit">If true, specifies to also search the ancestors of <paramref name="source" /> for custom attributes. </param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Makes Attribute.GetCustomAttribute() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = memberInfo.GetCustomAttribute&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <param name="inherit">If true, specifies to also search the ancestors of <paramref name="source" /> for custom attributes. </param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttribute``1(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            Makes Attribute.GetCustomAttribute() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = parameterInfo.GetCustomAttribute&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <param name="inherit">If true, specifies to also search the ancestors of <paramref name="source" /> for custom attributes. </param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttribute``1(System.Reflection.Module,System.Boolean)">
            <summary>
            Makes Attribute.GetCustomAttribute() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = module.GetCustomAttribute&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"> </param>
            <param name="inherit">If true, specifies to also search the ancestors of <paramref name="source" /> for custom attributes. </param>
            <returns>A reference to the single custom attribute of type <typeparamref name="T"/> that is applied to <paramref name="source" />, or null if there is no such attribute.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttributes``1(System.Reflection.Assembly)">
            <summary>
            Makes Attribute.GetCustomAttributes() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = assembly.GetCustomAttributes&lt;AssemblyCopyrightAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Makes Attribute.GetCustomAttributes() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = memberInfo.GetCustomAttributes&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttributes``1(System.Reflection.ParameterInfo)">
            <summary>
            Makes Attribute.GetCustomAttributes() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = parameterInfo.GetCustomAttributes&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttributes``1(System.Reflection.Module)">
            <summary>
            Makes Attribute.GetCustomAttributes() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = module.GetCustomAttributes&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"> </param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttributes``1(System.Reflection.Assembly,System.Boolean)">
            <summary>
            Makes Attribute.GetCustomAttributes() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = assembly.GetCustomAttributes&lt;AssemblyCopyrightAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <param name="inherit">If true, specifies to also search the ancestors of <paramref name="source" /> for custom attributes. </param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Makes Attribute.GetCustomAttributes() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = memberInfo.GetCustomAttributes&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <param name="inherit">If true, specifies to also search the ancestors of <paramref name="source" /> for custom attributes. </param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttributes``1(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
            Makes Attribute.GetCustomAttributes() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = parameterInfo.GetCustomAttributes&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"></param>
            <param name="inherit">If true, specifies to also search the ancestors of <paramref name="source" /> for custom attributes. </param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetCustomAttributes``1(System.Reflection.Module,System.Boolean)">
            <summary>
            Makes Attribute.GetCustomAttributes() generic and avoids having to pass a Type and cast the result.
            <example>
            SerializableAttribute attr = module.GetCustomAttributes&lt;SerializableAttribute&gt;();
            </example>
            </summary>
            <typeparam name="T">The type, or a base type, of the custom attribute to search for.</typeparam>
            <param name="source"> </param>
            <param name="inherit">If true, specifies to also search the ancestors of <paramref name="source" /> for custom attributes. </param>
            <returns>A reference to the single custom attribute of type <typeparamref name="T"/> that is applied to <paramref name="source" />, or null if there is no such attribute.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetMethodInstructions(System.Reflection.MethodInfo,System.Reflection.Module,System.Byte[])">
            <summary>
            Gets a collection of <seealso cref="T:PRI.ProductivityExtensions.ReflectionExtensions.IlInstruction"/> representing the instructions in the body of a method
            </summary>
            <param name="methodInfo"></param>
            <param name="module"></param>
            <param name="il"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.ReferencesMethod``1(System.Type,System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Tests wheter <paramref name="sourceType"/> references a method
            <example>TODO: Example for AssemblyExtensions.ReferencesMethod</example>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceType"></param>
            <param name="func"></param>
            <returns><code>true</code>if method contained in expression <paramref name="func"/> references any constructors in this <see cref="T:System.Type"/></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.ReferencesConstructor(System.Type,System.Type)">
            <summary>
            Tests wheter <paramref name="sourceType"/> references a constructor in <paramref name="type"/>
            <example>TODO: Example for AssemblyExtensions.ReferencesConstructor</example>
            </summary>
            <param name="sourceType"></param>
            <param name="type"> </param>
            <returns><code>true</code>if <paramref name="type"/> references any constructors in this <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.ReferencesConstructor``1(System.Type)">
            <summary>
            Tests wheter <paramref name="sourceType"/> references a constructor in <typeparamref name="T"/>
            <example>TODO: Example for AssemblyExtensions.ReferencesConstructor</example>
            </summary>
            <param name="sourceType"></param>
            <returns><code>true</code>if <typeparamref name="T"/> references any constructors in this <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.ReferencesConstructor(System.Reflection.Assembly,System.Type)">
            <summary>
            Tests where any types in the assembly references the constructor of <paramref name="type"/>
            </summary>
            <param name="assembly"></param>
            <param name="type"></param>
            <returns><code>true</code>if <paramref name="type"/> references any constructors in this <see cref="T:System.Reflection.Assembly"/></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.ReferencesConstructor``1(System.Reflection.Assembly)">
            <summary>
            Tests where any types in the assembly references the constructor of <typeparamref name="T"/>
            </summary>
            <param name="assembly"></param>
            <returns><code>true</code>if <typeparamref name="T"/> references any constructors in this <see cref="T:System.Reflection.Assembly"/></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetPrivateFieldValue``1(System.Object,System.String)">
            <summary>
            Gets a private field value
            </summary>
            <typeparam name="T">The type of the property</typeparam>
            <param name="obj">the object that will be operated upon.</param>
            <param name="fieldName">Name of the field whose value to retrieve.</param>
            <returns>The value of the property</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.GetPrivatePropertyValue``1(System.Object,System.String)">
            <summary>
            Gets a private property value
            </summary>
            <typeparam name="T">The type of the field</typeparam>
            <param name="obj">the object that will be operated upon.</param>
            <param name="propertyName">Name of the field whose value to retrieve.</param>
            <returns>The value of the field</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.SetPrivateFieldValue``1(System.Object,System.String,``0)">
            <summary>
            Gets a private field value
            </summary>
            <typeparam name="T">The type of the property</typeparam>
            <param name="obj">the object that will be operated upon.</param>
            <param name="fieldName">Name of the field whose value to retrieve.</param>
            <returns>The value of the property</returns>
            <param name="value">The value used to set the field</param>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.SetPrivatePropertyValue``1(System.Object,System.String,``0)">
            <summary>
            Sets a private property value
            </summary>
            <typeparam name="T">The type of the field</typeparam>
            <param name="obj">the object that will be operated upon.</param>
            <param name="propertyName">Name of the field whose value to retrieve.</param>
            <param name="value">The value used to set the property</param>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.FindAttributedTypes(System.Type)">
            <summary>
            Find all types in the current AppDomain that have been attributed with <paramref name="attributeType"/>
            </summary>
            <param name="attributeType">Attribute for which types must implement to match</param>
            <returns>Collection of types that match.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.FindAttributedTypes``1(``0)">
            <summary>
            Find all types in the current AppDomain that have been attributed with <paramref name="attribute"/>
            </summary>
            <param name="attribute">Attribute for which types must implement to match</param>
            <returns>Collection of types that match.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.FindAttributedTypes``1(``0,System.String,System.String)">
            <summary>
            Find all types in <paramref name="directory"/> whose names patch <paramref name="wildcard"/> that have been attributed with <typeparamref name="TAttribute"/>
            </summary>
            <param name="attribute">Attribute for which types must implement to match</param>
            <param name="directory">Directory to search for assemblies</param>
            <param name="wildcard">Wildcard to use to include assembly file names</param>
            <returns>Collection of types that match.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.FindAttributedTypes(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Find all types in <paramref name="assemblies"/> that have been attributed with <paramref name="attributeType"/>
            </summary>
            <param name="attributeType">Attribute for which types must implement to match</param>
            <param name="assemblies">Assemblies to search</param>
            <returns>Collection of types that match.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.FindAttributedTypes(System.Type,System.String,System.String)">
            <summary>
            Find all types in <paramref name="directory"/> whose names patch <paramref name="wildcard"/> that have been attributed with <paramref name="attributeType"/>
            </summary>
            <param name="attributeType">Attribute for which types must implement to match</param>
            <param name="directory">Directory to search for assemblies</param>
            <param name="wildcard">Wildcard to use to include assembly file names</param>
            <returns>Collection of types that match.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Reflectable.FindAttributedTypes``1(``0,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Find all types in <paramref name="assemblies"/> that have been attributed with <paramref name="attribute"/>
            </summary>
            <param name="attribute">Attribute for which types must implement to match</param>
            <param name="assemblies">Assemblies to search</param>
            <returns>Collection of types that match.</returns>
        </member>
        <member name="T:PRI.ProductivityExtensions.ReflectionExtensions.Typeable">
            <summary>
            Type Extensions
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Typeable.IsNullableValueType(System.Type)">
            <summary>
            Determines whether the type this method is called on is a nullable type of type Nullable(Of T)
            </summary>
            <param name="toCheck">The type to check.</param>
            <returns>true if toCheck is a Nullable(Of T) type, otherwise false</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Typeable.GetFullTypeName(System.Type)">
            <summary>
            Gets the full type name, of the format: Type.Fullname, assembly name.
            If the assembly is signed, the full assembly name is added, otherwise just the assembly name, not the version, public key token or culture.
            </summary>
            <param name="type">The type of which the full name should be obtained.</param>
            <returns>full type name. If the type is a .NET system type (e.g. is located in mscorlib or namespace starts with Microsoft. or System.) the
            FullTypeName is equal to the FullName of the type.</returns>
            <remarks>Use this method if you need to store the type's full name in a string for re-instantiation later on with Activator.CreateInstance.</remarks>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Typeable.IsNetSystemType(System.Type)">
            <summary>
            Determines whether the type specified is a system type of .NET. System types are types in mscorlib, assemblies which start with 'Microsoft.', 'System.'
            or the System assembly itself.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Typeable.GetDefaultValue(System.Type,System.Boolean)">
            <summary>
            Gets the default value for the type, e.g. 0 for int, empty guid for guid.
            </summary>
            <param name="typeToCreateValueFor">The type to create value for.</param>
            <param name="safeDefaults">if set to true, the routine will return string.Empty for string and empty byte array for byte[], otherwise null</param>
            <returns>
            the default value for the type. It returns string.Empty for string, empty byte array for a byte array,
            if safeDefaults is set to true
            </returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Typeable.HasAttribute``1(System.Type)">
            <summary>
            Tests if <param name="type" /> has attribute <typeparam name="TAttribute"/>
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Typeable.HasAttribute(System.Type,System.Type)">
            <summary>
            Tests if <param name="type" /> has attribute <param name="attributeType" />
            </summary>
            <param name="type"></param>
            <param name="attributeType"></param>
            <returns>true if attributed with <paramref name="attributeType" />, false otherwise.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Typeable.ImplementsInterface``1(System.Type)">
            <summary>
            Test if <param name="type" /> implements interface <typeparamref name="TInterface"/>
            </summary>
            <typeparam name="TInterface"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Typeable.ImplementsInterface(System.Type,System.Type)">
            <summary>
            tests if <param name="type" /> implements interface <param name="interfaceType" />
            </summary>
            <param name="type"></param>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Typeable.ByImplementedInterface(System.Type)">
            <summary>
            Get a collection of types that implement interface <paramref name="interfaceType" />
            </summary>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Typeable.ByImplementedInterface(System.Type,System.String)">
            <summary>
            Get a collection of types that implement interface <paramref name="interfaceType" /> within namespace named <paramref name="namespaceName"/>
            </summary>
            <param name="interfaceType"></param>
            <param name="namespaceName"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Typeable.ByImplementedInterfaceInDirectory(System.Type,System.String,System.String)">
            <summary>
            get a collection of types that implement <paramref name="interfaceType"/> for assemblies filenames matching <paramref name="wildcard"/> in directory <paramref name="directory"/>
            </summary>
            <param name="interfaceType"></param>
            <param name="directory"></param>
            <param name="wildcard"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Typeable.ByImplementedInterfaceInDirectory(System.Type,System.String,System.String,System.String)">
            <summary>
            get a collection of types that implement <paramref name="interfaceType"/> for assemblies filenames matching <paramref name="wildcard"/> in directory <paramref name="directory"/> within namespace named <paramref name="namespaceName"/>
            </summary>
            <param name="interfaceType"></param>
            <param name="directory"></param>
            <param name="wildcard"></param>
            <param name="namespaceName"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.Typeable.GetConstructor(System.Type)">
            <summary>
            Gets the default constructor for <paramref name="type"/>
            </summary>
            <param name="type">The type to get the default destructor</param>
            <returns><seealso cref="T:System.Reflection.ConstructorInfo"/> about the default constructor.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.TypeBuilderable.DefinePublicField``1(System.Reflection.Emit.TypeBuilder,System.String)">
            <summary>
            Add public field to <paramref name="typeBuilder"/> of name <paramref name="fieldName"/>
            </summary>
            <typeparam name="T">Type of the field</typeparam>
            <param name="typeBuilder"><seealso cref="T:System.Reflection.Emit.TypeBuilder"/> that will have the new field</param>
            <param name="fieldName">Name of the field</param>
            <returns>The new FieldBuilder object that encapsulates the field</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.TypeBuilderable.DefinePublicField(System.Reflection.Emit.TypeBuilder,System.String,System.Type)">
            <summary>
            Add public field to <paramref name="typeBuilder"/> of name <paramref name="fieldName"/>
            </summary>
            <param name="typeBuilder"><seealso cref="T:System.Reflection.Emit.TypeBuilder"/> that will have the new field</param>
            <param name="fieldName">Name of the field</param>
            <param name="type">Type of the field</param>
            <returns>The new FieldBuilder object that encapsulates the field</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.TypeBuilderable.DefinePrivateField``1(System.Reflection.Emit.TypeBuilder,System.String)">
            <summary>
            Add private field to <paramref name="typeBuilder"/> of name <paramref name="fieldName"/>
            </summary>
            <typeparam name="T">Type of the field</typeparam>
            <param name="typeBuilder"><seealso cref="T:System.Reflection.Emit.TypeBuilder"/> that will have the new field</param>
            <param name="fieldName">Name of the field</param>
            <returns>The new FieldBuilder object that encapsulates the field</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.TypeBuilderable.DefinePrivateField(System.Reflection.Emit.TypeBuilder,System.String,System.Type)">
            <summary>
            Add private field to <paramref name="typeBuilder"/> of name <paramref name="fieldName"/>
            </summary>
            <param name="typeBuilder"><seealso cref="T:System.Reflection.Emit.TypeBuilder"/> that will have the new field</param>
            <param name="fieldName">Name of the field</param>
            <param name="type">Type of the field</param>
            <returns>The new FieldBuilder object that encapsulates the field</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.TypeBuilderable.DefineProperty``1(System.Reflection.Emit.TypeBuilder,System.String,System.Reflection.PropertyAttributes)">
            <summary>
            Adds a public property to <paramref name="typeBuilder"/> of name <paramref name="propertyName"/>
            </summary>
            <typeparam name="T">Type of the property</typeparam>
            <param name="typeBuilder"><seealso cref="T:System.Reflection.Emit.TypeBuilder"/> that will have the new property</param>
            <param name="propertyName">Name of the property</param>
            <param name="propertyAttributes"><seealso cref="T:System.Reflection.PropertyAttributes"/></param>
            <returns>The new PropertyBuilder object that encapsulates the property</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.TypeBuilderable.DefineProperty(System.Reflection.Emit.TypeBuilder,System.String,System.Type,System.Reflection.PropertyAttributes)">
            <summary>
            Adds a public property to <paramref name="typeBuilder"/> of name <paramref name="propertyName"/>
            </summary>
            <param name="typeBuilder"><seealso cref="T:System.Reflection.Emit.TypeBuilder"/> that will have the new property</param>
            <param name="propertyName">Name of the property</param>
            <param name="type">Type of the property</param>
            <param name="propertyAttributes"><seealso cref="T:System.Reflection.PropertyAttributes"/></param>
            <returns>The new PropertyBuilder object that encapsulates the property</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.TypeBuilderable.DefinePropertyGetter(System.Reflection.Emit.TypeBuilder,System.Reflection.PropertyInfo)">
            <summary>
            Adds a property getter method to <paramref name="typeBuilder"/> based on name of <paramref name="propertyInfo"/>
            </summary>
            <param name="typeBuilder"><seealso cref="T:System.Reflection.Emit.TypeBuilder"/> that will have the new property.</param>
            <param name="propertyInfo"><seealso cref="T:System.Reflection.PropertyInfo"/> to base name and the method.</param>
            <returns>the new <seealso cref="T:System.Reflection.Emit.MethodBuilder"/> object that encapsulates the method</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.TypeBuilderable.DefinePropertySetter(System.Reflection.Emit.TypeBuilder,System.Reflection.PropertyInfo)">
            <summary>
            Adds a property setter method to <paramref name="typeBuilder"/> based on name of <paramref name="propertyInfo"/>
            </summary>
            <param name="typeBuilder"><seealso cref="T:System.Reflection.Emit.TypeBuilder"/> that will have the new property.</param>
            <param name="propertyInfo"><seealso cref="T:System.Reflection.PropertyInfo"/> to base name and the method.</param>
            <returns>the new <seealso cref="T:System.Reflection.Emit.MethodBuilder"/> object that encapsulates the method</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.TypeBuilderable.DefinePrivatePropertyGetter(System.Reflection.Emit.TypeBuilder,System.Reflection.PropertyInfo)">
            <summary>
            Adds a private property getter method to <paramref name="typeBuilder"/> based on name of <paramref name="propertyInfo"/>
            </summary>
            <param name="typeBuilder"><seealso cref="T:System.Reflection.Emit.TypeBuilder"/> that will have the new property.</param>
            <param name="propertyInfo"><seealso cref="T:System.Reflection.PropertyInfo"/> to base name and the method.</param>
            <returns>the new <seealso cref="T:System.Reflection.Emit.MethodBuilder"/> object that encapsulates the method</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.ReflectionExtensions.TypeBuilderable.DefinePrivatePropertySetter(System.Reflection.Emit.TypeBuilder,System.Reflection.PropertyInfo)">
            <summary>
            Adds a private property setter method to <paramref name="typeBuilder"/> based on name of <paramref name="propertyInfo"/>
            </summary>
            <param name="typeBuilder"><seealso cref="T:System.Reflection.Emit.TypeBuilder"/> that will have the new property.</param>
            <param name="propertyInfo"><seealso cref="T:System.Reflection.PropertyInfo"/> to base name and the method.</param>
            <returns>the new <seealso cref="T:System.Reflection.Emit.MethodBuilder"/> object that encapsulates the method</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.Reflection.Expressionable.ToPropertyInfo(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Converts the body of the lambda expression into the <see cref="T:System.Reflection.PropertyInfo" /> referenced by it.
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.Reflection.Expressionable.ToPropertyDescriptor(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Converts the body of the lambda expression into the <see cref="T:System.Reflection.PropertyInfo" /> referenced by it.
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.RefreshEventHandlerExtensions.RefreshEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.RefreshEventHandler">RefreshEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.RefreshEventHandlerExtensions.RefreshEventHandlerable.BeginInvoke(System.ComponentModel.RefreshEventHandler,System.ComponentModel.RefreshEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            refresheventhandler.BeginInvoke(e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.RemoteCertificateValidationCallbackExtensions.RemoteCertificateValidationCallbackable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.Security.RemoteCertificateValidationCallback">RemoteCertificateValidationCallback</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.RemoteCertificateValidationCallbackExtensions.RemoteCertificateValidationCallbackable.BeginInvoke(System.Net.Security.RemoteCertificateValidationCallback,System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            remotecertificatevalidationcallback.BeginInvoke(sender, certificate, chain, sslPolicyErrors, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.RenamedEventHandlerExtensions.RenamedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.RenamedEventHandler">RenamedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.RenamedEventHandlerExtensions.RenamedEventHandlerable.BeginInvoke(System.IO.RenamedEventHandler,System.Object,System.IO.RenamedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            renamedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ResolveEventHandlerExtensions.ResolveEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ResolveEventHandler">ResolveEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ResolveEventHandlerExtensions.ResolveEventHandlerable.BeginInvoke(System.ResolveEventHandler,System.Object,System.ResolveEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            resolveeventhandler.BeginInvoke(sender, args, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ResolveNameEventHandlerExtensions.ResolveNameEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">ResolveNameEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ResolveNameEventHandlerExtensions.ResolveNameEventHandlerable.BeginInvoke(System.ComponentModel.Design.Serialization.ResolveNameEventHandler,System.Object,System.ComponentModel.Design.Serialization.ResolveNameEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            resolvenameeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.RetrieveVirtualItemEventHandlerExtensions.RetrieveVirtualItemEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.RetrieveVirtualItemEventHandler">RetrieveVirtualItemEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.RetrieveVirtualItemEventHandlerExtensions.RetrieveVirtualItemEventHandlerable.BeginInvoke(System.Windows.Forms.RetrieveVirtualItemEventHandler,System.Object,System.Windows.Forms.RetrieveVirtualItemEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            retrievevirtualitemeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.RijndaelManagedTransformExtensions.RijndaelManagedTransformable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Security.Cryptography.RijndaelManagedTransform">RijndaelManagedTransform</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.RijndaelManagedTransformExtensions.RijndaelManagedTransformable.TransformBlock(System.Security.Cryptography.RijndaelManagedTransform,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Extends TransformBlock so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            rijndaelmanagedtransform.TransformBlock(inputBuffer, outputBuffer, outputOffset);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.RijndaelManagedTransformExtensions.RijndaelManagedTransformable.TransformFinalBlock(System.Security.Cryptography.RijndaelManagedTransform,System.Byte[])">
            <summary>
            Extends TransformFinalBlock so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            rijndaelmanagedtransform.TransformFinalBlock(inputBuffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.RunWorkerCompletedEventHandlerExtensions.RunWorkerCompletedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.RunWorkerCompletedEventHandler">RunWorkerCompletedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.RunWorkerCompletedEventHandlerExtensions.RunWorkerCompletedEventHandlerable.BeginInvoke(System.ComponentModel.RunWorkerCompletedEventHandler,System.Object,System.ComponentModel.RunWorkerCompletedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            runworkercompletedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SafeBufferExtensions.SafeBufferable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Runtime.InteropServices.SafeBuffer">SafeBuffer</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SafeBufferExtensions.SafeBufferable.ReadArray``1(System.Runtime.InteropServices.SafeBuffer,System.UInt64,``0[])">
            <summary>
            Extends ReadArray&lt;T&gt; so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            safebuffer.ReadArray&lt;T&gt;(byteOffset, array);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SafeBufferExtensions.SafeBufferable.WriteArray``1(System.Runtime.InteropServices.SafeBuffer,System.UInt64,``0[])">
            <summary>
            Extends WriteArray&lt;T&gt; so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            safebuffer.WriteArray&lt;T&gt;(byteOffset, array);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SByteConverterExtensions.SByteConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.SByteConverter">SByteConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SByteConverterExtensions.SByteConverterable.ConvertTo``1(System.ComponentModel.SByteConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            basenumberconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SByteConverterExtensions.SByteConverterable.ConvertTo``1(System.ComponentModel.SByteConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ScrollEventHandlerExtensions.ScrollEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ScrollEventHandler">ScrollEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ScrollEventHandlerExtensions.ScrollEventHandlerable.BeginInvoke(System.Windows.Forms.ScrollEventHandler,System.Object,System.Windows.Forms.ScrollEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            scrolleventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SearchForVirtualItemEventHandlerExtensions.SearchForVirtualItemEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.SearchForVirtualItemEventHandler">SearchForVirtualItemEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SearchForVirtualItemEventHandlerExtensions.SearchForVirtualItemEventHandlerable.BeginInvoke(System.Windows.Forms.SearchForVirtualItemEventHandler,System.Object,System.Windows.Forms.SearchForVirtualItemEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            searchforvirtualitemeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SelectedGridItemChangedEventHandlerExtensions.SelectedGridItemChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.SelectedGridItemChangedEventHandler">SelectedGridItemChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SelectedGridItemChangedEventHandlerExtensions.SelectedGridItemChangedEventHandlerable.BeginInvoke(System.Windows.Forms.SelectedGridItemChangedEventHandler,System.Object,System.Windows.Forms.SelectedGridItemChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            selectedgriditemchangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SelectionRangeConverterExtensions.SelectionRangeConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.SelectionRangeConverter">SelectionRangeConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SelectionRangeConverterExtensions.SelectionRangeConverterable.ConvertTo``1(System.Windows.Forms.SelectionRangeConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SelectionRangeConverterExtensions.SelectionRangeConverterable.ConvertTo``1(System.Windows.Forms.SelectionRangeConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            selectionrangeconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SendCompletedEventHandlerExtensions.SendCompletedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.Mail.SendCompletedEventHandler">SendCompletedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SendCompletedEventHandlerExtensions.SendCompletedEventHandlerable.BeginInvoke(System.Net.Mail.SendCompletedEventHandler,System.Object,System.ComponentModel.AsyncCompletedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            sendcompletedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SendOrPostCallbackExtensions.SendOrPostCallbackable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Threading.SendOrPostCallback">SendOrPostCallback</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SendOrPostCallbackExtensions.SendOrPostCallbackable.BeginInvoke(System.Threading.SendOrPostCallback,System.Object,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            sendorpostcallback.BeginInvoke(state, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SequenceExtensions.Sequenceable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Compares two sequences to see if they are equal
            </summary>
            <remarks>
            The default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for <typeparamref name="TSource"/> is used
            </remarks>
            <typeparam name="TSource"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <param name="offsetIntoSecond"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.SequenceExtensions.Sequenceable.SequenceEquality``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compare percentage equality of one collection to another
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="that"></param>
            <param name="equalityComparer"></param>
            <returns></returns>
        </member>
        <member name="T:PRI.ProductivityExtensions.SerialDataReceivedEventHandlerExtensions.SerialDataReceivedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.Ports.SerialDataReceivedEventHandler">SerialDataReceivedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SerialDataReceivedEventHandlerExtensions.SerialDataReceivedEventHandlerable.BeginInvoke(System.IO.Ports.SerialDataReceivedEventHandler,System.Object,System.IO.Ports.SerialDataReceivedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            serialdatareceivedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SerialErrorReceivedEventHandlerExtensions.SerialErrorReceivedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.Ports.SerialErrorReceivedEventHandler">SerialErrorReceivedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SerialErrorReceivedEventHandlerExtensions.SerialErrorReceivedEventHandlerable.BeginInvoke(System.IO.Ports.SerialErrorReceivedEventHandler,System.Object,System.IO.Ports.SerialErrorReceivedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            serialerrorreceivedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SerializationInfoExtensions.SerializationInfoable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Runtime.Serialization.SerializationInfo">SerializationInfo</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SerializationInfoExtensions.SerializationInfoable.GetValue``1(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Extends GetValue so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            serializationinfo.GetValue&lt;int&gt;(name);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SerialPinChangedEventHandlerExtensions.SerialPinChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.Ports.SerialPinChangedEventHandler">SerialPinChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SerialPinChangedEventHandlerExtensions.SerialPinChangedEventHandlerable.BeginInvoke(System.IO.Ports.SerialPinChangedEventHandler,System.Object,System.IO.Ports.SerialPinChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            serialpinchangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SerialPortExtensions.SerialPortable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.Ports.SerialPort">SerialPort</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SerialPortExtensions.SerialPortable.Read(System.IO.Ports.SerialPort,System.Byte[])">
            <summary>
            Extends Read so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            serialport.Read(buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SerialPortExtensions.SerialPortable.Read(System.IO.Ports.SerialPort,System.Char[])">
            <summary>
            Extends Read so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            serialport.Read(buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SerialPortExtensions.SerialPortable.Write(System.IO.Ports.SerialPort,System.Char[])">
            <summary>
            Extends Write so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            serialport.Write(buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SerialPortExtensions.SerialPortable.Write(System.IO.Ports.SerialPort,System.Byte[])">
            <summary>
            Extends Write so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            serialport.Write(buffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ServiceCreatorCallbackExtensions.ServiceCreatorCallbackable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.Design.ServiceCreatorCallback">ServiceCreatorCallback</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ServiceCreatorCallbackExtensions.ServiceCreatorCallbackable.Invoke``1(System.ComponentModel.Design.ServiceCreatorCallback,System.ComponentModel.Design.IServiceContainer)">
            <summary>
            Extends Invoke so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            servicecreatorcallback.Invoke&lt;int&gt;(container);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ServiceCreatorCallbackExtensions.ServiceCreatorCallbackable.BeginInvoke(System.ComponentModel.Design.ServiceCreatorCallback,System.ComponentModel.Design.IServiceContainer,System.Type,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            servicecreatorcallback.BeginInvoke(container, serviceType, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SessionEndedEventHandlerExtensions.SessionEndedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:Microsoft.Win32.SessionEndedEventHandler">SessionEndedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SessionEndedEventHandlerExtensions.SessionEndedEventHandlerable.BeginInvoke(Microsoft.Win32.SessionEndedEventHandler,System.Object,Microsoft.Win32.SessionEndedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            sessionendedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SessionEndingEventHandlerExtensions.SessionEndingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:Microsoft.Win32.SessionEndingEventHandler">SessionEndingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SessionEndingEventHandlerExtensions.SessionEndingEventHandlerable.BeginInvoke(Microsoft.Win32.SessionEndingEventHandler,System.Object,Microsoft.Win32.SessionEndingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            sessionendingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SessionSwitchEventHandlerExtensions.SessionSwitchEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:Microsoft.Win32.SessionSwitchEventHandler">SessionSwitchEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SessionSwitchEventHandlerExtensions.SessionSwitchEventHandlerable.BeginInvoke(Microsoft.Win32.SessionSwitchEventHandler,System.Object,Microsoft.Win32.SessionSwitchEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            sessionswitcheventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SettingChangingEventHandlerExtensions.SettingChangingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Configuration.SettingChangingEventHandler">SettingChangingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SettingChangingEventHandlerExtensions.SettingChangingEventHandlerable.BeginInvoke(System.Configuration.SettingChangingEventHandler,System.Object,System.Configuration.SettingChangingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            settingchangingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SettingsLoadedEventHandlerExtensions.SettingsLoadedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Configuration.SettingsLoadedEventHandler">SettingsLoadedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SettingsLoadedEventHandlerExtensions.SettingsLoadedEventHandlerable.BeginInvoke(System.Configuration.SettingsLoadedEventHandler,System.Object,System.Configuration.SettingsLoadedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            settingsloadedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SettingsSavingEventHandlerExtensions.SettingsSavingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Configuration.SettingsSavingEventHandler">SettingsSavingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SettingsSavingEventHandlerExtensions.SettingsSavingEventHandlerable.BeginInvoke(System.Configuration.SettingsSavingEventHandler,System.Object,System.ComponentModel.CancelEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            settingssavingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SingleConverterExtensions.SingleConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.SingleConverter">SingleConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SingleConverterExtensions.SingleConverterable.ConvertTo``1(System.ComponentModel.SingleConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            basenumberconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SingleConverterExtensions.SingleConverterable.ConvertTo``1(System.ComponentModel.SingleConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SizeConverterExtensions.SizeConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.SizeConverter">SizeConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SizeConverterExtensions.SizeConverterable.ConvertTo``1(System.Drawing.SizeConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SizeConverterExtensions.SizeConverterable.ConvertTo``1(System.Drawing.SizeConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            sizeconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SizeFConverterExtensions.SizeFConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.SizeFConverter">SizeFConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SizeFConverterExtensions.SizeFConverterable.ConvertTo``1(System.Drawing.SizeFConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SizeFConverterExtensions.SizeFConverterable.ConvertTo``1(System.Drawing.SizeFConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            sizefconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SocketAsyncEventArgsExtensions.SocketAsyncEventArgsable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.Sockets.SocketAsyncEventArgs">SocketAsyncEventArgs</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketAsyncEventArgsExtensions.SocketAsyncEventArgsable.SetBuffer(System.Net.Sockets.SocketAsyncEventArgs,System.Byte[])">
            <summary>
            Extends SetBuffer so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            socketasynceventargs.SetBuffer(buffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SocketExtensions.Socketable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.Sockets.Socket">Socket</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.Send(System.Net.Sockets.Socket,System.Byte[],System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)">
            <summary>
            Extends Send so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            socket.Send(buffer, socketFlags, errorCode);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.Receive(System.Net.Sockets.Socket,System.Byte[],System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)">
            <summary>
            Extends Receive so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            socket.Receive(buffer, socketFlags, errorCode);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.ReceiveMessageFrom(System.Net.Sockets.Socket,System.Byte[],System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)">
            <summary>
            Extends ReceiveMessageFrom so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            socket.ReceiveMessageFrom(buffer, socketFlags, remoteEP, ipPacketInformation);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginSendFile(System.Net.Sockets.Socket,System.String,System.AsyncCallback)">
            <summary>
            Extends BeginSendFile so that when a state object is not needed, null does not need to be passed.
            <example>
            socket.BeginSendFile(fileName, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginConnect(System.Net.Sockets.Socket,System.Net.EndPoint,System.AsyncCallback)">
            <summary>
            Extends BeginConnect so that when a state object is not needed, null does not need to be passed.
            <example>
            socket.BeginConnect(remoteEP, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginConnect(System.Net.Sockets.Socket,System.String,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginConnect so that when a state object is not needed, null does not need to be passed.
            <example>
            socket.BeginConnect(host, port, requestCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginConnect(System.Net.Sockets.Socket,System.Net.IPAddress,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginConnect so that when a state object is not needed, null does not need to be passed.
            <example>
            socket.BeginConnect(address, port, requestCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginConnect(System.Net.Sockets.Socket,System.Net.IPAddress[],System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginConnect so that when a state object is not needed, null does not need to be passed.
            <example>
            socket.BeginConnect(addresses, port, requestCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginDisconnect(System.Net.Sockets.Socket,System.Boolean,System.AsyncCallback)">
            <summary>
            Extends BeginDisconnect so that when a state object is not needed, null does not need to be passed.
            <example>
            socket.BeginDisconnect(reuseSocket, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginSend(System.Net.Sockets.Socket,System.Byte[],System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            Extends BeginSend so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            socket.BeginSend(buffer, socketFlags, callback, state);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginSend(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback)">
            <summary>
            Extends BeginSend so that when a state object is not needed, null does not need to be passed.
            <example>
            socket.BeginSend(buffer, offset, size, socketFlags, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginSend(System.Net.Sockets.Socket,System.Byte[],System.Net.Sockets.SocketFlags,System.AsyncCallback)">
            <summary>
            Extends BeginSend so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            socket.BeginSend(buffer, socketFlags, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginSend(System.Net.Sockets.Socket,System.Byte[],System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)">
            <summary>
            Extends BeginSend so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            socket.BeginSend(buffer, socketFlags, errorCode, callback, state);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginSend(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback)">
            <summary>
            Extends BeginSend so that when a state object is not needed, null does not need to be passed.
            <example>
            socket.BeginSend(buffer, offset, size, socketFlags, errorCode, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginSend(System.Net.Sockets.Socket,System.Byte[],System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback)">
            <summary>
            Extends BeginSend so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            socket.BeginSend(buffer, socketFlags, errorCode, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginSendFile(System.Net.Sockets.Socket,System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions,System.AsyncCallback)">
            <summary>
            Extends BeginSendFile so that when a state object is not needed, null does not need to be passed.
            <example>
            socket.BeginSendFile(fileName, preBuffer, postBuffer, flags, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginSend(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback)">
            <summary>
            Extends BeginSend so that when a state object is not needed, null does not need to be passed.
            <example>
            socket.BeginSend(buffers, socketFlags, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginSend(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback)">
            <summary>
            Extends BeginSend so that when a state object is not needed, null does not need to be passed.
            <example>
            socket.BeginSend(buffers, socketFlags, errorCode, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginSendTo(System.Net.Sockets.Socket,System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Extends BeginSendTo so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            socket.BeginSendTo(buffer, socketFlags, remoteEP, callback, state);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginSendTo(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback)">
            <summary>
            Extends BeginSendTo so that when a state object is not needed, null does not need to be passed.
            <example>
            socket.BeginSendTo(buffer, offset, size, socketFlags, remoteEP, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginSendTo(System.Net.Sockets.Socket,System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback)">
            <summary>
            Extends BeginSendTo so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            socket.BeginSendTo(buffer, socketFlags, remoteEP, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginReceive(System.Net.Sockets.Socket,System.Byte[],System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            Extends BeginReceive so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            socket.BeginReceive(buffer, socketFlags, callback, state);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginReceive(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback)">
            <summary>
            Extends BeginReceive so that when a state object is not needed, null does not need to be passed.
            <example>
            socket.BeginReceive(buffer, offset, size, socketFlags, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginReceive(System.Net.Sockets.Socket,System.Byte[],System.Net.Sockets.SocketFlags,System.AsyncCallback)">
            <summary>
            Extends BeginReceive so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            socket.BeginReceive(buffer, socketFlags, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginReceive(System.Net.Sockets.Socket,System.Byte[],System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)">
            <summary>
            Extends BeginReceive so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            socket.BeginReceive(buffer, socketFlags, errorCode, callback, state);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginReceive(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback)">
            <summary>
            Extends BeginReceive so that when a state object is not needed, null does not need to be passed.
            <example>
            socket.BeginReceive(buffer, offset, size, socketFlags, errorCode, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginReceive(System.Net.Sockets.Socket,System.Byte[],System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback)">
            <summary>
            Extends BeginReceive so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            socket.BeginReceive(buffer, socketFlags, errorCode, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginReceive(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback)">
            <summary>
            Extends BeginReceive so that when a state object is not needed, null does not need to be passed.
            <example>
            socket.BeginReceive(buffers, socketFlags, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginReceive(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback)">
            <summary>
            Extends BeginReceive so that when a state object is not needed, null does not need to be passed.
            <example>
            socket.BeginReceive(buffers, socketFlags, errorCode, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginReceiveMessageFrom(System.Net.Sockets.Socket,System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)">
            <summary>
            Extends BeginReceiveMessageFrom so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            socket.BeginReceiveMessageFrom(buffer, socketFlags, remoteEP, callback, state);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginReceiveMessageFrom(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback)">
            <summary>
            Extends BeginReceiveMessageFrom so that when a state object is not needed, null does not need to be passed.
            <example>
            socket.BeginReceiveMessageFrom(buffer, offset, size, socketFlags, remoteEP, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginReceiveMessageFrom(System.Net.Sockets.Socket,System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback)">
            <summary>
            Extends BeginReceiveMessageFrom so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            socket.BeginReceiveMessageFrom(buffer, socketFlags, remoteEP, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginReceiveFrom(System.Net.Sockets.Socket,System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)">
            <summary>
            Extends BeginReceiveFrom so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            socket.BeginReceiveFrom(buffer, socketFlags, remoteEP, callback, state);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginReceiveFrom(System.Net.Sockets.Socket,System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback)">
            <summary>
            Extends BeginReceiveFrom so that when a state object is not needed, null does not need to be passed.
            <example>
            socket.BeginReceiveFrom(buffer, offset, size, socketFlags, remoteEP, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginReceiveFrom(System.Net.Sockets.Socket,System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback)">
            <summary>
            Extends BeginReceiveFrom so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            socket.BeginReceiveFrom(buffer, socketFlags, remoteEP, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginAccept(System.Net.Sockets.Socket,System.AsyncCallback)">
            <summary>
            Extends BeginAccept so that when a state object is not needed, null does not need to be passed.
            <example>
            socket.BeginAccept(callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginAccept(System.Net.Sockets.Socket,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginAccept so that when a state object is not needed, null does not need to be passed.
            <example>
            socket.BeginAccept(receiveSize, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SocketExtensions.Socketable.BeginAccept(System.Net.Sockets.Socket,System.Net.Sockets.Socket,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginAccept so that when a state object is not needed, null does not need to be passed.
            <example>
            socket.BeginAccept(acceptSocket, receiveSize, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SplitterCancelEventHandlerExtensions.SplitterCancelEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.SplitterCancelEventHandler">SplitterCancelEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SplitterCancelEventHandlerExtensions.SplitterCancelEventHandlerable.BeginInvoke(System.Windows.Forms.SplitterCancelEventHandler,System.Object,System.Windows.Forms.SplitterCancelEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            splittercanceleventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SplitterEventHandlerExtensions.SplitterEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.SplitterEventHandler">SplitterEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SplitterEventHandlerExtensions.SplitterEventHandlerable.BeginInvoke(System.Windows.Forms.SplitterEventHandler,System.Object,System.Windows.Forms.SplitterEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            splittereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SqlBytesExtensions.SqlBytesable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.SqlTypes.SqlBytes">SqlBytes</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlBytesExtensions.SqlBytesable.Read(System.Data.SqlTypes.SqlBytes,System.Int64,System.Byte[])">
            <summary>
            Extends Read so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            sqlbytes.Read(offset, buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlBytesExtensions.SqlBytesable.Write(System.Data.SqlTypes.SqlBytes,System.Int64,System.Byte[])">
            <summary>
            Extends Write so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            sqlbytes.Write(offset, buffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SqlCharsExtensions.SqlCharsable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.SqlTypes.SqlChars">SqlChars</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlCharsExtensions.SqlCharsable.Read(System.Data.SqlTypes.SqlChars,System.Int64,System.Char[])">
            <summary>
            Extends Read so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            sqlchars.Read(offset, buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlCharsExtensions.SqlCharsable.Write(System.Data.SqlTypes.SqlChars,System.Int64,System.Char[])">
            <summary>
            Extends Write so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            sqlchars.Write(offset, buffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SqlCommandExtensions.SqlCommandable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.SqlClient.SqlCommand">SqlCommand</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlCommandExtensions.SqlCommandable.BeginExecuteNonQuery(System.Data.SqlClient.SqlCommand,System.AsyncCallback)">
            <summary>
            Extends BeginExecuteNonQuery so that when a state object is not needed, null does not need to be passed.
            <example>
            sqlcommand.BeginExecuteNonQuery(callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlCommandExtensions.SqlCommandable.BeginExecuteXmlReader(System.Data.SqlClient.SqlCommand,System.AsyncCallback)">
            <summary>
            Extends BeginExecuteXmlReader so that when a state object is not needed, null does not need to be passed.
            <example>
            sqlcommand.BeginExecuteXmlReader(callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlCommandExtensions.SqlCommandable.BeginExecuteReader(System.Data.SqlClient.SqlCommand,System.AsyncCallback)">
            <summary>
            Extends BeginExecuteReader so that when a state object is not needed, null does not need to be passed.
            <example>
            sqlcommand.BeginExecuteReader(callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlCommandExtensions.SqlCommandable.BeginExecuteReader(System.Data.SqlClient.SqlCommand,System.AsyncCallback,System.Data.CommandBehavior)">
            <summary>
            Extends BeginExecuteReader so that when a state object is not needed, null does not need to be passed.
            <example>
            sqlcommand.BeginExecuteReader(callback, behavior);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SqlDataRecordExtensions.SqlDataRecordable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:Microsoft.SqlServer.Server.SqlDataRecord">SqlDataRecord</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlDataRecordExtensions.SqlDataRecordable.GetBytes(Microsoft.SqlServer.Server.SqlDataRecord,System.Int32,System.Int64,System.Byte[])">
            <summary>
            Extends GetBytes so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            sqldatarecord.GetBytes(ordinal, fieldOffset, buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlDataRecordExtensions.SqlDataRecordable.GetChars(Microsoft.SqlServer.Server.SqlDataRecord,System.Int32,System.Int64,System.Char[])">
            <summary>
            Extends GetChars so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            sqldatarecord.GetChars(ordinal, fieldOffset, buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlDataRecordExtensions.SqlDataRecordable.SetBytes(Microsoft.SqlServer.Server.SqlDataRecord,System.Int32,System.Int64,System.Byte[])">
            <summary>
            Extends SetBytes so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            sqldatarecord.SetBytes(ordinal, fieldOffset, buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlDataRecordExtensions.SqlDataRecordable.SetChars(Microsoft.SqlServer.Server.SqlDataRecord,System.Int32,System.Int64,System.Char[])">
            <summary>
            Extends SetChars so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            sqldatarecord.SetChars(ordinal, fieldOffset, buffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SqlFileStreamExtensions.SqlFileStreamable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.SqlTypes.SqlFileStream">SqlFileStream</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlFileStreamExtensions.SqlFileStreamable.BeginRead(System.Data.SqlTypes.SqlFileStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginRead so that when a state object is not needed, null does not need to be passed.
            <example>
            sqlfilestream.BeginRead(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlFileStreamExtensions.SqlFileStreamable.BeginRead(System.Data.SqlTypes.SqlFileStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            sqlfilestream.BeginRead(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlFileStreamExtensions.SqlFileStreamable.BeginWrite(System.Data.SqlTypes.SqlFileStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
            <example>
            sqlfilestream.BeginWrite(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlFileStreamExtensions.SqlFileStreamable.BeginWrite(System.Data.SqlTypes.SqlFileStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            sqlfilestream.BeginWrite(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SqlInfoMessageEventHandlerExtensions.SqlInfoMessageEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.SqlClient.SqlInfoMessageEventHandler">SqlInfoMessageEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlInfoMessageEventHandlerExtensions.SqlInfoMessageEventHandlerable.BeginInvoke(System.Data.SqlClient.SqlInfoMessageEventHandler,System.Object,System.Data.SqlClient.SqlInfoMessageEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            sqlinfomessageeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SqlRowsCopiedEventHandlerExtensions.SqlRowsCopiedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.SqlClient.SqlRowsCopiedEventHandler">SqlRowsCopiedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlRowsCopiedEventHandlerExtensions.SqlRowsCopiedEventHandlerable.BeginInvoke(System.Data.SqlClient.SqlRowsCopiedEventHandler,System.Object,System.Data.SqlClient.SqlRowsCopiedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            sqlrowscopiedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SqlRowUpdatedEventHandlerExtensions.SqlRowUpdatedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.SqlClient.SqlRowUpdatedEventHandler">SqlRowUpdatedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlRowUpdatedEventHandlerExtensions.SqlRowUpdatedEventHandlerable.BeginInvoke(System.Data.SqlClient.SqlRowUpdatedEventHandler,System.Object,System.Data.SqlClient.SqlRowUpdatedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            sqlrowupdatedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SqlRowUpdatingEventHandlerExtensions.SqlRowUpdatingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.SqlClient.SqlRowUpdatingEventHandler">SqlRowUpdatingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SqlRowUpdatingEventHandlerExtensions.SqlRowUpdatingEventHandlerable.BeginInvoke(System.Data.SqlClient.SqlRowUpdatingEventHandler,System.Object,System.Data.SqlClient.SqlRowUpdatingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            sqlrowupdatingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.SslStreamExtensions.SslStreamable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.Security.SslStream">SslStream</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SslStreamExtensions.SslStreamable.BeginAuthenticateAsClient(System.Net.Security.SslStream,System.String,System.AsyncCallback)">
            <summary>
            Extends BeginAuthenticateAsClient so that when a state object is not needed, null does not need to be passed.
            <example>
            sslstream.BeginAuthenticateAsClient(targetHost, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SslStreamExtensions.SslStreamable.BeginAuthenticateAsClient(System.Net.Security.SslStream,System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback)">
            <summary>
            Extends BeginAuthenticateAsClient so that when a state object is not needed, null does not need to be passed.
            <example>
            sslstream.BeginAuthenticateAsClient(targetHost, clientCertificates, enabledSslProtocols, checkCertificateRevocation, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SslStreamExtensions.SslStreamable.BeginAuthenticateAsServer(System.Net.Security.SslStream,System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback)">
            <summary>
            Extends BeginAuthenticateAsServer so that when a state object is not needed, null does not need to be passed.
            <example>
            sslstream.BeginAuthenticateAsServer(serverCertificate, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SslStreamExtensions.SslStreamable.BeginAuthenticateAsServer(System.Net.Security.SslStream,System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback)">
            <summary>
            Extends BeginAuthenticateAsServer so that when a state object is not needed, null does not need to be passed.
            <example>
            sslstream.BeginAuthenticateAsServer(serverCertificate, clientCertificateRequired, enabledSslProtocols, checkCertificateRevocation, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SslStreamExtensions.SslStreamable.BeginRead(System.Net.Security.SslStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginRead so that when a state object is not needed, null does not need to be passed.
            <example>
            sslstream.BeginRead(buffer, offset, count, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SslStreamExtensions.SslStreamable.BeginRead(System.Net.Security.SslStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            sslstream.BeginRead(buffer, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SslStreamExtensions.SslStreamable.BeginWrite(System.Net.Security.SslStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
            <example>
            sslstream.BeginWrite(buffer, offset, count, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.SslStreamExtensions.SslStreamable.BeginWrite(System.Net.Security.SslStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            sslstream.BeginWrite(buffer, asyncCallback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.StateChangeEventHandlerExtensions.StateChangeEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.StateChangeEventHandler">StateChangeEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StateChangeEventHandlerExtensions.StateChangeEventHandlerable.BeginInvoke(System.Data.StateChangeEventHandler,System.Object,System.Data.StateChangeEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            statechangeeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.StatementCompletedEventHandlerExtensions.StatementCompletedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Data.StatementCompletedEventHandler">StatementCompletedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StatementCompletedEventHandlerExtensions.StatementCompletedEventHandlerable.BeginInvoke(System.Data.StatementCompletedEventHandler,System.Object,System.Data.StatementCompletedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            statementcompletedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.StatusBarDrawItemEventHandlerExtensions.StatusBarDrawItemEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.StatusBarDrawItemEventHandler">StatusBarDrawItemEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StatusBarDrawItemEventHandlerExtensions.StatusBarDrawItemEventHandlerable.BeginInvoke(System.Windows.Forms.StatusBarDrawItemEventHandler,System.Object,System.Windows.Forms.StatusBarDrawItemEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            statusbardrawitemeventhandler.BeginInvoke(sender, sbdevent, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.StatusBarPanelClickEventHandlerExtensions.StatusBarPanelClickEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.StatusBarPanelClickEventHandler">StatusBarPanelClickEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StatusBarPanelClickEventHandlerExtensions.StatusBarPanelClickEventHandlerable.BeginInvoke(System.Windows.Forms.StatusBarPanelClickEventHandler,System.Object,System.Windows.Forms.StatusBarPanelClickEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            statusbarpanelclickeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.StreamExtensions.Streamable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.Stream">Stream</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.BeginReadToEnd(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously read to end of stream
            </summary>
            <example>
            byte[] buffer = new byte[1024];
            stream.BeginReadToEnd(buffer, 0, buffer.Length, ar =>
                                                           {
                                                           	int bytesRead = stream.EndRead(ar);
                                                           	ProcessData(buffer, bytesRead);
                                                           }, null);
            </example>
            <param name="stream">The stream for which this extension method acts upon.</param>
            <param name="buffer">The buffer to read the data into. </param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin writing data read from the stream. </param>
            <param name="count">The maximum number of bytes to read. </param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete. </param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests. </param>
            <exception cref="T:System.IO.IOException">Attempted an asynchronous read past the end of the stream, or a disk error occurs. </exception>
            <exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The current Stream implementation does not support the read operation. </exception>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous read, which could still be pending.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.BeginReadToEnd(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Asynchronously read to end of stream into a given buffer at given offset, of given size.
            This version does not use a state Object.
            </summary>
            <example>
            byte[] buffer = new byte[1024];
            stream.BeginReadToEnd(buffer, 0, buffer.Length, ar =>
                                                           {
                                                           	int bytesRead = stream.EndRead(ar);
                                                           	ProcessData(buffer, bytesRead);
                                                           });
            </example>
            <param name="stream">The stream for which this extension method acts upon.</param>
            <param name="buffer">The buffer to read the data into. </param>
            <param name="offset">The byte offset in <paramref name="buffer"/> at which to begin writing data read from the stream. </param>
            <param name="count">The maximum number of bytes to read. </param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete. </param>
            <exception cref="T:System.IO.IOException">Attempted an asynchronous read past the end of the stream, or a disk error occurs. </exception>
            <exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The current Stream implementation does not support the read operation. </exception>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.BeginReadToEnd(System.IO.Stream,System.Byte[],System.AsyncCallback)">
            <summary>
            Asynchronously read to end of stream depending on size of buffer, starting at offset 0.
            This version does not use a state Object.
            </summary>
            <example>
            byte[] buffer = new byte[1024];
            stream.BeginReadToEnd(buffer, ar =>
                                                           {
                                                           	int bytesRead = stream.EndRead(ar);
                                                           	ProcessData(buffer, bytesRead);
                                                           });
            </example>
            <param name="stream">The stream for which this extension method acts upon.</param>
            <param name="buffer">The buffer to read the data into. </param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete. </param>
            <exception cref="T:System.IO.IOException">Attempted an asynchronous read past the end of the stream, or a disk error occurs. </exception>
            <exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The current Stream implementation does not support the read operation. </exception>
            <returns>An <see cref="T:System.IAsyncResult"/> that represents the asynchronous read, which could still be pending.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.EndReadToEnd(System.IO.Stream,System.IAsyncResult)">
            <summary>
            The Asynchronous Programming Model matching End method to the corresponding BeginReadToEnd methods.
            </summary>
            <param name="stream"></param>
            <param name="ar">The reference to the pending asynchronous request to finish. </param><exception cref="T:System.ArgumentNullException"><paramref name="ar"/> is null. </exception><exception cref="T:System.ArgumentException">A handle to the pending read operation is not available.-or-The pending operation does not support reading.</exception><exception cref="T:System.InvalidOperationException"><paramref name="ar"/> did not originate from a <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)"/> method on the current stream.</exception><exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception><filterpriority>2</filterpriority>
            <returns>
            The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.
            </returns>
            <exception cref="T:System.ArgumentException">One or more of the arguments is invalid. </exception>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.WriteAsync(System.IO.Stream,System.Byte[])">
            <summary>
            Extends WriteAsync so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            socket.WriteAsync(buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.ReadAsync(System.IO.Stream,System.Byte[])">
            <summary>
            Extends ReadAsync so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            socket.ReadAsync(buffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.StreamExtensions.Streamable.ByteArrayAsyncState">
            <summary>
            private state class to transfer state information between invocations of StreamExtensions.OnRead
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.Seek(System.IO.Stream,System.IO.SeekOrigin)">
            <summary>
            Seek with default offset of 0.
            </summary>
            <param name="stream"><seealso cref="T:System.IO.Stream"/> to operate on</param>
            <param name="seekOrigin"><seealso cref="F:System.IO.SeekOrigin.Begin"/> to seek to start,
            <seealso cref="F:System.IO.SeekOrigin.End"/> to seek to end, or <seealso cref="F:System.IO.SeekOrigin.Current"/> to do nothing.</param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.BeginRead(System.IO.Stream,System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.BeginRead(buffer, callback, state);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.BeginRead(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginRead so that when a state object is not needed, null does not need to be passed.
            <example>
            stream.BeginRead(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.BeginRead(System.IO.Stream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.BeginRead(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.BeginWrite(System.IO.Stream,System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.BeginWrite(buffer, callback, state);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.BeginWrite(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
            <example>
            stream.BeginWrite(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.BeginWrite(System.IO.Stream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.BeginWrite(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.Read(System.IO.Stream,System.Byte[])">
            <summary>
            Extends Read so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.Read(buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StreamExtensions.Streamable.Write(System.IO.Stream,System.Byte[])">
            <summary>
            Extends Write so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.Write(buffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.StringBuilderExtensions.StringBuilderable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Text.StringBuilder">StringBuilder</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StringBuilderExtensions.StringBuilderable.CopyTo(System.Text.StringBuilder,System.Int32,System.Char[])">
            <summary>
            Extends CopyTo so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stringbuilder.CopyTo(sourceIndex, destination);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.StringConverterExtensions.StringConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.StringConverter">StringConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StringConverterExtensions.StringConverterable.ConvertTo``1(System.ComponentModel.StringConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StringConverterExtensions.StringConverterable.ConvertTo``1(System.ComponentModel.StringConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.StringExtensions.Stringable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.String">String</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.StringExtensions.Stringable.Right(System.String,System.Int32)">
            <summary>
            Returns the last few characters of the string with a length
            specified by the given parameter. If the string's length is less than the
            given length the complete string is returned. If length is zero or
            less an empty string is returned
            </summary>
            <param name="s">the string to process</param>
            <param name="length">Number of characters to return</param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StringExtensions.Stringable.Left(System.String,System.Int32)">
            <summary>
            Returns the first few characters of the string with a length
            specified by the given parameter. If the string's length is less than the
            given length the complete string is returned. If length is zero or
            less an empty string is returned
            </summary>
            <param name="s">the string to process</param>
            <param name="length">Number of characters to return</param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StringExtensions.Stringable.ReplaceEach(System.String,System.Collections.Generic.IEnumerable{System.Char},System.Char)">
            <summary>
            Replace any instances of individual elements in <paramref name="chars"/> with <paramref name="c"/>
            in <paramref name="text"/>.
            </summary>
            <param name="text">string to search within.</param>
            <param name="chars">individual characters to search for.</param>
            <param name="c">character to replace any found characters with.</param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StringExtensions.Stringable.Truncate(System.String,System.Int32)">
            <summary>
            Truncate string <paramref name="text"/> to a maximim length of <paramref name="maxLength"/>
            </summary>
            <param name="text"></param>
            <param name="maxLength"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StringExtensions.Stringable.ToIntOrNull(System.String)">
            <summary>
            Convert a string value to an int.
            </summary>
            <param name="source"></param>
            <returns>null if textual value is not an int or the int value.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StringExtensions.Stringable.ToIntOrDefault(System.String)">
            <summary>
            Convert a string value to an int.
            </summary>
            <param name="source"></param>
            <returns>0 if textual value is not an int or the int value.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StringExtensions.Stringable.ToInt(System.String,System.Int32)">
            <summary>
            Convert a string value to an int.
            </summary>
            <param name="source"></param>
            <param name="defaultValue"></param>
            <returns><paramref name="defaultValue"/> if textual value is not an int or the int value.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StringExtensions.Stringable.ToLongOrNull(System.String)">
            <summary>
            Convert a string value to a long.
            </summary>
            <param name="source"></param>
            <returns>null if textual value is not a long or the long value.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StringExtensions.Stringable.ToLongOrDefault(System.String)">
            <summary>
            Convert a string value to a long.
            </summary>
            <param name="source"></param>
            <returns>0L if textual value is not a long or the long value.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StringExtensions.Stringable.ToDateTimeOrNull(System.String)">
            <summary>
            Convert a string value to a DateTime.
            </summary>
            <param name="source"></param>
            <returns>null if textual value is not a DateTime or the DateTime value.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StringExtensions.Stringable.ToTimeSpanOrNull(System.String)">
            <summary>
            Convert a string value to a TimeSpan.
            </summary>
            <param name="source"></param>
            <returns>null if textual value is not a TimeSpan or the TimeSpan value.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StringExtensions.Stringable.ToDoubleOrNull(System.String)">
            <summary>
            Convert a string value to double.
            </summary>
            <param name="source"></param>
            <returns>null if textual value is not a double or the double value.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StringExtensions.Stringable.ToDoubleOrDefault(System.String)">
            <summary>
            Convert a string value to double.
            </summary>
            <param name="source"></param>
            <returns>0d if textual value is not a double or the double value.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StringExtensions.Stringable.ToDecimalOrNull(System.String)">
            <summary>
            Convert a string value to decimal.
            </summary>
            <param name="source"></param>
            <returns>null if textual value is not a decimal or the decimal value.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StringExtensions.Stringable.ToDecimalOrDefault(System.String)">
            <summary>
            Convert a string value to decimal.
            </summary>
            <param name="source"></param>
            <returns>0M if textual value is not a decimal or the decimal value.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StringExtensions.Stringable.ToBoolOrNull(System.String)">
            <summary>
            conert a string to a boolean. Ignore-compare of "True" for true, and "False" for false.
            </summary>
            <param name="source"></param>
            <returns>null if non-boolean textual value or true/false</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StringExtensions.Stringable.ToGuidOrNull(System.String)">
            <summary>
            Convert a string to a GUID
            </summary>
            <param name="source"></param>
            <returns>GUID or null if non-GUID textual value.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StringExtensions.Stringable.FirstWord(System.String)">
            <summary>
            Get the first "Word" in a string--separated by space.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.StringExtensions.Stringable.CopyTo(System.String,System.Int32,System.Char[])">
            <summary>
            Extends CopyTo so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            text.CopyTo(sourceIndex, destination);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TabControlCancelEventHandlerExtensions.TabControlCancelEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.TabControlCancelEventHandler">TabControlCancelEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TabControlCancelEventHandlerExtensions.TabControlCancelEventHandlerable.BeginInvoke(System.Windows.Forms.TabControlCancelEventHandler,System.Object,System.Windows.Forms.TabControlCancelEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            tabcontrolcanceleventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TabControlEventHandlerExtensions.TabControlEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.TabControlEventHandler">TabControlEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TabControlEventHandlerExtensions.TabControlEventHandlerable.BeginInvoke(System.Windows.Forms.TabControlEventHandler,System.Object,System.Windows.Forms.TabControlEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            tabcontroleventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TableLayoutCellPaintEventHandlerExtensions.TableLayoutCellPaintEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.TableLayoutCellPaintEventHandler">TableLayoutCellPaintEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TableLayoutCellPaintEventHandlerExtensions.TableLayoutCellPaintEventHandlerable.BeginInvoke(System.Windows.Forms.TableLayoutCellPaintEventHandler,System.Object,System.Windows.Forms.TableLayoutCellPaintEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            tablelayoutcellpainteventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TableLayoutSettingsTypeConverterExtensions.TableLayoutSettingsTypeConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.Layout.TableLayoutSettingsTypeConverter">TableLayoutSettingsTypeConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TableLayoutSettingsTypeConverterExtensions.TableLayoutSettingsTypeConverterable.ConvertTo``1(System.Windows.Forms.Layout.TableLayoutSettingsTypeConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TableLayoutSettingsTypeConverterExtensions.TableLayoutSettingsTypeConverterable.ConvertTo``1(System.Windows.Forms.Layout.TableLayoutSettingsTypeConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            tablelayoutsettingstypeconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TaskExtensions.Taskable.ToApm``1(System.Threading.Tasks.Task{``0},System.AsyncCallback,System.Object)">
             from: http://blogs.msdn.com/b/pfxteam/archive/2011/06/27/10179452.aspx
             <summary>
             Converts an executing task from a TAP implementation to another that can be used in an APM implementation
             </summary>
             <typeparam name="TResult">inferred type of the result</typeparam>
             <param name="task"><see cref="T:System.Threading.Tasks.Task`1"/> object that is executing</param>
             <param name="callback"><see cref="T:System.AsyncCallback"/> from the Begin* method.</param>
             <param name="state">Optional state</param>
             <example>
             static IAsyncResult BeginFoo(AsyncCallback callback, object state)
             {
             	return FooAsync().ToApm(callback, state);
             }
            
             static int EndFoo(IAsyncResult asyncResult)
             {
                return ((Task&lt;int&gt;)asyncResult).Result;
             }
             </example>
             <returns>New task that can be cast to <see cref="T:System.IAsyncResult"/>.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TaskExtensions.Taskable.ToApm(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)">
             from: http://blogs.msdn.com/b/pfxteam/archive/2011/06/27/10179452.aspx
             <summary>
             Converts an executing task from a TAP implementation to another that can be used in an APM implementation
             </summary>
             <param name="task"><see cref="T:System.Threading.Tasks.Task`1"/> object that is executing</param>
             <param name="callback"><see cref="T:System.AsyncCallback"/> from the Begin* method.</param>
             <param name="state">Optional state</param>
             <example>
             static IAsyncResult BeginFoo(AsyncCallback callback, object state)
             {
             	return FooAsync().ToApm(callback, state);
             }
            
             static void EndFoo(IAsyncResult asyncResult)
             {
                ((Task)asyncResult).Result;
             }
             </example>
             <returns>New task that can be cast to <see cref="T:System.IAsyncResult"/>.</returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TaskFactoryExtensions.TaskFactoryable.FromAsync``1(System.Threading.Tasks.TaskFactory,System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0)">
            <summary>
             Extends FromAsync so that when a state object is not needed, null does not need to be passed.
            </summary>
            <param name="taskFactory"></param>
            <param name="beginMethod">The delegate that begins the asynchronous operation.</param><param name="endMethod">The delegate that ends the asynchronous operation.</param><param name="arg1">The first argument passed to the <paramref name="beginMethod"/> delegate.</param><typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod"/> delegate.</typeparam><exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod"/> argument is null.-or-The exception that is thrown when the <paramref name="endMethod"/> argument is null.</exception>
            <returns>
            The created <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TaskFactoryExtensions.TaskFactoryable.FromAsync``1(System.Threading.Tasks.TaskFactory,System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
             Extends FromAsync so that when a state object is not needed, null does not need to be passed.
            </summary>
            <param name="taskFactory"></param>
            <param name="beginMethod">The delegate that begins the asynchronous operation.</param><param name="endMethod">The delegate that ends the asynchronous operation.</param><param name="arg1">The first argument passed to the <paramref name="beginMethod"/> delegate.</param><param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task"/>.</param><typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod"/> delegate.</typeparam><exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod"/> argument is null.-or-The exception that is thrown when the <paramref name="endMethod"/> argument is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions"/> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <paramref name="creationOptions"/> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"/></exception>
            <returns>
            The created <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TaskFactoryExtensions.TaskFactoryable.FromAsync``2(System.Threading.Tasks.TaskFactory,System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1)">
            <summary>
             Extends FromAsync so that when a state object is not needed, null does not need to be passed.
            </summary>
            <param name="taskFactory"></param>
            <param name="beginMethod">The delegate that begins the asynchronous operation.</param><param name="endMethod">The delegate that ends the asynchronous operation.</param><param name="arg1">The first argument passed to the <paramref name="beginMethod"/> delegate.</param><typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod"/> delegate.</typeparam><exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod"/> argument is null.-or-The exception that is thrown when the <paramref name="endMethod"/> argument is null.</exception>
            <typeparam name="TArg2">The type of the third argument passed to <paramref name="beginMethod"/> delegate.</typeparam>
            <param name="arg2">The second argument passed to the <paramref name="beginMethod"/> delegate.</param>
            <returns>
            The created <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TaskFactoryExtensions.TaskFactoryable.FromAsync``2(System.Threading.Tasks.TaskFactory,System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
             Extends FromAsync so that when a state object is not needed, null does not need to be passed.
            </summary>
            <param name="taskFactory"></param>
            <param name="beginMethod">The delegate that begins the asynchronous operation.</param><param name="endMethod">The delegate that ends the asynchronous operation.</param><param name="arg1">The first argument passed to the <paramref name="beginMethod"/> delegate.</param><param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task"/>.</param><typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod"/> delegate.</typeparam><exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod"/> argument is null.-or-The exception that is thrown when the <paramref name="endMethod"/> argument is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions"/> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <paramref name="creationOptions"/> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"/></exception>
            <typeparam name="TArg2">The type of the third argument passed to <paramref name="beginMethod"/> delegate.</typeparam>
            <param name="arg2">The second argument passed to the <paramref name="beginMethod"/> delegate.</param>
            <returns>
            The created <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TaskFactoryExtensions.TaskFactoryable.FromAsync``3(System.Threading.Tasks.TaskFactory,System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2)">
            <summary>
             Extends FromAsync so that when a state object is not needed, null does not need to be passed.
            </summary>
            <param name="taskFactory"></param>
            <param name="beginMethod">The delegate that begins the asynchronous operation.</param><param name="endMethod">The delegate that ends the asynchronous operation.</param><param name="arg1">The first argument passed to the <paramref name="beginMethod"/> delegate.</param><typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod"/> delegate.</typeparam><exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod"/> argument is null.-or-The exception that is thrown when the <paramref name="endMethod"/> argument is null.</exception>
            <typeparam name="TArg2">The type of the third argument passed to <paramref name="beginMethod"/> delegate.</typeparam><typeparam name="TArg3">The type of the first argument passed to the <paramref name="beginMethod"/> delegate.</typeparam>
            <param name="arg2">The second argument passed to the <paramref name="beginMethod"/> delegate.</param><param name="arg3">The third argument passed to the <paramref name="beginMethod"/> delegate.</param>
            <returns>
            The created <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TaskFactoryExtensions.TaskFactoryable.FromAsync``3(System.Threading.Tasks.TaskFactory,System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
             Extends FromAsync so that when a state object is not needed, null does not need to be passed.
            </summary>
            <param name="taskFactory"></param>
            <param name="beginMethod">The delegate that begins the asynchronous operation.</param><param name="endMethod">The delegate that ends the asynchronous operation.</param><param name="arg1">The first argument passed to the <paramref name="beginMethod"/> delegate.</param><param name="creationOptions">The TaskCreationOptions value that controls the behavior of the created <see cref="T:System.Threading.Tasks.Task"/>.</param><typeparam name="TArg1">The type of the first argument passed to the <paramref name="beginMethod"/> delegate.</typeparam><exception cref="T:System.ArgumentNullException">The exception that is thrown when the <paramref name="beginMethod"/> argument is null.-or-The exception that is thrown when the <paramref name="endMethod"/> argument is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">The exception that is thrown when the <paramref name="creationOptions"/> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <paramref name="creationOptions"/> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)"/></exception>
            <typeparam name="TArg2">The type of the third argument passed to <paramref name="beginMethod"/> delegate.</typeparam><typeparam name="TArg3">The type of the first argument passed to the <paramref name="beginMethod"/> delegate.</typeparam>		/// <returns></returns>
            <param name="arg2">The second argument passed to the <paramref name="beginMethod"/> delegate.</param><param name="arg3">The third argument passed to the <paramref name="beginMethod"/> delegate.</param>
            <returns>
            The created <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.
            </returns>
        </member>
        <member name="T:PRI.ProductivityExtensions.TcpClientExtensions.TcpClientable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.Sockets.TcpClient">TcpClient</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TcpClientExtensions.TcpClientable.ConnectAsync(System.Net.Sockets.TcpClient,System.Net.EndPoint)">
            <summary>
            Connect asyncronously to <param name="endPoint"></param>
            </summary>
            <param name="tcpClient"><see cref="T:System.Net.Sockets.TcpClient"/> object to connect with</param>
            <param name="endPoint"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">if <param name="endPoint"/> is not a 
            <see cref="T:System.Net.DnsEndPoint"/> nor an <see cref="T:System.Net.IPEndPoint"/></exception>
        </member>
        <member name="M:PRI.ProductivityExtensions.TcpClientExtensions.TcpClientable.BeginConnect(System.Net.Sockets.TcpClient,System.String,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginConnect so that when a state object is not needed, null does not need to be passed.
            <example>
            tcpclient.BeginConnect(host, port, requestCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TcpClientExtensions.TcpClientable.BeginConnect(System.Net.Sockets.TcpClient,System.Net.IPAddress,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginConnect so that when a state object is not needed, null does not need to be passed.
            <example>
            tcpclient.BeginConnect(address, port, requestCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TcpClientExtensions.TcpClientable.BeginConnect(System.Net.Sockets.TcpClient,System.Net.IPAddress[],System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginConnect so that when a state object is not needed, null does not need to be passed.
            <example>
            tcpclient.BeginConnect(addresses, port, requestCallback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TcpListenerExtensions.TcpListenerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.Sockets.TcpListener">TcpListener</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TcpListenerExtensions.TcpListenerable.BeginAcceptSocket(System.Net.Sockets.TcpListener,System.AsyncCallback)">
            <summary>
            Extends BeginAcceptSocket so that when a state object is not needed, null does not need to be passed.
            <example>
            tcplistener.BeginAcceptSocket(callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TcpListenerExtensions.TcpListenerable.BeginAcceptTcpClient(System.Net.Sockets.TcpListener,System.AsyncCallback)">
            <summary>
            Extends BeginAcceptTcpClient so that when a state object is not needed, null does not need to be passed.
            <example>
            tcplistener.BeginAcceptTcpClient(callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.EndOfDay(System.DateTime)">
            <summary>
            Gets a <seealso cref="T:System.DateTime"/> that represents the last millisecond of the day represented by <paramref name="date"/>
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.BeginningOfDay(System.DateTime)">
            <summary>
            Gets a <seealso cref="T:System.DateTime"/> that represents the first  millisecond of the day represented by <paramref name="date"/>
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.From(System.TimeSpan,System.DateTime)">
            <summary>
            Calculates a final date spanning <paramref name="source"/> after <paramref name="origin"/>
            <example>
            // calculate date/time that it will be in one hour
            var finalDate = new TimeSpan(0, 1, 0, 0).From(DateTime.Now);
            </example>
            </summary>
            <param name="source"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Since(System.TimeSpan,System.DateTime)">
            <summary>
            Calculates a final date spanning <paramref name="source"/> after <paramref name="origin"/>
            Alias to <seealso cref="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.From(System.TimeSpan,System.DateTime)"/>
            </summary>
            <param name="source"></param>
            <param name="origin"></param>
            <seealso cref="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.From(System.TimeSpan,System.DateTime)"/>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Years(System.Int32)">
            <summary>
            Creates a <see cref="T:System.TimeSpan"/> spanning <paramref name="source"/> years.
            <example>
            var oneYear = 1.Years();
            </example>
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Months(System.Int32)">
            <summary>
            Creates a <see cref="T:System.TimeSpan"/> spanning <paramref name="source"/> months.
            </summary>
            var oneMonth = 1.Months();
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Minutes(System.Int32)">
            <summary>
            Creates a <see cref="T:System.TimeSpan"/> spanning <paramref name="source"/> minutes.
            <example>
            var oneMinute = 1.Minutes();
            </example>
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Hours(System.Int32)">
            <summary>
            Creates a <see cref="T:System.TimeSpan"/> spanning <paramref name="source"/> hours.
            <example>
            var oneHour = 1.Hours();
            </example>
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Days(System.Int32)">
            <summary>
            Creates a <see cref="T:System.TimeSpan"/> spanning <paramref name="source"/> days.
            <example>
            var oneDay = 1.Days();
            </example>
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Second(System.Int32)">
            <summary>
            Creates a <see cref="T:System.TimeSpan"/> spanning 1 second.
            <example>
            var oneSecond = 1.Second();
            </example>
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Seconds(System.Int32)">
            <summary>
            Creates a <see cref="T:System.TimeSpan"/> spanning <paramref name="source"/> seconds.
            <example>
            var fiveSeconds = 5.Second();
            </example>
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Milliseconds(System.Int32)">
            <summary>
            Creates a <see cref="T:System.TimeSpan"/> spanning <paramref name="source"/> milliseconds.
            <example>
            var fiftyMilliseconds = 50.Milliseconds();
            </example>
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Ago(System.TimeSpan,System.DateTime)">
            <summary>
            Creates a final <see cref="T:System.DateTime"/> <paramref name="source"/> in the past
            <example>
            50.Seconds.Ago();
            </example>
            </summary>
            <param name="source"></param>
            <param name="now">DateTime, or DateTime.Now if missing</param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Double(System.TimeSpan)">
            <summary>
            Doubles a <see cref="T:System.TimeSpan"/>
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.RoundToHours(System.TimeSpan)">
            <summary>
            Rounds a <see cref="T:System.TimeSpan"/> to the nearest hour
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.RoundToMinutes(System.TimeSpan)">
            <summary>
            Rounds a <see cref="T:System.TimeSpan"/> to the nearest minute
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.RoundToSeconds(System.TimeSpan)">
            <summary>
            Rounds a <see cref="T:System.TimeSpan"/> to the nearest second
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Million(System.Int32)">
            <summary>
            Creates an int of <paramref name="value"/> million.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.Thousand(System.Int32)">
            <summary>
            Creates an int of <paramref name="value"/> thousand.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.TemporalExtensions.Temporalable.ToEnglishString(System.TimeSpan)">
            <summary>
            Creates an English string from a <see cref="T:System.TimeSpan"/> value
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="T:PRI.ProductivityExtensions.TextReaderExtensions.TextReaderable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.TextReader">TextReader</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TextReaderExtensions.TextReaderable.Read(System.IO.TextReader,System.Char[])">
            <summary>
            Extends Read so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            textreader.Read(buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TextReaderExtensions.TextReaderable.ReadBlock(System.IO.TextReader,System.Char[])">
            <summary>
            Extends ReadBlock so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            textreader.ReadBlock(buffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ThreadExceptionEventHandlerExtensions.ThreadExceptionEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Threading.ThreadExceptionEventHandler">ThreadExceptionEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ThreadExceptionEventHandlerExtensions.ThreadExceptionEventHandlerable.BeginInvoke(System.Threading.ThreadExceptionEventHandler,System.Object,System.Threading.ThreadExceptionEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            threadexceptioneventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ThreadStartExtensions.ThreadStartable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Threading.ThreadStart">ThreadStart</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ThreadStartExtensions.ThreadStartable.BeginInvoke(System.Threading.ThreadStart,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            threadstart.BeginInvoke(callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TimerCallbackExtensions.TimerCallbackable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Threading.TimerCallback">TimerCallback</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TimerCallbackExtensions.TimerCallbackable.BeginInvoke(System.Threading.TimerCallback,System.Object,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            timercallback.BeginInvoke(state, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TimerElapsedEventHandlerExtensions.TimerElapsedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:Microsoft.Win32.TimerElapsedEventHandler">TimerElapsedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TimerElapsedEventHandlerExtensions.TimerElapsedEventHandlerable.BeginInvoke(Microsoft.Win32.TimerElapsedEventHandler,System.Object,Microsoft.Win32.TimerElapsedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            timerelapsedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TimeSpanConverterExtensions.TimeSpanConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.TimeSpanConverter">TimeSpanConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TimeSpanConverterExtensions.TimeSpanConverterable.ConvertTo``1(System.ComponentModel.TimeSpanConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            timespanconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TimeSpanConverterExtensions.TimeSpanConverterable.ConvertTo``1(System.ComponentModel.TimeSpanConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToBase64TransformExtensions.ToBase64Transformable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Security.Cryptography.ToBase64Transform">ToBase64Transform</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToBase64TransformExtensions.ToBase64Transformable.TransformBlock(System.Security.Cryptography.ToBase64Transform,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Extends TransformBlock so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            tobase64transform.TransformBlock(inputBuffer, outputBuffer, outputOffset);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToBase64TransformExtensions.ToBase64Transformable.TransformFinalBlock(System.Security.Cryptography.ToBase64Transform,System.Byte[])">
            <summary>
            Extends TransformFinalBlock so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            tobase64transform.TransformFinalBlock(inputBuffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolBarButtonClickEventHandlerExtensions.ToolBarButtonClickEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolBarButtonClickEventHandler">ToolBarButtonClickEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolBarButtonClickEventHandlerExtensions.ToolBarButtonClickEventHandlerable.BeginInvoke(System.Windows.Forms.ToolBarButtonClickEventHandler,System.Object,System.Windows.Forms.ToolBarButtonClickEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolbarbuttonclickeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolboxComponentsCreatedEventHandlerExtensions.ToolboxComponentsCreatedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.Design.ToolboxComponentsCreatedEventHandler">ToolboxComponentsCreatedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolboxComponentsCreatedEventHandlerExtensions.ToolboxComponentsCreatedEventHandlerable.BeginInvoke(System.Drawing.Design.ToolboxComponentsCreatedEventHandler,System.Object,System.Drawing.Design.ToolboxComponentsCreatedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolboxcomponentscreatedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolboxComponentsCreatingEventHandlerExtensions.ToolboxComponentsCreatingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.Design.ToolboxComponentsCreatingEventHandler">ToolboxComponentsCreatingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolboxComponentsCreatingEventHandlerExtensions.ToolboxComponentsCreatingEventHandlerable.BeginInvoke(System.Drawing.Design.ToolboxComponentsCreatingEventHandler,System.Object,System.Drawing.Design.ToolboxComponentsCreatingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolboxcomponentscreatingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolboxItemCreatorCallbackExtensions.ToolboxItemCreatorCallbackable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Drawing.Design.ToolboxItemCreatorCallback">ToolboxItemCreatorCallback</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolboxItemCreatorCallbackExtensions.ToolboxItemCreatorCallbackable.BeginInvoke(System.Drawing.Design.ToolboxItemCreatorCallback,System.Object,System.String,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolboxitemcreatorcallback.BeginInvoke(serializedObject, format, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripArrowRenderEventHandlerExtensions.ToolStripArrowRenderEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripArrowRenderEventHandler">ToolStripArrowRenderEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripArrowRenderEventHandlerExtensions.ToolStripArrowRenderEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripArrowRenderEventHandler,System.Object,System.Windows.Forms.ToolStripArrowRenderEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstriparrowrendereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripContentPanelRenderEventHandlerExtensions.ToolStripContentPanelRenderEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripContentPanelRenderEventHandler">ToolStripContentPanelRenderEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripContentPanelRenderEventHandlerExtensions.ToolStripContentPanelRenderEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripContentPanelRenderEventHandler,System.Object,System.Windows.Forms.ToolStripContentPanelRenderEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstripcontentpanelrendereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripDropDownClosedEventHandlerExtensions.ToolStripDropDownClosedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripDropDownClosedEventHandler">ToolStripDropDownClosedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripDropDownClosedEventHandlerExtensions.ToolStripDropDownClosedEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripDropDownClosedEventHandler,System.Object,System.Windows.Forms.ToolStripDropDownClosedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstripdropdownclosedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripDropDownClosingEventHandlerExtensions.ToolStripDropDownClosingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripDropDownClosingEventHandler">ToolStripDropDownClosingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripDropDownClosingEventHandlerExtensions.ToolStripDropDownClosingEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripDropDownClosingEventHandler,System.Object,System.Windows.Forms.ToolStripDropDownClosingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstripdropdownclosingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripGripRenderEventHandlerExtensions.ToolStripGripRenderEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripGripRenderEventHandler">ToolStripGripRenderEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripGripRenderEventHandlerExtensions.ToolStripGripRenderEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripGripRenderEventHandler,System.Object,System.Windows.Forms.ToolStripGripRenderEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstripgriprendereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripItemClickedEventHandlerExtensions.ToolStripItemClickedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripItemClickedEventHandler">ToolStripItemClickedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripItemClickedEventHandlerExtensions.ToolStripItemClickedEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripItemClickedEventHandler,System.Object,System.Windows.Forms.ToolStripItemClickedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstripitemclickedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripItemEventHandlerExtensions.ToolStripItemEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripItemEventHandler">ToolStripItemEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripItemEventHandlerExtensions.ToolStripItemEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripItemEventHandler,System.Object,System.Windows.Forms.ToolStripItemEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstripitemeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripItemImageRenderEventHandlerExtensions.ToolStripItemImageRenderEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripItemImageRenderEventHandler">ToolStripItemImageRenderEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripItemImageRenderEventHandlerExtensions.ToolStripItemImageRenderEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripItemImageRenderEventHandler,System.Object,System.Windows.Forms.ToolStripItemImageRenderEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstripitemimagerendereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripItemRenderEventHandlerExtensions.ToolStripItemRenderEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripItemRenderEventHandler">ToolStripItemRenderEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripItemRenderEventHandlerExtensions.ToolStripItemRenderEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripItemRenderEventHandler,System.Object,System.Windows.Forms.ToolStripItemRenderEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstripitemrendereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripItemTextRenderEventHandlerExtensions.ToolStripItemTextRenderEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripItemTextRenderEventHandler">ToolStripItemTextRenderEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripItemTextRenderEventHandlerExtensions.ToolStripItemTextRenderEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripItemTextRenderEventHandler,System.Object,System.Windows.Forms.ToolStripItemTextRenderEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstripitemtextrendereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripPanelRenderEventHandlerExtensions.ToolStripPanelRenderEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripPanelRenderEventHandler">ToolStripPanelRenderEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripPanelRenderEventHandlerExtensions.ToolStripPanelRenderEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripPanelRenderEventHandler,System.Object,System.Windows.Forms.ToolStripPanelRenderEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstrippanelrendereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripRenderEventHandlerExtensions.ToolStripRenderEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripRenderEventHandler">ToolStripRenderEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripRenderEventHandlerExtensions.ToolStripRenderEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripRenderEventHandler,System.Object,System.Windows.Forms.ToolStripRenderEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstriprendereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ToolStripSeparatorRenderEventHandlerExtensions.ToolStripSeparatorRenderEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.ToolStripSeparatorRenderEventHandler">ToolStripSeparatorRenderEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ToolStripSeparatorRenderEventHandlerExtensions.ToolStripSeparatorRenderEventHandlerable.BeginInvoke(System.Windows.Forms.ToolStripSeparatorRenderEventHandler,System.Object,System.Windows.Forms.ToolStripSeparatorRenderEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            toolstripseparatorrendereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TreeNodeConverterExtensions.TreeNodeConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.TreeNodeConverter">TreeNodeConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TreeNodeConverterExtensions.TreeNodeConverterable.ConvertTo``1(System.Windows.Forms.TreeNodeConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TreeNodeConverterExtensions.TreeNodeConverterable.ConvertTo``1(System.Windows.Forms.TreeNodeConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            treenodeconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TreeNodeMouseClickEventHandlerExtensions.TreeNodeMouseClickEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.TreeNodeMouseClickEventHandler">TreeNodeMouseClickEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TreeNodeMouseClickEventHandlerExtensions.TreeNodeMouseClickEventHandlerable.BeginInvoke(System.Windows.Forms.TreeNodeMouseClickEventHandler,System.Object,System.Windows.Forms.TreeNodeMouseClickEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            treenodemouseclickeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TreeNodeMouseHoverEventHandlerExtensions.TreeNodeMouseHoverEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.TreeNodeMouseHoverEventHandler">TreeNodeMouseHoverEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TreeNodeMouseHoverEventHandlerExtensions.TreeNodeMouseHoverEventHandlerable.BeginInvoke(System.Windows.Forms.TreeNodeMouseHoverEventHandler,System.Object,System.Windows.Forms.TreeNodeMouseHoverEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            treenodemousehovereventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TreeViewCancelEventHandlerExtensions.TreeViewCancelEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.TreeViewCancelEventHandler">TreeViewCancelEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TreeViewCancelEventHandlerExtensions.TreeViewCancelEventHandlerable.BeginInvoke(System.Windows.Forms.TreeViewCancelEventHandler,System.Object,System.Windows.Forms.TreeViewCancelEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            treeviewcanceleventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TreeViewEventHandlerExtensions.TreeViewEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.TreeViewEventHandler">TreeViewEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TreeViewEventHandlerExtensions.TreeViewEventHandlerable.BeginInvoke(System.Windows.Forms.TreeViewEventHandler,System.Object,System.Windows.Forms.TreeViewEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            treevieweventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TreeViewImageIndexConverterExtensions.TreeViewImageIndexConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.TreeViewImageIndexConverter">TreeViewImageIndexConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TreeViewImageIndexConverterExtensions.TreeViewImageIndexConverterable.ConvertTo``1(System.Windows.Forms.TreeViewImageIndexConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TreeViewImageIndexConverterExtensions.TreeViewImageIndexConverterable.ConvertTo``1(System.Windows.Forms.TreeViewImageIndexConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            treeviewimageindexconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TreeViewImageKeyConverterExtensions.TreeViewImageKeyConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.TreeViewImageKeyConverter">TreeViewImageKeyConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TreeViewImageKeyConverterExtensions.TreeViewImageKeyConverterable.ConvertTo``1(System.Windows.Forms.TreeViewImageKeyConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TreeViewImageKeyConverterExtensions.TreeViewImageKeyConverterable.ConvertTo``1(System.Windows.Forms.TreeViewImageKeyConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            treeviewimagekeyconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TypeConverterExtensions.TypeConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.TypeConverter">TypeConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TypeConverterExtensions.TypeConverterable.ConvertTo``1(System.ComponentModel.TypeConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TypeConverterExtensions.TypeConverterable.ConvertTo``1(System.ComponentModel.TypeConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TypeDescriptionProviderExtensions.TypeDescriptionProviderable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.TypeDescriptionProvider">TypeDescriptionProvider</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TypeDescriptionProviderExtensions.TypeDescriptionProviderable.CreateInstance``1(System.ComponentModel.TypeDescriptionProvider,System.IServiceProvider,System.Type[],System.Object[])">
            <summary>
            Extends CreateInstance so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typedescriptionprovider.CreateInstance&lt;int&gt;(provider, argTypes, args);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TypeFilterExtensions.TypeFilterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Reflection.TypeFilter">TypeFilter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TypeFilterExtensions.TypeFilterable.BeginInvoke(System.Reflection.TypeFilter,System.Type,System.Object,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            typefilter.BeginInvoke(m, filterCriteria, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TypeListConverterExtensions.TypeListConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.TypeListConverter">TypeListConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TypeListConverterExtensions.TypeListConverterable.ConvertTo``1(System.ComponentModel.TypeListConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typelistconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TypeListConverterExtensions.TypeListConverterable.ConvertTo``1(System.ComponentModel.TypeListConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.TypeValidationEventHandlerExtensions.TypeValidationEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.TypeValidationEventHandler">TypeValidationEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.TypeValidationEventHandlerExtensions.TypeValidationEventHandlerable.BeginInvoke(System.Windows.Forms.TypeValidationEventHandler,System.Object,System.Windows.Forms.TypeValidationEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            typevalidationeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.UdpClientExtensions.UdpClientable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.Sockets.UdpClient">UdpClient</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UdpClientExtensions.UdpClientable.Send(System.Net.Sockets.UdpClient,System.Byte[],System.Net.IPEndPoint)">
            <summary>
            
            </summary>
            <param name="udpClient"></param>
            <param name="dgram"></param>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.UdpClientExtensions.UdpClientable.Send(System.Net.Sockets.UdpClient,System.Byte[])">
            <summary>
            
            </summary>
            <param name="udpClient"></param>
            <param name="dgram"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.UdpClientExtensions.UdpClientable.Send(System.Net.Sockets.UdpClient,System.Byte[],System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="udpClient"></param>
            <param name="dgram"></param>
            <param name="hostname"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.UdpClientExtensions.UdpClientable.BeginSend(System.Net.Sockets.UdpClient,System.Byte[],System.String,System.Int32,System.AsyncCallback)">
            <summary>
            
            </summary>
            <param name="udpClient"></param>
            <param name="datagram"></param>
            <param name="hostname"></param>
            <param name="port"></param>
            <param name="asyncCallback"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.UdpClientExtensions.UdpClientable.BeginSend(System.Net.Sockets.UdpClient,System.Byte[],System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="udpClient"></param>
            <param name="datagram"></param>
            <param name="hostname"></param>
            <param name="port"></param>
            <param name="asyncCallback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.UdpClientExtensions.UdpClientable.BeginSend(System.Net.Sockets.UdpClient,System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="udpClient"></param>
            <param name="datagram"></param>
            <param name="bytes"></param>
            <param name="hostname"></param>
            <param name="port"></param>
            <param name="asyncCallback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.UdpClientExtensions.UdpClientable.BeginSend(System.Net.Sockets.UdpClient,System.Byte[],System.AsyncCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="udpClient"></param>
            <param name="datagram"></param>
            <param name="asyncCallback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.UdpClientExtensions.UdpClientable.BeginSend(System.Net.Sockets.UdpClient,System.Byte[],System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="udpClient"></param>
            <param name="datagram"></param>
            <param name="bytes"></param>
            <param name="asyncCallback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.UdpClientExtensions.UdpClientable.BeginSend(System.Net.Sockets.UdpClient,System.Byte[],System.Net.IPEndPoint,System.AsyncCallback)">
            <summary>
            
            </summary>
            <param name="udpClient"></param>
            <param name="datagram"></param>
            <param name="bytes"></param>
            <param name="asyncCallback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.UdpClientExtensions.UdpClientable.BeginSend(System.Net.Sockets.UdpClient,System.Byte[],System.Net.IPEndPoint,System.AsyncCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="udpClient"></param>
            <param name="datagram"></param>
            <param name="bytes"></param>
            <param name="asyncCallback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:PRI.ProductivityExtensions.UdpClientExtensions.UdpClientable.BeginSend(System.Net.Sockets.UdpClient,System.Byte[],System.AsyncCallback)">
            <summary>
            
            </summary>
            <param name="udpClient"></param>
            <param name="datagram"></param>
            <param name="asyncCallback"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:PRI.ProductivityExtensions.UdpClientExtensions.UdpClientable.BeginSend(System.Net.Sockets.UdpClient,System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback)">
            <summary>
            Extends BeginSend so that when a state object is not needed, null does not need to be passed.
            <example>
            udpclient.BeginSend(datagram, bytes, endPoint, requestCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UdpClientExtensions.UdpClientable.BeginSend(System.Net.Sockets.UdpClient,System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginSend so that when a state object is not needed, null does not need to be passed.
            <example>
            udpclient.BeginSend(datagram, bytes, hostname, port, requestCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UdpClientExtensions.UdpClientable.BeginSend(System.Net.Sockets.UdpClient,System.Byte[],System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginSend so that when a state object is not needed, null does not need to be passed.
            <example>
            udpclient.BeginSend(datagram, bytes, requestCallback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UdpClientExtensions.UdpClientable.BeginReceive(System.Net.Sockets.UdpClient,System.AsyncCallback)">
            <summary>
            Extends BeginReceive so that when a state object is not needed, null does not need to be passed.
            <example>
            udpclient.BeginReceive(requestCallback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.UICuesEventHandlerExtensions.UICuesEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.UICuesEventHandler">UICuesEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UICuesEventHandlerExtensions.UICuesEventHandlerable.BeginInvoke(System.Windows.Forms.UICuesEventHandler,System.Object,System.Windows.Forms.UICuesEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            uicueseventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.UInt16ConverterExtensions.UInt16Converterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.UInt16Converter">UInt16Converter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UInt16ConverterExtensions.UInt16Converterable.ConvertTo``1(System.ComponentModel.UInt16Converter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            basenumberconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UInt16ConverterExtensions.UInt16Converterable.ConvertTo``1(System.ComponentModel.UInt16Converter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.UInt32ConverterExtensions.UInt32Converterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.UInt32Converter">UInt32Converter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UInt32ConverterExtensions.UInt32Converterable.ConvertTo``1(System.ComponentModel.UInt32Converter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            basenumberconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UInt32ConverterExtensions.UInt32Converterable.ConvertTo``1(System.ComponentModel.UInt32Converter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.UInt64ConverterExtensions.UInt64Converterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.ComponentModel.UInt64Converter">UInt64Converter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UInt64ConverterExtensions.UInt64Converterable.ConvertTo``1(System.ComponentModel.UInt64Converter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            basenumberconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UInt64ConverterExtensions.UInt64Converterable.ConvertTo``1(System.ComponentModel.UInt64Converter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.UnhandledExceptionEventHandlerExtensions.UnhandledExceptionEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.UnhandledExceptionEventHandler">UnhandledExceptionEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UnhandledExceptionEventHandlerExtensions.UnhandledExceptionEventHandlerable.BeginInvoke(System.UnhandledExceptionEventHandler,System.Object,System.UnhandledExceptionEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            unhandledexceptioneventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.UnmanagedMemoryAccessorExtensions.UnmanagedMemoryAccessorable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.UnmanagedMemoryAccessor">UnmanagedMemoryAccessor</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UnmanagedMemoryAccessorExtensions.UnmanagedMemoryAccessorable.ReadArray``1(System.IO.UnmanagedMemoryAccessor,System.Int64,``0[])">
            <summary>
            Extends ReadArray&lt;T&gt; so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            unmanagedmemoryaccessor.ReadArray&lt;T&gt;(position, array);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UnmanagedMemoryAccessorExtensions.UnmanagedMemoryAccessorable.WriteArray``1(System.IO.UnmanagedMemoryAccessor,System.Int64,``0[])">
            <summary>
            Extends WriteArray&lt;T&gt; so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            unmanagedmemoryaccessor.WriteArray&lt;T&gt;(position, array);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.UnmanagedMemoryStreamExtensions.UnmanagedMemoryStreamable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.IO.UnmanagedMemoryStream">UnmanagedMemoryStream</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UnmanagedMemoryStreamExtensions.UnmanagedMemoryStreamable.BeginRead(System.IO.UnmanagedMemoryStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginRead so that when a state object is not needed, null does not need to be passed.
            <example>
            stream.BeginRead(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UnmanagedMemoryStreamExtensions.UnmanagedMemoryStreamable.BeginRead(System.IO.UnmanagedMemoryStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.BeginRead(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UnmanagedMemoryStreamExtensions.UnmanagedMemoryStreamable.BeginWrite(System.IO.UnmanagedMemoryStream,System.Byte[],System.Int32,System.Int32,System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
            <example>
            stream.BeginWrite(buffer, offset, count, callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UnmanagedMemoryStreamExtensions.UnmanagedMemoryStreamable.BeginWrite(System.IO.UnmanagedMemoryStream,System.Byte[],System.AsyncCallback)">
            <summary>
            Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            stream.BeginWrite(buffer, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.UnreferencedObjectEventHandlerExtensions.UnreferencedObjectEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.Serialization.UnreferencedObjectEventHandler">UnreferencedObjectEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UnreferencedObjectEventHandlerExtensions.UnreferencedObjectEventHandlerable.BeginInvoke(System.Xml.Serialization.UnreferencedObjectEventHandler,System.Object,System.Xml.Serialization.UnreferencedObjectEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            unreferencedobjecteventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.UpDownEventHandlerExtensions.UpDownEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.UpDownEventHandler">UpDownEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UpDownEventHandlerExtensions.UpDownEventHandlerable.BeginInvoke(System.Windows.Forms.UpDownEventHandler,System.Object,System.Windows.Forms.UpDownEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            updowneventhandler.BeginInvoke(source, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.UploadDataCompletedEventHandlerExtensions.UploadDataCompletedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.UploadDataCompletedEventHandler">UploadDataCompletedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UploadDataCompletedEventHandlerExtensions.UploadDataCompletedEventHandlerable.BeginInvoke(System.Net.UploadDataCompletedEventHandler,System.Object,System.Net.UploadDataCompletedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            uploaddatacompletedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.UploadFileCompletedEventHandlerExtensions.UploadFileCompletedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.UploadFileCompletedEventHandler">UploadFileCompletedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UploadFileCompletedEventHandlerExtensions.UploadFileCompletedEventHandlerable.BeginInvoke(System.Net.UploadFileCompletedEventHandler,System.Object,System.Net.UploadFileCompletedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            uploadfilecompletedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.UploadProgressChangedEventHandlerExtensions.UploadProgressChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.UploadProgressChangedEventHandler">UploadProgressChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UploadProgressChangedEventHandlerExtensions.UploadProgressChangedEventHandlerable.BeginInvoke(System.Net.UploadProgressChangedEventHandler,System.Object,System.Net.UploadProgressChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            uploadprogresschangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.UploadStringCompletedEventHandlerExtensions.UploadStringCompletedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.UploadStringCompletedEventHandler">UploadStringCompletedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UploadStringCompletedEventHandlerExtensions.UploadStringCompletedEventHandlerable.BeginInvoke(System.Net.UploadStringCompletedEventHandler,System.Object,System.Net.UploadStringCompletedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            uploadstringcompletedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.UploadValuesCompletedEventHandlerExtensions.UploadValuesCompletedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.UploadValuesCompletedEventHandler">UploadValuesCompletedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UploadValuesCompletedEventHandlerExtensions.UploadValuesCompletedEventHandlerable.BeginInvoke(System.Net.UploadValuesCompletedEventHandler,System.Object,System.Net.UploadValuesCompletedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            uploadvaluescompletedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.UriTypeConverterExtensions.UriTypeConverterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.UriTypeConverter">UriTypeConverter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UriTypeConverterExtensions.UriTypeConverterable.ConvertTo``1(System.UriTypeConverter,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            uritypeconverter.ConvertTo&lt;int&gt;(context, culture, value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UriTypeConverterExtensions.UriTypeConverterable.ConvertTo``1(System.UriTypeConverter,System.Object)">
            <summary>
            Extends ConvertTo so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            typeconverter.ConvertTo&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.UserPreferenceChangedEventHandlerExtensions.UserPreferenceChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:Microsoft.Win32.UserPreferenceChangedEventHandler">UserPreferenceChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UserPreferenceChangedEventHandlerExtensions.UserPreferenceChangedEventHandlerable.BeginInvoke(Microsoft.Win32.UserPreferenceChangedEventHandler,System.Object,Microsoft.Win32.UserPreferenceChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            userpreferencechangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.UserPreferenceChangingEventHandlerExtensions.UserPreferenceChangingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:Microsoft.Win32.UserPreferenceChangingEventHandler">UserPreferenceChangingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.UserPreferenceChangingEventHandlerExtensions.UserPreferenceChangingEventHandlerable.BeginInvoke(Microsoft.Win32.UserPreferenceChangingEventHandler,System.Object,Microsoft.Win32.UserPreferenceChangingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            userpreferencechangingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.ValidationEventHandlerExtensions.ValidationEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.Schema.ValidationEventHandler">ValidationEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.ValidationEventHandlerExtensions.ValidationEventHandlerable.BeginInvoke(System.Xml.Schema.ValidationEventHandler,System.Object,System.Xml.Schema.ValidationEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            validationeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.WaitCallbackExtensions.WaitCallbackable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Threading.WaitCallback">WaitCallback</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.WaitCallbackExtensions.WaitCallbackable.BeginInvoke(System.Threading.WaitCallback,System.Object,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            waitcallback.BeginInvoke(state, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.WaitOrTimerCallbackExtensions.WaitOrTimerCallbackable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Threading.WaitOrTimerCallback">WaitOrTimerCallback</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.WaitOrTimerCallbackExtensions.WaitOrTimerCallbackable.BeginInvoke(System.Threading.WaitOrTimerCallback,System.Object,System.Boolean,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            waitortimercallback.BeginInvoke(state, timedOut, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.WebBrowserDocumentCompletedEventHandlerExtensions.WebBrowserDocumentCompletedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.WebBrowserDocumentCompletedEventHandler">WebBrowserDocumentCompletedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.WebBrowserDocumentCompletedEventHandlerExtensions.WebBrowserDocumentCompletedEventHandlerable.BeginInvoke(System.Windows.Forms.WebBrowserDocumentCompletedEventHandler,System.Object,System.Windows.Forms.WebBrowserDocumentCompletedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            webbrowserdocumentcompletedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.WebBrowserNavigatedEventHandlerExtensions.WebBrowserNavigatedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.WebBrowserNavigatedEventHandler">WebBrowserNavigatedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.WebBrowserNavigatedEventHandlerExtensions.WebBrowserNavigatedEventHandlerable.BeginInvoke(System.Windows.Forms.WebBrowserNavigatedEventHandler,System.Object,System.Windows.Forms.WebBrowserNavigatedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            webbrowsernavigatedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.WebBrowserNavigatingEventHandlerExtensions.WebBrowserNavigatingEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.WebBrowserNavigatingEventHandler">WebBrowserNavigatingEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.WebBrowserNavigatingEventHandlerExtensions.WebBrowserNavigatingEventHandlerable.BeginInvoke(System.Windows.Forms.WebBrowserNavigatingEventHandler,System.Object,System.Windows.Forms.WebBrowserNavigatingEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            webbrowsernavigatingeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.WebBrowserProgressChangedEventHandlerExtensions.WebBrowserProgressChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Windows.Forms.WebBrowserProgressChangedEventHandler">WebBrowserProgressChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.WebBrowserProgressChangedEventHandlerExtensions.WebBrowserProgressChangedEventHandlerable.BeginInvoke(System.Windows.Forms.WebBrowserProgressChangedEventHandler,System.Object,System.Windows.Forms.WebBrowserProgressChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            webbrowserprogresschangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.WebRequestExtensions.WebRequestable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Net.WebRequest">WebRequest</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.WebRequestExtensions.WebRequestable.BeginGetResponse(System.Net.WebRequest,System.AsyncCallback)">
            <summary>
            Extends BeginGetResponse so that when a state object is not needed, null does not need to be passed.
            <example>
            webrequest.BeginGetResponse(callback);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.WebRequestExtensions.WebRequestable.BeginGetRequestStream(System.Net.WebRequest,System.AsyncCallback)">
            <summary>
            Extends BeginGetRequestStream so that when a state object is not needed, null does not need to be passed.
            <example>
            webrequest.BeginGetRequestStream(callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XmlAtomicValueExtensions.XmlAtomicValueable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.Schema.XmlAtomicValue">XmlAtomicValue</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlAtomicValueExtensions.XmlAtomicValueable.ValueAs``1(System.Xml.Schema.XmlAtomicValue,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Extends ValueAs so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            xmlatomicvalue.ValueAs&lt;int&gt;(nsResolver);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XmlAttributeEventHandlerExtensions.XmlAttributeEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.Serialization.XmlAttributeEventHandler">XmlAttributeEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlAttributeEventHandlerExtensions.XmlAttributeEventHandlerable.BeginInvoke(System.Xml.Serialization.XmlAttributeEventHandler,System.Object,System.Xml.Serialization.XmlAttributeEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            xmlattributeeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XmlElementEventHandlerExtensions.XmlElementEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.Serialization.XmlElementEventHandler">XmlElementEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlElementEventHandlerExtensions.XmlElementEventHandlerable.BeginInvoke(System.Xml.Serialization.XmlElementEventHandler,System.Object,System.Xml.Serialization.XmlElementEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            xmlelementeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XmlNameTableExtensions.XmlNameTableable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.XmlNameTable">XmlNameTable</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlNameTableExtensions.XmlNameTableable.Get(System.Xml.XmlNameTable,System.Char[])">
            <summary>
            Extends Get so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            xmlnametable.Get(array);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlNameTableExtensions.XmlNameTableable.Add(System.Xml.XmlNameTable,System.Char[])">
            <summary>
            Extends Add so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            xmlnametable.Add(array);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XmlNodeChangedEventHandlerExtensions.XmlNodeChangedEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.XmlNodeChangedEventHandler">XmlNodeChangedEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlNodeChangedEventHandlerExtensions.XmlNodeChangedEventHandlerable.BeginInvoke(System.Xml.XmlNodeChangedEventHandler,System.Object,System.Xml.XmlNodeChangedEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            xmlnodechangedeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XmlNodeEventHandlerExtensions.XmlNodeEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.Serialization.XmlNodeEventHandler">XmlNodeEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlNodeEventHandlerExtensions.XmlNodeEventHandlerable.BeginInvoke(System.Xml.Serialization.XmlNodeEventHandler,System.Object,System.Xml.Serialization.XmlNodeEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            xmlnodeeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XmlNodeReaderExtensions.XmlNodeReaderable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.XmlNodeReader">XmlNodeReader</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlNodeReaderExtensions.XmlNodeReaderable.ReadContentAs``1(System.Xml.XmlNodeReader,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Extends ReadContentAs so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            xmlreader.ReadContentAs&lt;int&gt;(namespaceResolver);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlNodeReaderExtensions.XmlNodeReaderable.ReadElementContentAs``1(System.Xml.XmlNodeReader,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Extends ReadElementContentAs so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            xmlreader.ReadElementContentAs&lt;int&gt;(namespaceResolver);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlNodeReaderExtensions.XmlNodeReaderable.ReadElementContentAs``1(System.Xml.XmlNodeReader,System.Xml.IXmlNamespaceResolver,System.String,System.String)">
            <summary>
            Extends ReadElementContentAs so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            xmlreader.ReadElementContentAs&lt;int&gt;(namespaceResolver, localName, namespaceURI);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XmlReaderExtensions.XmlReaderable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.XmlReader">XmlReader</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlReaderExtensions.XmlReaderable.ReadContentAs``1(System.Xml.XmlReader,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Extends ReadContentAs so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            xmlreader.ReadContentAs&lt;int&gt;(namespaceResolver);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlReaderExtensions.XmlReaderable.ReadElementContentAs``1(System.Xml.XmlReader,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Extends ReadElementContentAs so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            xmlreader.ReadElementContentAs&lt;int&gt;(namespaceResolver);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlReaderExtensions.XmlReaderable.ReadElementContentAs``1(System.Xml.XmlReader,System.Xml.IXmlNamespaceResolver,System.String,System.String)">
            <summary>
            Extends ReadElementContentAs so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            xmlreader.ReadElementContentAs&lt;int&gt;(namespaceResolver, localName, namespaceURI);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlReaderExtensions.XmlReaderable.ReadContentAsBase64(System.Xml.XmlReader,System.Byte[])">
            <summary>
            Extends ReadContentAsBase64 so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            xmlreader.ReadContentAsBase64(buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlReaderExtensions.XmlReaderable.ReadElementContentAsBase64(System.Xml.XmlReader,System.Byte[])">
            <summary>
            Extends ReadElementContentAsBase64 so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            xmlreader.ReadElementContentAsBase64(buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlReaderExtensions.XmlReaderable.ReadContentAsBinHex(System.Xml.XmlReader,System.Byte[])">
            <summary>
            Extends ReadContentAsBinHex so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            xmlreader.ReadContentAsBinHex(buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlReaderExtensions.XmlReaderable.ReadElementContentAsBinHex(System.Xml.XmlReader,System.Byte[])">
            <summary>
            Extends ReadElementContentAsBinHex so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            xmlreader.ReadElementContentAsBinHex(buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlReaderExtensions.XmlReaderable.ReadValueChunk(System.Xml.XmlReader,System.Char[])">
            <summary>
            Extends ReadValueChunk so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            xmlreader.ReadValueChunk(buffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XmlResolverExtensions.XmlResolverable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.XmlResolver">XmlResolver</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlResolverExtensions.XmlResolverable.GetEntity``1(System.Xml.XmlResolver,System.Uri,System.String)">
            <summary>
            Extends GetEntity so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            xmlresolver.GetEntity&lt;int&gt;(absoluteUri, role);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XmlSchemaDatatypeExtensions.XmlSchemaDatatypeable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.Schema.XmlSchemaDatatype">XmlSchemaDatatype</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlSchemaDatatypeExtensions.XmlSchemaDatatypeable.ChangeType``1(System.Xml.Schema.XmlSchemaDatatype,System.Object)">
            <summary>
            Extends ChangeType so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            xmlschemadatatype.ChangeType&lt;int&gt;(value);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlSchemaDatatypeExtensions.XmlSchemaDatatypeable.ChangeType``1(System.Xml.Schema.XmlSchemaDatatype,System.Object,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Extends ChangeType so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            xmlschemadatatype.ChangeType&lt;int&gt;(value, namespaceResolver);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XmlSchemasExtensions.XmlSchemasable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.Serialization.XmlSchemas">XmlSchemas</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlSchemasExtensions.XmlSchemasable.Find``1(System.Xml.Serialization.XmlSchemas,System.Xml.XmlQualifiedName)">
            <summary>
            Extends Find so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            xmlschemas.Find&lt;int&gt;(name);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XmlSecureResolverExtensions.XmlSecureResolverable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.XmlSecureResolver">XmlSecureResolver</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlSecureResolverExtensions.XmlSecureResolverable.GetEntity``1(System.Xml.XmlSecureResolver,System.Uri,System.String)">
            <summary>
            Extends GetEntity so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            xmlsecureresolver.GetEntity&lt;int&gt;(absoluteUri, role);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XmlSerializationCollectionFixupCallbackExtensions.XmlSerializationCollectionFixupCallbackable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.Serialization.XmlSerializationCollectionFixupCallback">XmlSerializationCollectionFixupCallback</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlSerializationCollectionFixupCallbackExtensions.XmlSerializationCollectionFixupCallbackable.BeginInvoke(System.Xml.Serialization.XmlSerializationCollectionFixupCallback,System.Object,System.Object,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            xmlserializationcollectionfixupcallback.BeginInvoke(collection, collectionItems, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XmlSerializationFixupCallbackExtensions.XmlSerializationFixupCallbackable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.Serialization.XmlSerializationFixupCallback">XmlSerializationFixupCallback</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlSerializationFixupCallbackExtensions.XmlSerializationFixupCallbackable.BeginInvoke(System.Xml.Serialization.XmlSerializationFixupCallback,System.Object,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            xmlserializationfixupcallback.BeginInvoke(fixup, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XmlSerializationReadCallbackExtensions.XmlSerializationReadCallbackable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.Serialization.XmlSerializationReadCallback">XmlSerializationReadCallback</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlSerializationReadCallbackExtensions.XmlSerializationReadCallbackable.BeginInvoke(System.Xml.Serialization.XmlSerializationReadCallback,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            xmlserializationreadcallback.BeginInvoke(callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XmlSerializationWriteCallbackExtensions.XmlSerializationWriteCallbackable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.Serialization.XmlSerializationWriteCallback">XmlSerializationWriteCallback</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlSerializationWriteCallbackExtensions.XmlSerializationWriteCallbackable.BeginInvoke(System.Xml.Serialization.XmlSerializationWriteCallback,System.Object,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            xmlserializationwritecallback.BeginInvoke(o, callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XmlPreloadedResolverExtensions.XmlPreloadedResolverable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.Resolvers.XmlPreloadedResolver">XmlPreloadedResolver</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlPreloadedResolverExtensions.XmlPreloadedResolverable.GetEntity``1(System.Xml.Resolvers.XmlPreloadedResolver,System.Uri,System.String)">
            <summary>
            Extends GetEntity so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            xmlpreloadedresolver.GetEntity&lt;int&gt;(absoluteUri, role);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XmlTextReaderExtensions.XmlTextReaderable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.XmlTextReader">XmlTextReader</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlTextReaderExtensions.XmlTextReaderable.ReadChars(System.Xml.XmlTextReader,System.Char[])">
            <summary>
            Extends ReadChars so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            xmltextreader.ReadChars(buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlTextReaderExtensions.XmlTextReaderable.ReadBase64(System.Xml.XmlTextReader,System.Byte[])">
            <summary>
            Extends ReadBase64 so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            xmltextreader.ReadBase64(array);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlTextReaderExtensions.XmlTextReaderable.ReadBinHex(System.Xml.XmlTextReader,System.Byte[])">
            <summary>
            Extends ReadBinHex so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            xmltextreader.ReadBinHex(array);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlTextReaderExtensions.XmlTextReaderable.ReadContentAs``1(System.Xml.XmlTextReader,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Extends ReadContentAs so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            xmlreader.ReadContentAs&lt;int&gt;(namespaceResolver);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlTextReaderExtensions.XmlTextReaderable.ReadElementContentAs``1(System.Xml.XmlTextReader,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Extends ReadElementContentAs so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            xmlreader.ReadElementContentAs&lt;int&gt;(namespaceResolver);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlTextReaderExtensions.XmlTextReaderable.ReadElementContentAs``1(System.Xml.XmlTextReader,System.Xml.IXmlNamespaceResolver,System.String,System.String)">
            <summary>
            Extends ReadElementContentAs so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            xmlreader.ReadElementContentAs&lt;int&gt;(namespaceResolver, localName, namespaceURI);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XmlUrlResolverExtensions.XmlUrlResolverable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.XmlUrlResolver">XmlUrlResolver</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlUrlResolverExtensions.XmlUrlResolverable.GetEntity``1(System.Xml.XmlUrlResolver,System.Uri,System.String)">
            <summary>
            Extends GetEntity so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            xmlurlresolver.GetEntity&lt;int&gt;(absoluteUri, role);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XmlValidatingReaderExtensions.XmlValidatingReaderable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.XmlValidatingReader">XmlValidatingReader</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlValidatingReaderExtensions.XmlValidatingReaderable.ReadContentAs``1(System.Xml.XmlValidatingReader,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Extends ReadContentAs so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            xmlreader.ReadContentAs&lt;int&gt;(namespaceResolver);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlValidatingReaderExtensions.XmlValidatingReaderable.ReadElementContentAs``1(System.Xml.XmlValidatingReader,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Extends ReadElementContentAs so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            xmlreader.ReadElementContentAs&lt;int&gt;(namespaceResolver);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlValidatingReaderExtensions.XmlValidatingReaderable.ReadElementContentAs``1(System.Xml.XmlValidatingReader,System.Xml.IXmlNamespaceResolver,System.String,System.String)">
            <summary>
            Extends ReadElementContentAs so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            xmlreader.ReadElementContentAs&lt;int&gt;(namespaceResolver, localName, namespaceURI);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XmlValueGetterExtensions.XmlValueGetterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.Schema.XmlValueGetter">XmlValueGetter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlValueGetterExtensions.XmlValueGetterable.BeginInvoke(System.Xml.Schema.XmlValueGetter,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            xmlvaluegetter.BeginInvoke(callback);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XmlWriterExtensions.XmlWriterable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.XmlWriter">XmlWriter</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlWriterExtensions.XmlWriterable.WriteChars(System.Xml.XmlWriter,System.Char[])">
            <summary>
            Extends WriteChars so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            xmlwriter.WriteChars(buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlWriterExtensions.XmlWriterable.WriteRaw(System.Xml.XmlWriter,System.Char[])">
            <summary>
            Extends WriteRaw so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            xmlwriter.WriteRaw(buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlWriterExtensions.XmlWriterable.WriteBase64(System.Xml.XmlWriter,System.Byte[])">
            <summary>
            Extends WriteBase64 so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            xmlwriter.WriteBase64(buffer);
            </example>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XmlWriterExtensions.XmlWriterable.WriteBinHex(System.Xml.XmlWriter,System.Byte[])">
            <summary>
            Extends WriteBinHex so that buffer offset of 0 and call to Array.Length are not needed.
            <example>
            xmlwriter.WriteBinHex(buffer);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XPathItemExtensions.XPathItemable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.XPath.XPathItem">XPathItem</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XPathItemExtensions.XPathItemable.ValueAs``1(System.Xml.XPath.XPathItem,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Extends ValueAs so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            xpathitem.ValueAs&lt;int&gt;(nsResolver);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XPathNavigatorExtensions.XPathNavigatorable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.XPath.XPathNavigator">XPathNavigator</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XPathNavigatorExtensions.XPathNavigatorable.ValueAs``1(System.Xml.XPath.XPathNavigator,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Extends ValueAs so that methods that return a specific type object given a Type parameter can be
            used as generic method and casting is not required.
            <example>
            xpathnavigator.ValueAs&lt;int&gt;(nsResolver);
            </example>
            </summary>
        </member>
        <member name="T:PRI.ProductivityExtensions.XsltMessageEncounteredEventHandlerExtensions.XsltMessageEncounteredEventHandlerable">
            <summary>
            Class that contains extension methods that extend <seealso cref="T:System.Xml.Xsl.XsltMessageEncounteredEventHandler">XsltMessageEncounteredEventHandler</seealso>
            </summary>
        </member>
        <member name="M:PRI.ProductivityExtensions.XsltMessageEncounteredEventHandlerExtensions.XsltMessageEncounteredEventHandlerable.BeginInvoke(System.Xml.Xsl.XsltMessageEncounteredEventHandler,System.Object,System.Xml.Xsl.XsltMessageEncounteredEventArgs,System.AsyncCallback)">
            <summary>
            Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
            <example>
            xsltmessageencounteredeventhandler.BeginInvoke(sender, e, callback);
            </example>
            </summary>
        </member>
    </members>
</doc>
