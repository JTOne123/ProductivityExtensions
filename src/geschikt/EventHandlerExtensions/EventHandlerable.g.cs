//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

namespace PRI.ProductivityExtensions.EventHandlerExtensions
{

#pragma warning disable CS1570 // XML comment has badly formed XML -- 'Missing closing quotation mark for string literal.'
#pragma warning disable CS1570 // XML comment has badly formed XML -- 'Expected '>' or '/>' to close tag 'seealso'.'
#pragma warning disable CS1570 // XML comment has badly formed XML -- 'End tag 'seealso' does not match the start tag 'TEventArgs'.'
	/// <summary>
	/// Class that contains extension methods that extend <seealso cref="System.EventHandler<TEventArgs>">EventHandler&lt;TEventArgs&gt;</seealso>
	/// </summary>
	public static partial class EventHandlerable
#pragma warning restore CS1570 // XML comment has badly formed XML -- 'End tag 'seealso' does not match the start tag 'TEventArgs'.'
#pragma warning restore CS1570 // XML comment has badly formed XML -- 'Expected '>' or '/>' to close tag 'seealso'.'
#pragma warning restore CS1570 // XML comment has badly formed XML -- 'Missing closing quotation mark for string literal.'
	{
		/// <summary>
		/// Extends BeginInvoke&lt;TEventArgs&gt; so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// eventhandler.BeginInvoke&lt;TEventArgs&gt;(sender, e, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginInvoke<TEventArgs>(this EventHandler<TEventArgs> eventhandler, Object sender, TEventArgs e, AsyncCallback callback) where TEventArgs : EventArgs
		{
			if(eventhandler == null) throw new ArgumentNullException("eventhandler");

			return eventhandler.BeginInvoke(sender, e, callback, null);
		}

	}
}
