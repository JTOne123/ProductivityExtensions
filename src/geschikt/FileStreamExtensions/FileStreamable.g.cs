//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.IO;

namespace PRI.ProductivityExtensions.FileStreamExtensions
{

	/// <summary>
	/// Class that contains extension methods that extend <seealso cref="System.IO.FileStream">FileStream</seealso>
	/// </summary>
	public static partial class FileStreamable
	{
		/// <summary>
		/// Extends BeginRead so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// filestream.BeginRead(array, offset, numBytes, userCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginRead(this FileStream filestream, Byte[] array, Int32 offset, Int32 numBytes, AsyncCallback userCallback)
		{
			if(filestream == null) throw new ArgumentNullException("filestream");

			return filestream.BeginRead(array, offset, numBytes, userCallback, null);
		}

		/// <summary>
		/// Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// filestream.BeginRead(array, userCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginRead(this FileStream filestream, Byte[] array, AsyncCallback userCallback)
		{
			if(filestream == null) throw new ArgumentNullException("filestream");

			if(array == null) throw new ArgumentNullException("array");

			return filestream.BeginRead(array, 0, array.Length, userCallback);
		}

		/// <summary>
		/// Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// filestream.BeginWrite(array, offset, numBytes, userCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginWrite(this FileStream filestream, Byte[] array, Int32 offset, Int32 numBytes, AsyncCallback userCallback)
		{
			if(filestream == null) throw new ArgumentNullException("filestream");

			return filestream.BeginWrite(array, offset, numBytes, userCallback, null);
		}

		/// <summary>
		/// Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// filestream.BeginWrite(array, userCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginWrite(this FileStream filestream, Byte[] array, AsyncCallback userCallback)
		{
			if(filestream == null) throw new ArgumentNullException("filestream");

			if(array == null) throw new ArgumentNullException("array");

			return filestream.BeginWrite(array, 0, array.Length, userCallback);
		}

	}
}
