#if (NETSTANDARD2_0 || NET4_0 || NET4_5)
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.IO.IsolatedStorage;

namespace PRI.ProductivityExtensions.IsolatedStorageFileStreamExtensions
{

	/// <summary>
	/// Class that contains extension methods that extend <seealso cref="System.IO.IsolatedStorage.IsolatedStorageFileStream">IsolatedStorageFileStream</seealso>
	/// </summary>
	public static partial class IsolatedStorageFileStreamable
	{
		/// <summary>
		/// Extends BeginRead so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// isolatedstoragefilestream.BeginRead(buffer, offset, numBytes, userCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginRead(this IsolatedStorageFileStream isolatedstoragefilestream, Byte[] buffer, Int32 offset, Int32 numBytes, AsyncCallback userCallback)
		{
			if(isolatedstoragefilestream == null) throw new ArgumentNullException("isolatedstoragefilestream");

			return isolatedstoragefilestream.BeginRead(buffer, offset, numBytes, userCallback, null);
		}

		/// <summary>
		/// Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// isolatedstoragefilestream.BeginRead(buffer, userCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginRead(this IsolatedStorageFileStream isolatedstoragefilestream, Byte[] buffer, AsyncCallback userCallback)
		{
			if(isolatedstoragefilestream == null) throw new ArgumentNullException("isolatedstoragefilestream");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return isolatedstoragefilestream.BeginRead(buffer, 0, buffer.Length, userCallback);
		}

		/// <summary>
		/// Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// isolatedstoragefilestream.BeginWrite(buffer, offset, numBytes, userCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginWrite(this IsolatedStorageFileStream isolatedstoragefilestream, Byte[] buffer, Int32 offset, Int32 numBytes, AsyncCallback userCallback)
		{
			if(isolatedstoragefilestream == null) throw new ArgumentNullException("isolatedstoragefilestream");

			return isolatedstoragefilestream.BeginWrite(buffer, offset, numBytes, userCallback, null);
		}

		/// <summary>
		/// Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// isolatedstoragefilestream.BeginWrite(buffer, userCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginWrite(this IsolatedStorageFileStream isolatedstoragefilestream, Byte[] buffer, AsyncCallback userCallback)
		{
			if(isolatedstoragefilestream == null) throw new ArgumentNullException("isolatedstoragefilestream");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return isolatedstoragefilestream.BeginWrite(buffer, 0, buffer.Length, userCallback);
		}

	}
}
#endif