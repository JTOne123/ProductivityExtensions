//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Text;

namespace PRI.ProductivityExtensions.EncodingExtensions
{

	/// <summary>
	/// Class that contains extension methods that extend <seealso cref="System.Text.Encoding">Encoding</seealso>
	/// </summary>
	public static partial class Encodingable
	{
		/// <summary>
		/// Extends GetBytes so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// encoding.GetBytes(chars, bytes, byteIndex);
		/// </example>
		/// </summary>
		public static Int32 GetBytes(this Encoding encoding, Char[] chars, Byte[] bytes, Int32 byteIndex)
		{
			if(encoding == null) throw new ArgumentNullException("encoding");

			if(chars == null) throw new ArgumentNullException("chars");

			return encoding.GetBytes(chars, 0, chars.Length, bytes, byteIndex);
		}

		/// <summary>
		/// Extends GetChars so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// encoding.GetChars(bytes, chars, charIndex);
		/// </example>
		/// </summary>
		public static Int32 GetChars(this Encoding encoding, Byte[] bytes, Char[] chars, Int32 charIndex)
		{
			if(encoding == null) throw new ArgumentNullException("encoding");

			if(bytes == null) throw new ArgumentNullException("bytes");

			return encoding.GetChars(bytes, 0, bytes.Length, chars, charIndex);
		}

	}
}
