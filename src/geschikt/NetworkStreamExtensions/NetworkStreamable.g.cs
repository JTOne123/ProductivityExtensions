#if (NETSTANDARD2_0 || NETSTANDARD1_6 || NETSTANDARD1_5 || NETSTANDARD1_4 || NETSTANDARD1_3 || NETSTANDARD1_2 || NETSTANDARD1_1 || NET4_0 || NET4_5)
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Net.Sockets;

namespace PRI.ProductivityExtensions.NetworkStreamExtensions
{

	/// <summary>
	/// Class that contains extension methods that extend <seealso cref="System.Net.Sockets.NetworkStream">NetworkStream</seealso>
	/// </summary>
	public static partial class NetworkStreamable
	{
#if (NETSTANDARD2_0 || NET4_0 || NET4_5)
		/// <summary>
		/// Extends BeginRead so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// networkstream.BeginRead(buffer, offset, size, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginRead(this NetworkStream networkstream, Byte[] buffer, Int32 offset, Int32 size, AsyncCallback callback)
		{
			if(networkstream == null) throw new ArgumentNullException("networkstream");

			return networkstream.BeginRead(buffer, offset, size, callback, null);
		}

		/// <summary>
		/// Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// networkstream.BeginRead(buffer, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginRead(this NetworkStream networkstream, Byte[] buffer, AsyncCallback callback)
		{
			if(networkstream == null) throw new ArgumentNullException("networkstream");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return networkstream.BeginRead(buffer, 0, buffer.Length, callback);
		}

		/// <summary>
		/// Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// networkstream.BeginWrite(buffer, offset, size, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginWrite(this NetworkStream networkstream, Byte[] buffer, Int32 offset, Int32 size, AsyncCallback callback)
		{
			if(networkstream == null) throw new ArgumentNullException("networkstream");

			return networkstream.BeginWrite(buffer, offset, size, callback, null);
		}

		/// <summary>
		/// Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// networkstream.BeginWrite(buffer, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginWrite(this NetworkStream networkstream, Byte[] buffer, AsyncCallback callback)
		{
			if(networkstream == null) throw new ArgumentNullException("networkstream");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return networkstream.BeginWrite(buffer, 0, buffer.Length, callback);
		}
#endif
	}
}
#endif