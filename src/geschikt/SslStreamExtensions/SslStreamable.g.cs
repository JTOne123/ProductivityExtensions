#if (NETSTANDARD2_0 || NET4_0 || NET4_5)
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Net.Security;

namespace PRI.ProductivityExtensions.SslStreamExtensions
{

	/// <summary>
	/// Class that contains extension methods that extend <seealso cref="System.Net.Security.SslStream">SslStream</seealso>
	/// </summary>
	public static partial class SslStreamable
	{
		/// <summary>
		/// Extends BeginAuthenticateAsClient so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// sslstream.BeginAuthenticateAsClient(targetHost, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginAuthenticateAsClient(this SslStream sslstream, String targetHost, AsyncCallback asyncCallback)
		{
			if(sslstream == null) throw new ArgumentNullException("sslstream");

			return sslstream.BeginAuthenticateAsClient(targetHost, asyncCallback, null);
		}

		/// <summary>
		/// Extends BeginAuthenticateAsClient so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// sslstream.BeginAuthenticateAsClient(targetHost, clientCertificates, enabledSslProtocols, checkCertificateRevocation, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginAuthenticateAsClient(this SslStream sslstream, String targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, Boolean checkCertificateRevocation, AsyncCallback asyncCallback)
		{
			if(sslstream == null) throw new ArgumentNullException("sslstream");

			return sslstream.BeginAuthenticateAsClient(targetHost, clientCertificates, enabledSslProtocols, checkCertificateRevocation, asyncCallback, null);
		}

		/// <summary>
		/// Extends BeginAuthenticateAsServer so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// sslstream.BeginAuthenticateAsServer(serverCertificate, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginAuthenticateAsServer(this SslStream sslstream, System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, AsyncCallback asyncCallback)
		{
			if(sslstream == null) throw new ArgumentNullException("sslstream");

			return sslstream.BeginAuthenticateAsServer(serverCertificate, asyncCallback, null);
		}

		/// <summary>
		/// Extends BeginAuthenticateAsServer so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// sslstream.BeginAuthenticateAsServer(serverCertificate, clientCertificateRequired, enabledSslProtocols, checkCertificateRevocation, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginAuthenticateAsServer(this SslStream sslstream, System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, Boolean clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, Boolean checkCertificateRevocation, AsyncCallback asyncCallback)
		{
			if(sslstream == null) throw new ArgumentNullException("sslstream");

			return sslstream.BeginAuthenticateAsServer(serverCertificate, clientCertificateRequired, enabledSslProtocols, checkCertificateRevocation, asyncCallback, null);
		}

		/// <summary>
		/// Extends BeginRead so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// sslstream.BeginRead(buffer, offset, count, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginRead(this SslStream sslstream, Byte[] buffer, Int32 offset, Int32 count, AsyncCallback asyncCallback)
		{
			if(sslstream == null) throw new ArgumentNullException("sslstream");

			return sslstream.BeginRead(buffer, offset, count, asyncCallback, null);
		}

		/// <summary>
		/// Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// sslstream.BeginRead(buffer, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginRead(this SslStream sslstream, Byte[] buffer, AsyncCallback asyncCallback)
		{
			if(sslstream == null) throw new ArgumentNullException("sslstream");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return sslstream.BeginRead(buffer, 0, buffer.Length, asyncCallback);
		}

		/// <summary>
		/// Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// sslstream.BeginWrite(buffer, offset, count, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginWrite(this SslStream sslstream, Byte[] buffer, Int32 offset, Int32 count, AsyncCallback asyncCallback)
		{
			if(sslstream == null) throw new ArgumentNullException("sslstream");

			return sslstream.BeginWrite(buffer, offset, count, asyncCallback, null);
		}

		/// <summary>
		/// Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// sslstream.BeginWrite(buffer, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginWrite(this SslStream sslstream, Byte[] buffer, AsyncCallback asyncCallback)
		{
			if(sslstream == null) throw new ArgumentNullException("sslstream");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return sslstream.BeginWrite(buffer, 0, buffer.Length, asyncCallback);
		}

	}
}
#endif