//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Xml;

namespace PRI.ProductivityExtensions.XmlTextReaderExtensions
{

	/// <summary>
	/// Class that contains extension methods that extend <seealso cref="System.Xml.XmlTextReader">XmlTextReader</seealso>
	/// </summary>
	public static partial class XmlTextReaderable
	{
		/// <summary>
		/// Extends ReadChars so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// xmltextreader.ReadChars(buffer);
		/// </example>
		/// </summary>
		public static Int32 ReadChars(this XmlTextReader xmltextreader, Char[] buffer)
		{
			if(xmltextreader == null) throw new ArgumentNullException("xmltextreader");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return xmltextreader.ReadChars(buffer, 0, buffer.Length);
		}

		/// <summary>
		/// Extends ReadBase64 so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// xmltextreader.ReadBase64(array);
		/// </example>
		/// </summary>
		public static Int32 ReadBase64(this XmlTextReader xmltextreader, Byte[] array)
		{
			if(xmltextreader == null) throw new ArgumentNullException("xmltextreader");

			if(array == null) throw new ArgumentNullException("array");

			return xmltextreader.ReadBase64(array, 0, array.Length);
		}

		/// <summary>
		/// Extends ReadBinHex so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// xmltextreader.ReadBinHex(array);
		/// </example>
		/// </summary>
		public static Int32 ReadBinHex(this XmlTextReader xmltextreader, Byte[] array)
		{
			if(xmltextreader == null) throw new ArgumentNullException("xmltextreader");

			if(array == null) throw new ArgumentNullException("array");

			return xmltextreader.ReadBinHex(array, 0, array.Length);
		}

		/// <summary>
		/// Extends ReadContentAs so that methods that return a specific type object given a Type parameter can be
		/// used as generic method and casting is not required.
		/// <example>
		/// xmlreader.ReadContentAs<int>(namespaceResolver);
		/// </example>
		/// </summary>
		public static T ReadContentAs<T>(this XmlTextReader xmlreader, IXmlNamespaceResolver namespaceResolver)
		{
			if(xmlreader == null) throw new ArgumentNullException("xmlreader");

			return (T)xmlreader.ReadContentAs(typeof(T), namespaceResolver);
		}

		/// <summary>
		/// Extends ReadElementContentAs so that methods that return a specific type object given a Type parameter can be
		/// used as generic method and casting is not required.
		/// <example>
		/// xmlreader.ReadElementContentAs<int>(namespaceResolver);
		/// </example>
		/// </summary>
		public static T ReadElementContentAs<T>(this XmlTextReader xmlreader, IXmlNamespaceResolver namespaceResolver)
		{
			if(xmlreader == null) throw new ArgumentNullException("xmlreader");

			return (T)xmlreader.ReadElementContentAs(typeof(T), namespaceResolver);
		}

		/// <summary>
		/// Extends ReadElementContentAs so that methods that return a specific type object given a Type parameter can be
		/// used as generic method and casting is not required.
		/// <example>
		/// xmlreader.ReadElementContentAs<int>(namespaceResolver, localName, namespaceURI);
		/// </example>
		/// </summary>
		public static T ReadElementContentAs<T>(this XmlTextReader xmlreader, IXmlNamespaceResolver namespaceResolver, String localName, String namespaceURI)
		{
			if(xmlreader == null) throw new ArgumentNullException("xmlreader");

			return (T)xmlreader.ReadElementContentAs(typeof(T), namespaceResolver, localName, namespaceURI);
		}

	}
}
