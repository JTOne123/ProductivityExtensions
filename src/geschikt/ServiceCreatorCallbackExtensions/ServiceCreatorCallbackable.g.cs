//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel.Design;

namespace PRI.ProductivityExtensions.ServiceCreatorCallbackExtensions
{

	/// <summary>
	/// Class that contains extension methods that extend <seealso cref="System.ComponentModel.Design.ServiceCreatorCallback">ServiceCreatorCallback</seealso>
	/// </summary>
	public static partial class ServiceCreatorCallbackable
	{
		/// <summary>
		/// Extends Invoke so that methods that return a specific type object given a Type parameter can be
		/// used as generic method and casting is not required.
		/// <example>
		/// servicecreatorcallback.Invoke<int>(container);
		/// </example>
		/// </summary>
		public static T Invoke<T>(this ServiceCreatorCallback servicecreatorcallback, IServiceContainer container)
		{
			if(servicecreatorcallback == null) throw new ArgumentNullException("servicecreatorcallback");

			return (T)servicecreatorcallback.Invoke(container, typeof(T));
		}

		/// <summary>
		/// Extends BeginInvoke so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// servicecreatorcallback.BeginInvoke(container, serviceType, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginInvoke(this ServiceCreatorCallback servicecreatorcallback, IServiceContainer container, Type serviceType, AsyncCallback callback)
		{
			if(servicecreatorcallback == null) throw new ArgumentNullException("servicecreatorcallback");

			return servicecreatorcallback.BeginInvoke(container, serviceType, callback, null);
		}

	}
}
