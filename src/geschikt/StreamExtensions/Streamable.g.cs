//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.IO;

namespace PRI.ProductivityExtensions.StreamExtensions
{

	/// <summary>
	/// Class that contains extension methods that extend <seealso cref="System.IO.Stream">Stream</seealso>
	/// </summary>
	public static partial class Streamable
	{
		/// <summary>
		/// Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// stream.BeginRead(buffer, callback, state);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginRead(this Stream stream, Byte[] buffer, AsyncCallback callback, Object state)
		{
			if(stream == null) throw new ArgumentNullException("stream");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return stream.BeginRead(buffer, 0, buffer.Length, callback, state);
		}

		/// <summary>
		/// Extends BeginRead so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// stream.BeginRead(buffer, offset, count, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginRead(this Stream stream, Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback)
		{
			if(stream == null) throw new ArgumentNullException("stream");

			return stream.BeginRead(buffer, offset, count, callback, null);
		}

		/// <summary>
		/// Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// stream.BeginRead(buffer, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginRead(this Stream stream, Byte[] buffer, AsyncCallback callback)
		{
			if(stream == null) throw new ArgumentNullException("stream");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return stream.BeginRead(buffer, 0, buffer.Length, callback);
		}

		/// <summary>
		/// Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// stream.BeginWrite(buffer, callback, state);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginWrite(this Stream stream, Byte[] buffer, AsyncCallback callback, Object state)
		{
			if(stream == null) throw new ArgumentNullException("stream");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return stream.BeginWrite(buffer, 0, buffer.Length, callback, state);
		}

		/// <summary>
		/// Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// stream.BeginWrite(buffer, offset, count, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginWrite(this Stream stream, Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback)
		{
			if(stream == null) throw new ArgumentNullException("stream");

			return stream.BeginWrite(buffer, offset, count, callback, null);
		}

		/// <summary>
		/// Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// stream.BeginWrite(buffer, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginWrite(this Stream stream, Byte[] buffer, AsyncCallback callback)
		{
			if(stream == null) throw new ArgumentNullException("stream");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return stream.BeginWrite(buffer, 0, buffer.Length, callback);
		}

		/// <summary>
		/// Extends Read so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// stream.Read(buffer);
		/// </example>
		/// </summary>
		public static Int32 Read(this Stream stream, Byte[] buffer)
		{
			if(stream == null) throw new ArgumentNullException("stream");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return stream.Read(buffer, 0, buffer.Length);
		}

		/// <summary>
		/// Extends Write so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// stream.Write(buffer);
		/// </example>
		/// </summary>
		public static void Write(this Stream stream, Byte[] buffer)
		{
			if(stream == null) throw new ArgumentNullException("stream");

			if(buffer == null) throw new ArgumentNullException("buffer");

			stream.Write(buffer, 0, buffer.Length);
		}

	}
}
