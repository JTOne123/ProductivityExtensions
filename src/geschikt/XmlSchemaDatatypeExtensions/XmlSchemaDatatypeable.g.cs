#if (NETSTANDARD2_0 || NET4_0 || NET4_5)
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Xml.Schema;

namespace PRI.ProductivityExtensions.XmlSchemaDatatypeExtensions
{

	/// <summary>
	/// Class that contains extension methods that extend <seealso cref="System.Xml.Schema.XmlSchemaDatatype">XmlSchemaDatatype</seealso>
	/// </summary>
	public static partial class XmlSchemaDatatypeable
	{
		/// <summary>
		/// Extends ChangeType so that methods that return a specific type object given a Type parameter can be
		/// used as generic method and casting is not required.
		/// <example>
		/// xmlschemadatatype.ChangeType&lt;int&gt;(value);
		/// </example>
		/// </summary>
		public static T ChangeType<T>(this XmlSchemaDatatype xmlschemadatatype, Object value)
		{
			if(xmlschemadatatype == null) throw new ArgumentNullException("xmlschemadatatype");

			return (T)xmlschemadatatype.ChangeType(value, typeof(T));
		}

		/// <summary>
		/// Extends ChangeType so that methods that return a specific type object given a Type parameter can be
		/// used as generic method and casting is not required.
		/// <example>
		/// xmlschemadatatype.ChangeType&lt;int&gt;(value, namespaceResolver);
		/// </example>
		/// </summary>
		public static T ChangeType<T>(this XmlSchemaDatatype xmlschemadatatype, Object value, System.Xml.IXmlNamespaceResolver namespaceResolver)
		{
			if(xmlschemadatatype == null) throw new ArgumentNullException("xmlschemadatatype");

			return (T)xmlschemadatatype.ChangeType(value, typeof(T), namespaceResolver);
		}

	}
}
#endif