#if (NETSTANDARD2_0 || NET45 || NET40 || NET451 || NET452 || NET46 || NET461 || NET462)
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.IO.Pipes;

namespace PRI.ProductivityExtensions.NamedPipeServerStreamExtensions
{

	/// <summary>
	/// Class that contains extension methods that extend <seealso cref="System.IO.Pipes.NamedPipeServerStream">NamedPipeServerStream</seealso>
	/// </summary>
	public static partial class NamedPipeServerStreamable
	{
		/// <summary>
		/// Extends BeginWaitForConnection so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// namedpipeserverstream.BeginWaitForConnection(callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginWaitForConnection(this NamedPipeServerStream namedpipeserverstream, AsyncCallback callback)
		{
			if(namedpipeserverstream == null) throw new ArgumentNullException("namedpipeserverstream");

			return namedpipeserverstream.BeginWaitForConnection(callback, null);
		}

		/// <summary>
		/// Extends BeginRead so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// pipestream.BeginRead(buffer, offset, count, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginRead(this NamedPipeServerStream pipestream, Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback)
		{
			if(pipestream == null) throw new ArgumentNullException("pipestream");

			return pipestream.BeginRead(buffer, offset, count, callback, null);
		}

		/// <summary>
		/// Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// pipestream.BeginRead(buffer, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginRead(this NamedPipeServerStream pipestream, Byte[] buffer, AsyncCallback callback)
		{
			if(pipestream == null) throw new ArgumentNullException("pipestream");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return pipestream.BeginRead(buffer, 0, buffer.Length, callback);
		}

		/// <summary>
		/// Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// pipestream.BeginWrite(buffer, offset, count, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginWrite(this NamedPipeServerStream pipestream, Byte[] buffer, Int32 offset, Int32 count, AsyncCallback callback)
		{
			if(pipestream == null) throw new ArgumentNullException("pipestream");

			return pipestream.BeginWrite(buffer, offset, count, callback, null);
		}

		/// <summary>
		/// Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// pipestream.BeginWrite(buffer, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginWrite(this NamedPipeServerStream pipestream, Byte[] buffer, AsyncCallback callback)
		{
			if(pipestream == null) throw new ArgumentNullException("pipestream");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return pipestream.BeginWrite(buffer, 0, buffer.Length, callback);
		}

	}
}
#endif